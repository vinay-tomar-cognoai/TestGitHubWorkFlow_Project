(function ($) {
    $(function () {
        $('.sidenav').sidenav();
        $('.dropdown-trigger').dropdown();
        $('.tooltipped').tooltip();
        $('.collapsible').collapsible();
        $('.modal').modal();
        $('.tooltipped').tooltip({
            position: "top"
        });
        $('.tabs').tabs();
        $('select:not([data-select="false"],.non-select2,.custom-search)').select2({
            width: "100%"
        });
        $('select.custom-search').select2({
            width: "100%",
            matcher: custom_search_logic
        })
        $('#select-sticky-intent-list').select2({
            placeholder: "Select from dropdown",
            allowClear: true,
            width: "100%",
            dropdownParent: $("#modal-select-sticky-intent"),
        })

        $('#filter-stop-words').select2({
            width: "100%",
            dropdownParent: $("#modal-configure-stop-words"),
        })

        $("#multiple-select-intent-choice-list, \
         #multiple-select-initial-message-list, #multiple-select-failure-message-list,\
         #multiple-select-google-initial-message-list, #multiple-select-google-failure-message-list,\
         #multiple-select-alexa-initial-message-list, #multiple-select-alexa-failure-message-list,\
         #multiple-select-whatsapp-initial-message-list, #multiple-select-whatsapp-failure-message-list,\
         #multiple-select-facebook-initial-message-list, #multiple-select-facebook-failure-message-list,#multiple-select-sticky-intent-list,#multiple-select-child-choices,#multiple-select-tree-child-choices").select2({
            width: "40%",

        });


        $("#multiple-select-intent-choice-list, \
         #multiple-select-initial-message-list, #multiple-select-failure-message-list,\
         #multiple-select-google-initial-message-list, #multiple-select-google-failure-message-list,\
         #multiple-select-alexa-initial-message-list, #multiple-select-alexa-failure-message-list,\
         #multiple-select-whatsapp-initial-message-list, #multiple-select-whatsapp-failure-message-list,\
         #multiple-select-facebook-initial-message-list, #multiple-select-facebook-failure-message-list,#multiple-select-sticky-intent-list,#multiple-select-child-choices,#multiple-select-tree-child-choices,#bot-popup-multiple-select-message-list").on("select2:select", function (evt) {
            var element = evt.params.data.element;
            var $element = $(element);

            $element.detach();
            $(this).append($element);
            $(this).trigger("change");
        });

        $('.easychat-theme-slider').slider({
            interval: 1000000000
        });
        // $('.easychat-theme-slider').slider('pause');

        // $("#multiple-select-initial-message-list").on("select2:select", function(evt) {
        //     var element = evt.params.data.element;
        //     var $element = $(element);

        //     $element.detach();
        //     $(this).append($element);
        //     $(this).trigger("change");
        // });
        // $("#multiple-select-failure-message-list").on("select2:select", function(evt) {
        //     var element = evt.params.data.element;
        //     var $element = $(element);

        //     $element.detach();
        //     $(this).append($element);
        //     $(this).trigger("change");
        // });

        $(document).on("keyup", '.show-char-count', function (e) {
            set_character_count(e.target);
        });

        $(document).on("keyup", '#new_bot_name', function (e) {
            set_character_count(e.target);
        });

        setTimeout(() => {
            try {
                if (NEED_TO_BUILD == 'True') {
                    document.getElementById('easychat-build-bot-toast-div').style.display = 'flex';
                    document.getElementById("easychat-content-wrapper").style.maxHeight = '85vh';
                    var side_nav = document.getElementById('main-console-sidenav');
                    if (side_nav) {
                        side_nav.style.marginTop = '6.5%';
                    }
                }
            } catch (err) {
                console.log(err);
            }
        }, 1000);

     

    }); // end of document ready
})(jQuery); // end of jQuery name space

function custom_search_logic(params, data) {
    
    if ($.trim(params.term) === '') {
      return data;
    }

    // Do not display the item if there is no 'text' property
    if (typeof data.text === 'undefined') {
      return null;
    }

    data.text = data.text.trim().toLowerCase();
    params.term = params.term.trim().toLowerCase();

    var variations_words = new Set(data.text.replace(/[^a-zA-Z0-9 ]/g, '').split(" "));
    var words = params.term.replace(/[^a-zA-Z0-9 ]/g, '').split(" ");
    var input_words = new Set(words);

    var non_intersection_words = new Set([...input_words].filter(ele => !variations_words.has(ele)))
    if (!non_intersection_words.size || data.text.indexOf(params.term) > -1) {
        return data;
    } else if (non_intersection_words.size == 1 && data.text.indexOf([...non_intersection_words][0]) > -1) {
        return data;
    }

    // Return `null` if the term should not be displayed
    return null;
}

window.addEventListener('load', (event) => {
    if (navigator.userAgent.indexOf("OP/") > -1 || navigator.userAgent.indexOf("UCBrowser/") > -1 || navigator.userAgent.indexOf("MSIE") > -1 || navigator.userAgent.indexOf("Trident/") > -1) {
        alert("Please switch to Google Chrome for better experience. If you are using Chrome make sure it is updated with the latest version. Thank you!")
        window.location = "/"
    }
});

var SESSION_TIME = 600000; // 10 minutes
var session_timer = "";
var training_data_count = 0;
var faq_response_sentence_count = 0;
var tree_response_sentence_count = 0;
var intent_response_sentence_count = 0;
var intent_image_url_count = 0;
var global_select_tree_id = -1;
var global_select_intent_id = -1;
var global_select_faq_id = -1;
var global_select_parent_id = -1;
var global_select_tree_name = "";
var selected_bot_id_modify_intent = 0;
var last_selected_bot_for_self_learning = null;
var autosave_session_timer = null;
var user_last_activity_time_obj = new Date()
var api_url_count = 0;
var intent_data = "";
var bot_response_data = "";
var default_order_of_response = [];
var table_res = ''
var welcome_banner_edit_element;
var automated_test_progress, automated_testing_started;
var DATA_MASK_TOGGLE_API = '/chat/bot/data-mask-toggle/'
var CHECK_DATA_TOGGLE_OTP_API = '/chat/bot/check-data-toggle-otp/'
var check_theme_change = false
var check_font_change = false
var bot_theme_color = "2D4CB8"
//hamburger initializers
var current_hamburger_type = "Link"
var current_hamburger_editable_id
var current_editable_index
//Quick Menu Initializers
var current_quick_type = "Link"
var current_quick_editable_id
var current_quick_editable_index
var current_quick_img_src
var current_quick_img_src_edit
var intents_deleted_count;
var character_limit_small_text = 100;
var character_limit_large_text = 500;
var resend_otp_time_limit = 30000; // timelimit for resend otp in miliseconds
var resend_verification_otp_time_limit = 60000; // timelimit for resend otp in miliseconds
var system_commands = window.SYSTEM_COMMANDS ? window.SYSTEM_COMMANDS : ['subprocess.call', 'subprocess.check_output', 'import threading', 'threading.Thread', 'ssh'];
var highlighted_lines = {};
var processor_errors = {};
var tms_cat_limit = 25;
var already_key_pressed = 0;
var unique_word_mappers_list = [];
var check_word_mappers_list = false;
var remove_element_from_list = true;
var selected_widget = ""
var selected_language = "en";
var is_flow_termination_bot_response_required = false;
var channel_selected = "";
var prev_theme_selected = "";
var current_data_model_encrypted_values = [];
var build_bot_timer = null;
var verify_otp_token = ""
var login_username = ""
var LIST_OF_PHONETIC_TYPING_SUPPORTED_LANGUAGES = [
    "urdu-ur",
    "amharic-am",
    "arabic-ar",
    "bengali-bn",
    "chinese-zh",
    "greek-el",
    "gujarati-gu",
    "hindi-hi",
    "kannada-kn",
    "malayalam-ml",
    "marathi-mr",
    "nepali-ne",
    "oriya-or",
    "persian-fa",
    "punjabi-pa",
    "russian-ru",
    "sanskrit-sa",
    "sinhalese-si",
    "serbian-sr",
    "tamil-ta",
    "telugu-te",
    "tigrinya-ti",
]
var api_integrated_fields = []
const state = {
    form: {},
    option_map: {},
}
function un_entity(str) {
    return $("<textarea></textarea>").html(str).text();
}

function set_selected_language_based_on_url_param() {
    var url_parameters = get_url_vars()
    if (url_parameters["selected_language"] != undefined || url_parameters["selected_language"] != null) {

        selected_language = url_parameters["selected_language"]
    }
}


function get_url_vars() {
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
        vars[key] = value;
    });
    return vars;
}

if (window.location.href.indexOf("/chat/intent/") != -1) {
    renderBasicIntentInformation();
}

if (window.location.href.indexOf("/chat/easychat-api-analytics/") != -1) {

    $(document).ready(function () {
        $('#api-analytics-table').DataTable({
            "bPaginate": false,
            "ordering": false
        });
        setTimeout(function(){
            $('.modal').removeAttr('tabindex')
          }, 500)
       
    });
    $('#select-api-name').select2({
        dropdownParent: $('#apply-filter-api-analytics'),
    });
    try {
        value = document.getElementById("modal-api-analytics").value;
        if (value == "custom_timestamp") {
            timestamp_date = document.getElementById("modal-api-analytics-custom-timestamp-date").value;
            document.getElementById("modal-api-analytics-custom-timestamp-date").style.display = "block";
            document.getElementById("modal-api-analytics-custom-timestamp-time").style.display = "block";
        }
    } catch { }
}

$(document).ready(function () {
    initialize_bot_response_in_edit_intent()
    initialize_bot_response_in_edit_tree()
});



if (window.location.href.indexOf("/chat/easychat-api-statistics/") != -1) {

    $(document).ready(function () {
        $('#api-statistics-table').DataTable({
            "bPaginate": false,
            "ordering": false
        });
        setTimeout(function(){
            $('.modal').removeAttr('tabindex')
          }, 500)
    });
    $('#select-api-name-statistics').select2({
        dropdownParent: $('#apply-filter-api-statistics'),
    });
}

if (window.location.href.indexOf("/chat/login/") != -1) {
    set_cookie("is_online", "0", "/");
} else {
    set_cookie("is_online", "1", "/");
}

function show_modification_logs_modal(pk) {

    $("#audit-details-" + pk).show();
}

function hide_modification_logs_modal(pk) {

    $("#audit-details-" + pk).hide();
}

function show_api_request_modal(bot_pk) {

    $("#API-Request-" + bot_pk).show();
}

function show_api_response_modal(bot_pk) {

    $("#API-Response-" + bot_pk).show();
}

function hide_api_request_modal(bot_pk) {

    $("#API-Request-" + bot_pk).hide();
}

function hide_api_response_modal(bot_pk) {

    $("#API-Response-" + bot_pk).hide();
}

document.body.addEventListener('keypress', function (e) {
    if ((e.target.id == "username") || (e.target.id == "password") || (e.target.id == "captcha")) {
        if (e.keyCode == 13) {
            document.getElementById("#login_btn") !== null ? $("#login_btn").click(): $("#verify_btn").click();; 
        }
    }
    if ((e.target.id == "reset-password-username")) {
        if (e.keyCode == 13) {
            $("#reset-password-check-user").click();
        }
    }
    if (event.target.classList.contains('forgot-pass-otp-input')) {
        if (e.keyCode == 13) {
            $(".verify-code-btn")[0].click();
        }
    }
    if ((e.target.id == "new-password") || (e.target.id == "retype-password")) {
        if (e.keyCode == 13) {
            $("#save-password").click();
        }
    }
});

// if (window.location.pathname == "/chat/create-intent/") {
//     loadIntentEditForm();
//     loadTemplateSentences();
//     $("input[id=intent_name]").focus();
//     $('.collapsible').collapsible();
// }

function is_it_redirection_url(url) {
    var file_ext_list = ['txt', 'pdf', 'ai', 'bmp', 'gif', 'ico', 'jpeg', 'jpg', 'png', 'PNG', 'ps', 'psd', 'svg', 'tif', 'tiff', 'php', 'py']
    file_ext = url.split('.').pop()
    if (file_ext in file_ext_list) {
        return false
    } else {
        return true
    }
}

var intent_card_list = [];

function store_this_data_locally(image_url) {

    if (image_url == "") {

        return image_url;
    }
    var parser = document.createElement('a');
    parser.href = image_url;
    if (parser.host == window.location.host) {

        return image_url;
    }

    if (is_it_redirection_url(image_url)) {

        return image_url
    }

    var json_string = JSON.stringify({
        image_url: image_url,
    })
    json_string = EncryptVariable(json_string);
    json_string = encodeURIComponent(json_string);

    var xhttp = new XMLHttpRequest();
    var params = 'json_string=' + json_string
    xhttp.open("POST", "/chat/save-image-locally/", false);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                image_url = window.location.origin + response["src"];
                console.log(image_url)
            } else {

                console.log(response["message"])
            }
        }
    }
    xhttp.send(params);
    return image_url;
}

function initialize_bot_response_in_edit_intent() {
    if ($('.response-text-area').length) {
        $(".response-text-area").trumbowyg({
            tagsToKeep: [],
            allowTagsFromPaste: {
                allowedTags: ['h4', 'p', 'br']
            },
            minimalLinks: true,
            btns: [
                // ['viewHTML'],
                ['strong', 'em'],
                ['link'],
                ['unorderedList', 'orderedList'],
                ['underline'],
                ['emoji'],
            ],
        }).on('tbwinit', function () {
            myResponseInitInstance()
        });
    }

    if ($('.response-text-area-speech').length) {
        $(".response-text-area-speech").trumbowyg({
            btns: false
        }).on('tbwinit', function () {
            mySpeechResponseInitInstance()
        });
    }

}

function initialize_bot_response_in_edit_tree() {
    if ($('.response-tree-text-area').length) {
        $(".response-tree-text-area").trumbowyg({
            tagsToKeep: [],
            allowTagsFromPaste: {
                allowedTags: ['h4', 'p', 'br']
            },
            minimalLinks: true,
            btns: [
                // ['viewHTML'],
                ['strong', 'em'],
                ['link'],
                ['unorderedList', 'orderedList'],
                ['underline'],
                ['emoji'],
            ],
        }).on('tbwinit', function () {
            myResponseInitInstance()
        });
    }

    if ($('.response-tree-text-area').length) {
        $(".response-tree-text-area-speech").trumbowyg({
            btns: false
        }).on('tbwinit', function () {
            mySpeechResponseInitInstance()
        });
    }

}


if (window.location.pathname.indexOf("/chat/edit-intent/") != -1) {

    $(document).ready(function () {
        create_language_custom_dropdowns_for_intent()
    });
    open_close_language_dropdown_event()
    select_option_for_form_widgets()
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    add_language_selction_event_for_edit_intent()
    $(document).on("click", "#ignore-bot-response-changes-in-non-primary-language", function (e) {
        ignore_bot_response_changes_in_non_primary_languages();
    });
    $(document).on("click", "#auto-fix-bot-response-changes-in-non-primary-language", function (e) {
        auto_fix_bot_response_changes_in_non_primary_languages();
    });

}

if (window.location.pathname.indexOf("/chat/edit-tree/") != -1) {

    open_close_language_dropdown_event()
    select_option_for_form_widgets()
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    add_language_selction_event_for_edit_intent()
    $(document).on("click", "#ignore-bot-response-changes-in-non-primary-language", function (e) {
        ignore_bot_response_changes_in_non_primary_languages();
    });
    $(document).on("click", "#auto-fix-bot-response-changes-in-non-primary-language", function (e) {
        auto_fix_bot_response_changes_in_non_primary_languages();
    });

}

if (window.location.pathname.indexOf("/chat/intent/") != -1) {
    easychat_bot_id = get_url_vars()["bot_pk"]
    // set_cookie("easychat_bot_id", easychat_bot_id)
    document.cookie = "easychat_bot_id" + "=" + easychat_bot_id + ";path=/chat/edit-intent/";
}

function isValidURL(url_str) {
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})+(?::(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?)|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff])|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62}\.)))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(url_str);
}

function is_valid_url(url_str) {
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})+(?::(?:[^\]\[?\/<~#`!@$^&*()+=}|:";',>{ ]|%[0-9A-Fa-f]{2})*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff]\.)+(?:[a-z\u00a1-\uffff]{2,}\.?)|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62})?[a-z0-9\u00a1-\uffff])|(?:(?:[a-z0-9\u00a1-\uffff][a-z0-9\u00a1-\uffff_-]{0,62}\.)))(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(url_str);
}

function get_easychat_access_token() {
    return document.querySelector("input[name=\"easychataccesstoken\"]").value;
}

function set_cookie(cookiename, cookievalue, path = "") {
    if (path == "") {
        document.cookie = cookiename + "=" + cookievalue;
    } else {
        document.cookie = cookiename + "=" + cookievalue + ";path=" + path;
    }
}

function get_cookie(cookiename) {
    var cookie_name = cookiename + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var cookie_array = decodedCookie.split(';');
    for (var i = 0; i < cookie_array.length; i++) {
        var c = cookie_array[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(cookie_name) == 0) {
            return c.substring(cookie_name.length, c.length);
        }
    }
    return "";
}

function get_csrf_token() {
    return $('input[name="csrfmiddlewaretoken"]').val();
}


/////////////////////////////// Encryption And Decription //////////////////////////

function CustomEncrypt(msgString, key) {
    // msgString is expected to be Utf8 encoded
    var iv = EasyChatCryptoJS.lib.WordArray.random(16);
    var encrypted = EasyChatCryptoJS.AES.encrypt(msgString, EasyChatCryptoJS.enc.Utf8.parse(key), {
        iv: iv
    });
    var return_value = key;
    return_value += "." + encrypted.toString();
    return_value += "." + EasyChatCryptoJS.enc.Base64.stringify(iv);
    return return_value;
}

function generateRandomString(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}


function EncryptVariable(data) {

    utf_data = EasyChatCryptoJS.enc.Utf8.parse(data);
    encoded_data = utf_data;
    // encoded_data = EasyChatCryptoJS.enc.Base64.stringify(utf_data);
    random_key = generateRandomString(16);
    // console.log(random_key)
    encrypted_data = CustomEncrypt(encoded_data, random_key);

    return encrypted_data;
}


function custom_decrypt(msg_string) {

    var payload = msg_string.split(".");
    var key = payload[0];
    var decrypted_data = payload[1];
    var decrypted = EasyChatCryptoJS.AES.decrypt(decrypted_data, EasyChatCryptoJS.enc.Utf8.parse(key), {
        iv: EasyChatCryptoJS.enc.Base64.parse(payload[2])
    });
    return decrypted.toString(EasyChatCryptoJS.enc.Utf8);
}

////////////////////////////////////////////////////////////////////////////////////

// Custom user session

/*
    get_delayed_date_object
    delay current date by delay_period
    var date_obj = new Date();                                      -> current date
    date_obj.setMinutes( date_obj.getMinutes() + delay_period );    -> delay by delay_period
*/

function get_delayed_date_object(delay_period) {
    var date_obj = new Date();
    date_obj.setMinutes(date_obj.getMinutes() + delay_period);
    return date_obj
}

/*
    send_session_timeout_request
    is_online_from_this_time                -> delayed by 3 minuits date object
    user_last_activity_time_obj -> user's last activity time
    if(user_last_activity_time_obj > is_online_from_this_time) -> is user active from last 3 minutes
*/

function send_session_timeout_request() {

    if (get_cookie("is_online") == "0") {
        return;
    }

    var is_online_from_this_time = get_delayed_date_object(-3);

    if (user_last_activity_time_obj > is_online_from_this_time) {
        var csrf_token = $('input[name="csrfmiddlewaretoken"]').val();
        $.ajax({
            url: "/chat/set-session-time-limit/",
            type: "POST",
            headers: {
                'X-CSRFToken': csrf_token
            },
            data: {},
            success: function (response) {
                set_cookie("is_online", "1", "/");
            },
            error: function (xhr, textstatus, errorthrown) {
                set_cookie("is_online", "0", "/");
            }
        });
    }
}

function resetTimer(e) {
    var delay_by_nine_minutes = get_delayed_date_object(-18);
    if (user_last_activity_time_obj < delay_by_nine_minutes) { // if user is active in last minute ( after inactive for 9 minuits )
        user_last_activity_time_obj = new Date()
        send_session_timeout_request();
    }
    user_last_activity_time_obj = new Date()
}

window.onload = function () {

    try {
        load_easychat_bot();
    } catch { }
    resetTimer();
    window.onmousemove = resetTimer;
    window.onmousedown = resetTimer;
    window.onclick = resetTimer;
    window.onkeypress = resetTimer;
    window.addEventListener('scroll', resetTimer, true);

    document.addEventListener("visibilitychange", function () {
        if (document.hidden == false) {
            resetTimer();
        }
    }, false);

    setInterval(send_session_timeout_request, 3 * 60 * 1000);
    send_session_timeout_request();
}


function loadIntentEditForm() {

    $(document).ready(function () {
        $('.modal').modal();
    });

    $(document).ready(function () {
        //$('select').formSelect();
        $('select:not(.non-select2)').select2({
            width: "100%"
        });

        $(".create-form-select-field").select2({
            width: "95%",
            placeholder: "Select from drop down",
            allowClear: true,
            dropdownParent: $("#modal-create-form"),
        })

        $(".file-type-select-field").select2({
            width: "95%",
            placeholder: "Select file type",
            allowClear: true,
            dropdownParent: $("#modal-create-form"),
        })
    });

    $(document).on("click", "#edit-intent-card", function (e) {

        intent_card_list.push({
            title: intent_card_title,
            content: intent_card_content,
            link: intent_card_link,
            img_url: intent_card_img_url
        });

        addIntentResponseCardIntoCollection(intent_card_title, intent_card_content, intent_card_link, intent_card_img_url)
    });


    $(document).on("click", "#add-intent-card", function (e) {

        intent_card_title = $("#intent_card_title").val().trim();
        intent_card_content = $("#intent_card_content").val().trim();
        intent_card_link = $("#intent_card_link").val().trim();
        intent_card_img_url = $("#intent_card_img_url").val().trim();

        var format = /[`#%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;

        if (format.test(intent_card_title.trim())) {

            M.toast({
                "html": "Please provide valid intent card title"
            });
            return;
        }

        intent_card_title = stripHTML(intent_card_title.trim())
        intent_card_title = strip_unwanted_characters(intent_card_title)

        intent_card_content = stripHTML(intent_card_content.trim())
        intent_card_content = strip_unwanted_security_characters(intent_card_content)

        if (intent_card_title == "") {
            M.toast({
                "html": "Please provide valid intent card title."
            });
            return;
        }

        if (intent_card_content.trim() == "") {
            M.toast({
                "html": "Please provide valid intent card content."
            });
            return;
        }

        if (intent_card_link.trim() == "" || intent_card_img_url.trim() == "") {
            M.toast({
                "html": "Card Image or Card Link is empty."
            });
            return;
        }

        if (isValidURL(intent_card_link) == false) {
            M.toast({
                "html": "Please provide valid redirect card url"
            });
            return;
        }

        if (isValidURL(intent_card_img_url) == false) {
            M.toast({
                "html": "Please provide valid image card url"
            });
            return;
        }

        if (global_last_edit_card_id != null) {
            if (!adding_new_card) {
                e.preventDefault();
                element = "#" + global_last_edit_card_id;
                $(element).remove();
            }
            global_last_edit_card_id = null;
        }

        intent_card_list.push({
            title: intent_card_title,
            content: intent_card_content,
            link: intent_card_link,
            img_url: intent_card_img_url
        });

        addIntentResponseCardIntoCollection(intent_card_title, intent_card_content, intent_card_link, intent_card_img_url)
    });

    var upload_file_limit_size = 5120000
    $(document).on("click", "#upload-intent-image", function (e) {
        e.preventDefault();
        var input_upload_image = ($("#input_upload_image_intent"))[0].files[0]

        if (input_upload_image == null || input_upload_image == undefined) {
            M.toast({
                "html": "Please choose a file."
            }, 2000);

            setTimeout(function () {
                $('#modal-upload-image').modal('open');
            }, 200);
            return;
        }
        if (input_upload_image.name.match(/\.(jpeg|jpg|gif|png)$/) == null) {
            M.toast({
                "html": "File format is not supported"
            }, 2000);
            setTimeout(function () {
                $('#modal-upload-image').modal('open');
            }, 200);
            return false;
        }

        if (input_upload_image.size > upload_file_limit_size) {
            M.toast({
                "html": "Size limit exceed(should be less than 5 MB)."
            }, 2000);

            setTimeout(function () {
                $('#modal-upload-image').modal('open');
            }, 200);
            return;
        }

        if (check_malicious_file(input_upload_image.name) == true) {
            setTimeout(function () {
                $('#modal-upload-image').modal('open');
            }, 200);
            return false;
        }

        var reader = new FileReader();
        reader.readAsDataURL(input_upload_image);
        reader.onload = function () {

            base64_str = reader.result.split(",")[1];

            uploaded_file = [];
            uploaded_file.push({
                "filename": input_upload_image.name,
                "base64_file": base64_str,
            });

            upload_intent_image();
        };

        reader.onerror = function (error) {
            console.log('Error: ', error);
        };
    });

    async function upload_intent_image() {
        var response = await upload_image();

        if (response && response.status == 200) {
            src = window.location.origin + response["src"]
            addIntentResponseImageIntoCollection(src);
            document.getElementById('input_upload_image_intent2').value = "";
        }
    }

    $(document).on("click", "#upload-intent-file-card", function (e) {
        e.preventDefault();
        var input_upload_file = ($("#input_upload_file_intent_card"))[0].files[0]

        if (input_upload_file == null || input_upload_file == undefined) {
            M.toast({
                "html": "Please choose a file."
            }, 2000);

            setTimeout(function () {
                $("#modal-intent-card").modal("open")
            }, 200);
            return false;
        }

        if (check_malicious_file(input_upload_file.name) == true) {
            setTimeout(function () {
                $("#modal-intent-card").modal("open")
            }, 200);
            return false;
        }

        var reader = new FileReader();
        reader.readAsDataURL(input_upload_file);
        reader.onload = function () {

            base64_str = reader.result.split(",")[1];

            uploaded_file = [];
            uploaded_file.push({
                "filename": input_upload_file.name,
                "base64_file": base64_str,
            });

            upload_intent_file_card();
        };

        reader.onerror = function (error) {
            console.log('Error: ', error);
        };

    });

    async function upload_intent_file_card() {
        let response = await upload_file_card();

        if (response && response.status == 200) {
            src = window.location.origin + response["src"];
            $("#intent_card_link").val(src);
            document.getElementById('input_upload_file_intent_card2').value = "";
            M.toast({
                "html": "File Uploaded Successfully."
            }, 2000);
        }

        $("#modal-intent-card").modal("open");
    }

    $(document).on("click", "#upload-intent-image-card", function (e) {
        e.preventDefault();
        var input_upload_image = ($("#input_upload_image_intent_card"))[0].files[0]

        if (input_upload_image == null || input_upload_image == undefined) {
            M.toast({
                "html": "Please choose a file."
            }, 2000);

            setTimeout(function () {
                $("#modal-intent-card").modal("open");
            }, 200);
            return false;
        }
        if (input_upload_image.name.match(/\.(jpeg|jpg|gif|png)$/) == null) {
            M.toast({
                "html": "File format is not supported"
            }, 2000);
            setTimeout(function () {
                $('#modal-upload-card').modal('open');
            }, 200);
            return false;
        }

        if (check_malicious_file(input_upload_image.name) == true) {
            setTimeout(function () {
                $("#modal-intent-card").modal("open");
            }, 200);
            return false;
        }

        var reader = new FileReader();
        reader.readAsDataURL(input_upload_image);
        reader.onload = function () {

            base64_str = reader.result.split(",")[1];

            uploaded_file = [];
            uploaded_file.push({
                "filename": input_upload_image.name,
                "base64_file": base64_str,
            });

            upload_intent_image_card();
        };

        reader.onerror = function (error) {
            console.log('Error: ', error);
        };

    });

    async function upload_intent_image_card() {
        var response = await upload_image();

        if (response && response.status == 200) {
            src = window.location.origin + response["src"];
            $("#intent_card_img_url").val(src);
            document.getElementById('input_upload_image_intent_card2').value = "";
            M.toast({
                "html": "Image Uploaded Successfully."
            }, 2000);
        }

        $("#modal-intent-card").modal("open");
    }

    // detect enter keypress
    // $("#add_enter_intent_training_data").keypress(function (e) {
    //     var keycode = (e.keyCode ? e.keyCode : e.which);
    //     if (keycode == '13') {
    //         value = $("#add_enter_intent_training_data").val();
    //         addIntentTrainingDataIntoCollection(value);
    //         $("#add_enter_intent_training_data").val("");
    //     }
    // });

    // detect enter keypress
    // $("#add_enter_intent_image_url_data").keypress(function (e) {
    //     var keycode = (e.keyCode ? e.keyCode : e.which);
    //     if (keycode == '13') {
    //         value = $("#add_enter_intent_image_url_data").val();
    //         if (!isExternal(value)) {
    //             showToast("Only external urls allowed.", 2000);
    //             return;
    //         }
    //         addIntentResponseImageIntoCollection(value);
    //         $("#add_enter_intent_image_url_data").val("");
    //     }
    // });

    $("#add_enter_intent_video_url_data").keypress(function (e) {
        var keycode = (e.keyCode ? e.keyCode : e.which);
        if (keycode == '13') {
            value = $("#add_enter_intent_video_url_data").val();
            if (!isExternal(value)) {
                showToast("Only external urls allowed.", 2000);
                return;
            }
            addIntentResponseVideoIntoCollection(value);
            $("#add_enter_intent_video_url_data").val("");
        }
    });
}

function isExternal(url) {
    var domain = (new URL(url));
    domain = domain.hostname;

    if (domain === 'localhost' || domain === '[::1]' || domain.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)) {
        return false;
    }
    else {
        return true;
    }
}

function addIntentTrainingDataIntoCollection(sentence) {
    if (sentence.trim() == "") {
        return;
    }
    if (!sanitize_special_characters_from_text(sentence, 'Training questions cannot contain special characters')) {
        return
    }
    var id = "trainingdata_" + training_data_count.toString();
    var str_id = "trainingdatastr_" + training_data_count.toString();

    var html = `<li class="collection-item" id="` + id + `">
      <div class="row">
        <input id="` + str_id + `" onblur="sanitize_special_characters(this, 'Training questions cannot contain special characters')" type="text" data-length="100" value="` + sentence + `" style="width: 80%">
        <label for="` + str_id + `"></label>
        <div class="secondary-content">
        <a href="" class="delete-button-training-data" id="` + id + `">
          <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>
        </div>
      </div>
    </li>`;



    var training_sentences = $('#intent-training-collection li input[type=text]')

    training_sentences_list = []

    training_sentences.each(function () {
        training_sentences_list.push($(this).attr('value'));
    });
    if (training_sentences_list.includes(sentence.trim()) == false) {

        $(html).appendTo($("#intent-training-collection"));
        training_data_count += 1;
    } else {

        M.toast({
            "html": "This training sentence already exists"
        }, 2000);
    }
}

var intent_response_sentence_count = 0;

function addIntentResponseTextSentencesIntoCollection(text, speech) {
    var id = "intent_response_" + intent_response_sentence_count.toString();
    var str_id = "intent_response_" + intent_response_sentence_count.toString();

    var html = `
    <li class="collection-item" id="` + id + `">
      <div class="row">
        <input placeholder="text-response" id="text_` + str_id + `" type="text" data-length="100" value="` + text + `" style="width: 80%" required>
        <input placeholder="speech-response" id="speech_` + str_id + `" type="text" data-length="100" value="` + speech + `" style="width: 80%" required>
        <label for="` + str_id + `"></label>
        <div class="secondary-content">
        <a href="" class="delete-button-intent-response-data" id="` + id + `">
          <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>
        </div>
      </div>
    </li>`;

    $(html).appendTo($("#intent-response-collection"));
    intent_response_sentence_count += 1;
}

var intent_card_count = 0;

function addIntentResponseCardIntoCollection(title, content, link, img_url) {

    if (link != null && link != undefined && link.startsWith("/files/")) {
        link = window.location.protocol + "//" + window.location.host + link;
    }

    if (img_url != null && img_url != undefined && img_url.startsWith("/files/")) {
        img_url = window.location.protocol + "//" + window.location.host + img_url;
    }

    var id = "intent_card_" + intent_card_count.toString();
    var str_id = "intent_card_" + intent_card_count.toString();
    let selected_language = get_selected_language_from_url();
    var html = `
    <li class="collection-item" id="` + id + `">
      <div class="row">
      <div class="col s5">
        <div class="card">
        <div class="card-image waves-effect waves-block waves-light">`

    if (img_url) {
        html += `<img class="activator responsive-img" src="` + img_url + `" id="img_url_` + str_id + `">`
    }
    html += `
          <span class="card-title" id="title_` + str_id + `" style="display:none;">` + title + `</span>
        </div>
        <div class="card-content">
          <span class="card-title activator grey-text text-darken-4" style="word-break: break-word;">` + title + `<i class="material-icons right">more_vert</i></span>
          <p><a href="` + link + `" id="link_` + str_id + `" target="_blank">Please click here</a></p>
        </div>
        <div class="card-reveal">
          <span class="card-title grey-text text-darken-4">` + title + `<i class="material-icons right">close</i></span>
          <p id="content_` + str_id + `">` + content + `</p>
        </div>
        </div>
      </div>
      <div class="secondary-content row">
        <a href="" class="edit-button-intent-card-detail col" id="` + id + `">
            <i class="inline-icon material-icons green-text text-darken-2">edit</i>
        </a>`
    if (selected_language == "en") {

        html += `<a href="" class="delete-button-intent-card-detail col" id="` + id + `">
            <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>`
    }
    html += `</div>
      </div>
    </li>`;

    $(html).appendTo($("#intent-card-collection"));
    intent_card_count += 1;
}

function addIntentResponseImageIntoCollection(url) {

    if (url.startsWith("/files/")) {
        url = window.location.protocol + "//" + window.location.host + url;
    }

    if (isValidURL(url) == false) {
        M.toast({
            "html": "Please provide valid image url"
        }, 2000);
        return;
    }

    var id = "intent_image_url_" + intent_image_url_count.toString();
    var str_id = "intent_image_url_" + intent_image_url_count.toString();

    var html = `
    <li class="collection-item" id="` + id + `">
      <div class="row">
        <div style="display:none;">
        <input placeholder="Image url" id="imageurl_` + str_id + `" type="text" data-length="100" value="` + url + `" style="width: 80%" required>
        <label for="` + str_id + `"></label>
        </div>
        <img class="responsive-img" src="` + url + `">
        <div class="secondary-content">
        <a href="" class="delete-button-intent-image-url" id="` + id + `">
          <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>
        </div>
      </div>
    </li>`;

    $(html).appendTo($("#intent-image-url-collection"));
    intent_image_url_count += 1;
    // M.toast({"html":"Image Uploaded Successfully."}, 2000);
}

var intent_video_url_count = 0;

function getEmbedVideoURL(url) {
    var regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
    var match = url.match(regExp);

    if (match && match[2].length == 11) {
        return "https://www.youtube.com/embed/" + match[2];
    } else {
        return url;
    }
}

function addIntentResponseVideoIntoCollection(url) {

    if (isValidURL(url) == false) {
        M.toast({
            "html": "Please provide valid video url"
        }, 2000);
        return;
    }

    var embed_url = getEmbedVideoURL(url);

    var id = "intent_video_url_" + intent_video_url_count.toString();
    var str_id = "intent_video_url_" + intent_video_url_count.toString();

    var html = `
    <li class="collection-item" id="` + id + `">
      <div class="row">
        <div style="display:none;">
        <input placeholder="Video url" id="videourl_` + str_id + `" type="text" data-length="100" value="` + embed_url + `" style="width: 80%" required>
        <label for="` + str_id + `"></label>
        </div>`;

    if (embed_url.indexOf("embed") == -1) {
        html += `
        <video width="320" height="240" controls>
          <source src="` + embed_url + `" type="video/mp4">
        </video>`;
    } else {
        html += `
        <div class="video-container">
          <iframe src="` + embed_url + `" frameborder="0" allowfullscreen></iframe>
        </div>`;
    }

    html += `<br>

        <div class="secondary-content">
        <a href="" class="delete-button-intent-video-url" id="` + id + `">
          <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>
        </div>
      </div>
    </li>`;

    $(html).appendTo($("#intent-video-url-collection"));
    intent_video_url_count += 1;
}

// Remove element with element id with click
$(document).on("click", ".delete-button-training-data", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});

// $(document).on("click", ".widget-delete-icon", function(e) {
//     e.preventDefault();
//     element = "#" + this.id;
//     $(element).remove();
// });

$(document).on("click", ".delete-button-checkbox-widget-data", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});

$(document).on("click", ".delete-button-dropdown-widget-data", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});

$(document).on("click", ".delete-button-intent-image-url", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});

$(document).on("click", ".delete-button-intent-video-url", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});

$(document).on("click", ".delete-button-intent-card-detail", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});

var global_last_edit_card_id = null;

$(document).on("click", ".edit-button-intent-card-detail", function (e) {
    e.preventDefault();
    adding_new_card = false;
    element = "#" + this.id;
    global_last_edit_card_id = this.id;
    token_id = this.id;
    card_img_url = $("#img_url_" + token_id).attr("src");
    card_title = document.getElementById("title_" + token_id).innerText;
    card_content = $("#content_" + token_id).html();
    card_url = $("#link_" + token_id).attr("href");
    $("#modal-intent-card").modal("open");
    $("#intent_card_title").val(card_title)
    $("#intent_card_content").val(card_content)
    $("#intent_card_link").val(card_url)
    $("#intent_card_img_url").val(card_img_url)
});

$(document).on("click", ".edit-button-tree-intent-card-detail", function (e) {
    e.preventDefault();
    adding_new_tree_card = false;
    element = "#" + this.id;
    global_last_edit_card_id = this.id;
    token_id = this.id;
    card_img_url = $("#img_url_" + token_id).attr("src");
    card_title = document.getElementById("title_" + token_id).innerText;
    card_content = $("#content_" + token_id).html();
    card_url = $("#link_" + token_id).attr("href");
    $("#modal-tree-card").modal("open");
    $("#tree_card_title").val(card_title)
    $("#tree_card_content").val(card_content)
    $("#tree_card_link").val(card_url)
    $("#tree_card_img_url").val(card_img_url)
});

var adding_new_card = false;
$(document).on("click", ".add-button-intent-card-detail", function (e) {
    adding_new_card = true;
    $("#intent_card_title").val("")
    $("#intent_card_content").val("")
    $("#intent_card_link").val("")
    $("#intent_card_img_url").val("")
    $("#input_upload_file_intent_card2").val("")
    $("#input_upload_image_intent_card2").val("")
    $("#input_upload_file_intent_card").val("")
    $("#input_upload_image_intent_card").val("")
})

let adding_new_tree_card = false;
$(document).on("click", ".add-button-tree-card-detail", function (e) {
    adding_new_tree_card = true;
    $("#tree_card_title").val("")
    $("#tree_card_content").val("")
    $("#tree_card_link").val("")
    $("#tree_card_img_url").val("")
    $("#input_upload_file_tree_card2").val("")
    $("#input_upload_image_tree_card2").val("")
    $("#input_upload_file_tree_card").val("")
    $("#input_upload_image_tree_card").val("")
})

// $(document).on("change", "#checkbox-intent-attachment", function (e) {

//     var checked_val = document.getElementById("checkbox-intent-attachment").checked
//     if (checked_val) {
//         document.getElementById("easychat-attachment-dropdown").style.display = "table-row";
//         document.getElementById("easychat-save-attachment-server").style.display = "table-row";

//     } else {
//         document.getElementById("easychat-attachment-dropdown").style.display = "none";
//         document.getElementById("easychat-save-attachment-server").style.display = "none";
//     }
// });

// $(document).on("change", "#checkbox-intent-video-recorder", function (e) {

//     var checked_val = document.getElementById("checkbox-intent-video-recorder").checked
//     if (checked_val) {
//         document.getElementById("easychat-save-video-attachment-server").style.display = "table-row";

//     } else {
//         document.getElementById("easychat-save-video-attachment-server").style.display = "none";

//     }
// });

$(document).on("change", "#checkbox-intent-time-picker", function (e) {

    var checked_val = document.getElementById("checkbox-intent-time-picker").checked
    if (checked_val) {
        document.getElementById("intent-single-time-picker").style.display = "block";
        document.getElementById("intent-multi-time-picker").style.display = "block";

    } else {
        document.getElementById("intent-single-time-picker").style.display = "none";
        document.getElementById("intent-multi-time-picker").style.display = "none";

    }
});
try {
    document.querySelector(".single-date").disabled = true;
    document.querySelector(".custom-date").disabled = true;
    document.querySelector(".single-time").disabled = true;
    document.querySelector(".custom-time").disabled = true;
} catch (err) { }

$(document).on("change", "#checkbox-intent-single-time-picker", function (e) {

    var checked_val = document.getElementById("checkbox-intent-single-time-picker").checked
    if (checked_val) {
        document.getElementById("checkbox-intent-multi-time-picker").checked = false;
        document.getElementById("checkbox-intent-multi-time-picker").disabled = true;
    } else {
        document.getElementById("checkbox-intent-multi-time-picker").disabled = false;
    }
});

$(document).on("change", "#checkbox-intent-multi-time-picker", function (e) {

    var checked_val = document.getElementById("checkbox-intent-multi-time-picker").checked
    if (checked_val) {
        document.getElementById("checkbox-intent-single-time-picker").checked = false;
        document.getElementById("checkbox-intent-single-time-picker").disabled = true;
    } else {
        document.getElementById("checkbox-intent-single-time-picker").disabled = false;

    }
});

$(document).on("change", "#checkbox-intent-date-picker", function (e) {

    var checked_val = document.getElementById("checkbox-intent-date-picker").checked
    if (checked_val) {
        document.getElementById("intent-single-date-picker").style.display = "block";
        document.getElementById("intent-multi-date-picker").style.display = "block";
    } else {
        document.getElementById("intent-single-date-picker").style.display = "none";
        document.getElementById("intent-multi-date-picker").style.display = "none";
    }
});

$(document).on("change", "#checkbox-intent-single-date-picker", function (e) {

    var checked_val = document.getElementById("checkbox-intent-single-date-picker").checked
    if (checked_val) {
        document.getElementById("checkbox-intent-multi-date-picker").checked = false;
        document.getElementById("checkbox-intent-multi-date-picker").disabled = true;
    } else {
        document.getElementById("checkbox-intent-multi-date-picker").disabled = false;
    }
});

$(document).on("change", "#checkbox-intent-multi-date-picker", function (e) {

    var checked_val = document.getElementById("checkbox-intent-multi-date-picker").checked
    if (checked_val) {
        document.getElementById("checkbox-intent-single-date-picker").checked = false;
        document.getElementById("checkbox-intent-single-date-picker").disabled = true;
    } else {
        document.getElementById("checkbox-intent-single-date-picker").disabled = false;
    }
});


$(document).on("change", "#checkbox-intent-range-slider", function (e) {

    var checked_val = document.getElementById("checkbox-intent-range-slider").checked
    if (checked_val) {
        document.getElementById("intent-min-range-slider").style.display = "block";
        document.getElementById("intent-max-range-slider").style.display = "block";
    } else {
        document.getElementById("intent-min-range-slider").style.display = "none";
        document.getElementById("intent-max-range-slider").style.display = "none";
    }
});

$(document).on("change", "#checkbox-intent-radio-button", function (e) {

    var checked_val = document.getElementById("checkbox-intent-radio-button").checked
    if (checked_val) {
        document.getElementById("intent-radio-button-choices").style.display = "block";
    } else {
        document.getElementById("intent-radio-button-choices").style.display = "none";
    }
});

$(document).on("change", "#checkbox-intent-check-box", function (e) {

    var checked_val = document.getElementById("checkbox-intent-check-box").checked
    if (checked_val) {
        document.getElementById("intent-check-box-choices").style.display = "block";
    } else {
        document.getElementById("intent-check-box-choices").style.display = "none";
    }
});

$(document).on("change", "#checkbox-intent-drop-down", function (e) {

    var checked_val = document.getElementById("checkbox-intent-drop-down").checked
    if (checked_val) {
        document.getElementById("intent-drop-down-choices").style.display = "block";

    } else {
        document.getElementById("intent-drop-down-choices").style.display = "none";
    }
});

$(document).on("change", "#checkbox-intent-create-form", function (e) {

    var checked_val = document.getElementById("checkbox-intent-create-form").checked
    if (checked_val) {
        document.getElementById("intent-create-form-fields").style.display = "block";
    } else {
        document.getElementById("intent-create-form-fields").style.display = "none";
    }
});


function handleCheck() {

    if (document.getElementById("enabledatepicker_switch1").checked === true) {
        document.querySelector(".single-date").disabled = false;
        document.querySelector(".custom-date").disabled = false;
    }
    else {
        document.querySelector(".single-date").disabled = true;
        document.querySelector(".custom-date").disabled = true;
        document.getElementById('single-date-picker-radio').checked = false
        document.getElementById('custom-date-picker-radio').checked = false
    }

    if (document.getElementById("enabletimepicker_switch2").checked === true) {
        document.querySelector(".single-time").disabled = false;
        document.querySelector(".custom-time").disabled = false;
    }
    else {
        document.querySelector(".single-time").disabled = true;
        document.querySelector(".custom-time").disabled = true;
        document.getElementById('single-time-picker-radio').checked = false
        document.getElementById('custom-time-picker-radio').checked = false
    }
}

function check_for_short_name(){
    let selected_channels_list = $("#multiple-select-intent-channel-list").val();
    if(selected_channels_list.includes("GoogleBusinessMessages")){
        document.getElementById('short_name_field').style.display = 'block'
    }
    else{
        document.getElementById('short_name_field').style.display = 'none'
    }
}

$(document).on("click", ".save-add-other-intent", function (e) {
    save_intent(true, e);
});


$(document).on("click", "#save-intent, #save-intent-bottom", function (e) {
    save_intent(false, e);
});

$(document).on("click", ".delete-button-dropdown-tms-category", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});

var radio_choice_data_count = 0;

function get_radio_button_list() {
    radio_choices_list = []
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf('radio_button_data_str') == 0) {
            data_id = "#" + inputs[i].id;
            radio_choices = $(data_id).val();
            if (radio_choices != "") {
                radio_choices_list.push(radio_choices);
            }
        }
    }
    return radio_choices_list
}


function form_get_radio_button_list(field_id) {
    radio_choices_list = []
    var searchable_elem = 'sortable-radio-widget-edit-div-' + field_id
    var inputs = document.getElementById(searchable_elem).getElementsByTagName('input')
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf('form_radio_button_data_str') == 0) {
            data_id = "#" + inputs[i].id;
            radio_choices = $(data_id).val();
            if (radio_choices != "") {
                radio_choices_list.push(radio_choices);
            }
        }
    }

    return radio_choices_list
}


function radio_input_focusout(id, form = "", field_id = "") {
    var value = document.getElementById(form + "radio_button_data_str_" + id).value

    var format = /[`#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
    if (format.test(value.trim())) {
        M.toast({
            'html': "Invalid choice name(Only A-Z, a-z, 0-9, ?, !, @, & are allowed)"
        }, 2000);
        document.getElementById(form + "radio_button_data_str_" + id).value = ""
        var ele = document.getElementById(form + "radio_button_data_" + id);

        $(ele).remove();
        if (form == "")
            remove_header("radio_button_data_str_" + id)
        return;

    }
    format = /[a-zA-Z0-9]/;
    if (!format.test(value.trim())) {
        M.toast({
            'html': "Invalid choice name(Choice name must contain at least one alphanumeric character)"
        }, 2000);
        document.getElementById(form + "radio_button_data_str_" + id).value = ""
        var ele = document.getElementById(form + "radio_button_data_" + id);
        $(ele).remove();
        if (form == "")
            remove_header("radio_button_data_str_" + id)
        return;
    }
    var radio_list = get_radio_button_list()
    if (form != "")
        radio_list = form_get_radio_button_list(field_id)
    var radio_list_duplicate_values = duplicates_exists(radio_list)
    if (radio_list_duplicate_values == true) {
        M.toast({
            'html': "Duplicate choices found!"
        }, 2000);
        document.getElementById(form + "radio_button_data_str_" + id).value = ""
        var ele = document.getElementById(form + "radio_button_data_" + id);
        $(ele).remove();
        if (form == "")
            remove_header("radio_button_data_str_" + id)
        return;
    }

}

function delete_elem(elem) {
    elem.remove()
    remove_header(elem.id)
}


function remove_header(id) {
    if (!id.toString().trim().includes("form")) {

        if (id.toString().trim().includes('radio')) {
            if (get_radio_button_list().length == 0) {
                document.getElementById('radio-heading').style.display = "none"
            }
        } else if (id.toString().trim().includes('check')) {
            if (get_check_box_list().length == 0) {
                document.getElementById('checkbox-heading').style.display = "none"
            }
        } else if (id.toString().trim().includes('drop')) {
            if (get_drop_down_list().length == 0) {
                document.getElementById('dropdown-heading').style.display = "none"
            }
        }
    }
}

function add_radio_button_choices_collection(sentence, form = "", field_id = "") {
    if (sentence.trim() == "") {
        return;
    }
    var id = form + "radio_button_data_" + radio_choice_data_count.toString();
    var str_id = form + "radio_button_data_str_" + radio_choice_data_count.toString();

    var html = `<div class="response-widget-dragable-output-item" id="` + id + `">
                                                    <div class="dragable-item-icon tooltip-custom">
                                                        <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M16.9998 6.5C16.9998 7.6 16.0998 8.5 14.9998 8.5C13.8998 8.5 12.9998 7.6 12.9998 6.5C12.9998 5.4 13.8998 4.5 14.9998 4.5C16.0998 4.5 16.9998 5.4 16.9998 6.5ZM8.9998 4.5C7.8998 4.5 6.9998 5.4 6.9998 6.5C6.9998 7.6 7.8998 8.5 8.9998 8.5C10.0998 8.5 10.9998 7.6 10.9998 6.5C10.9998 5.4 10.0998 4.5 8.9998 4.5ZM6.99976 12.5C6.99976 11.4 7.89976 10.5 8.99976 10.5C10.0998 10.5 10.9998 11.4 10.9998 12.5C10.9998 13.6 10.0998 14.5 8.99976 14.5C7.89976 14.5 6.99976 13.6 6.99976 12.5ZM8.99976 20.5C10.0998 20.5 10.9998 19.6 10.9998 18.5C10.9998 17.4 10.0998 16.5 8.99976 16.5C7.89976 16.5 6.99976 17.4 6.99976 18.5C6.99976 19.6 7.89976 20.5 8.99976 20.5ZM14.9998 10.5C13.8998 10.5 12.9998 11.4 12.9998 12.5C12.9998 13.6 13.8998 14.5 14.9998 14.5C16.0998 14.5 16.9998 13.6 16.9998 12.5C16.9998 11.4 16.0998 10.5 14.9998 10.5ZM12.9998 18.5C12.9998 17.4 13.8998 16.5 14.9998 16.5C16.0998 16.5 16.9998 17.4 16.9998 18.5C16.9998 19.6 16.0998 20.5 14.9998 20.5C13.8998 20.5 12.9998 19.6 12.9998 18.5Z" fill="#DADADA"/>
                                                            </svg>
                                                        <div class="tooltiptext-custom tooltip-bottom-custom">Drag to move</div>


                                                    </div>
                                                    <div class="widget-indigator-icon" >
                                                        <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M5 12C5 8.136 8.136 5 12 5C15.864 5 19 8.136 19 12C19 15.864 15.864 19 12 19C8.136 19 5 15.864 5 12ZM6.39959 12C6.39959 15.094 8.90559 17.6 11.9996 17.6C15.0936 17.6 17.5996 15.094 17.5996 12C17.5996 8.90597 15.0936 6.39997 11.9996 6.39997C8.90559 6.39997 6.39959 8.90597 6.39959 12Z" fill="#C4C4C4"/>
                                                            </svg>

                                                    </div>
                                                  
                                                    <input class="edit_radio_button_choices" id="` + str_id + `" type="text" maxlength="` + character_limit_small_text + `"  onfocus="edit_radio_button_choices_focus(this)"  onfocusout="edit_radio_button_choices_focusout(this,'` + radio_choice_data_count + `','` + field_id + `')" value="` + sentence + `">
                                                    
                                                    <div class="widget-delete-icon" onclick="delete_elem(` + id + `)">
                                                        <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path d="M9.15011 3.35534C9.05669 3.26172 8.92987 3.2091 8.79761 3.2091C8.66535 3.2091 8.53852 3.26172 8.44511 3.35534L6.00011 5.79534L3.55511 3.35034C3.46169 3.25672 3.33487 3.2041 3.20261 3.2041C3.07035 3.2041 2.94352 3.25672 2.85011 3.35034C2.65511 3.54534 2.65511 3.86034 2.85011 4.05534L5.29511 6.50034L2.85011 8.94534C2.65511 9.14034 2.65511 9.45534 2.85011 9.65034C3.04511 9.84534 3.36011 9.84534 3.55511 9.65034L6.00011 7.20534L8.44511 9.65034C8.64011 9.84534 8.95511 9.84534 9.15011 9.65034C9.34511 9.45534 9.34511 9.14034 9.15011 8.94534L6.70511 6.50034L9.15011 4.05534C9.34011 3.86534 9.34011 3.54534 9.15011 3.35534Z" fill="#2D2D2D"/>
                                                            </svg>

                                                    </div>

                                                </div>`

    if (form == "") {
        $(html).appendTo($("#sortable-radio-widget-edit-div"));
        document.getElementById('radio-heading').style.display = "block"
        document.getElementById("new_bot_error_div_div-radio-button-widget").innerHTML = ""
    } else {

        $(html).appendTo($("#sortable-radio-widget-edit-div-" + field_id));
        $("#sortable-radio-widget-edit-div-" + field_id).sortable({
            containment: "parent"
        });
        document.getElementById("new_bot_error_div_widgets_" + field_id).innerHTML = ""
    }
    radio_choice_data_count += 1;

}

//radio button sortables
function edit_radio_button_choices_focus(elem) {
    $(elem).parent().addClass('edit-radio-widget-focus');
    $(elem).parent().children('.widget-delete-icon').css("display", "none");

}

function edit_radio_button_choices_focusout(elem, id, field_id = "") {
    $(elem).parent().removeClass('edit-radio-widget-focus');
    $(elem).parent().children('.widget-delete-icon').css("display", "block");
    if (elem.id.toString().includes("form"))
        radio_input_focusout(id, "form_", field_id)
    else
        radio_input_focusout(id)
};

if (window.location.pathname != '/chat/login/') {
    $(function () {
        try {
            $("#sortable-radio-widget-edit-div").sortable({
                containment: "parent",
            });
            $("#sortable-checkbox-widget-edit-div").sortable({
                containment: "parent",
            });
            $("#sortable-dropdown-widget-edit-div").sortable({
                containment: "parent",
            })
        } catch (err) {
            console.log(err)
        }
        // $("#sortable-widget-edit-div").disableSelection();

    });
}
// end radio btn sortables

var check_box_data_count = 0;


function get_check_box_list() {
    check_choices_list = []
    var inputs = document.getElementsByTagName("input");

    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf('check_box_data_str') == 0) {
            data_id = "#" + inputs[i].id;
            check_box_choices = $(data_id).val();
            if (check_box_choices != "") {
                check_choices_list.push(check_box_choices);
            }
        }
    }

    return check_choices_list
}

function form_get_check_box_list(field_id) {
    radio_choices_list = []
    var searchable_elem = 'sortable-checkbox-widget-edit-div-' + field_id
    var inputs = document.getElementById(searchable_elem).getElementsByTagName('input')
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf('form_check_box_data_str_') == 0) {
            data_id = "#" + inputs[i].id;
            radio_choices = $(data_id).val();
            if (radio_choices != "") {
                radio_choices_list.push(radio_choices);
            }
        }
    }

    return radio_choices_list
}

function checkbox_input_focusout(id, form = "", field_id = "") {
    var value = document.getElementById(form + "check_box_data_str_" + id).value

    var format = /[`#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
    if (format.test(value.trim())) {
        M.toast({
            'html': "Invalid choice name(Only A-Z, a-z, 0-9, ?, !, @, & are allowed)"
        }, 2000);
        document.getElementById(form + "check_box_data_str_" + id).value = ""
        var ele = document.getElementById(form + "check_box_data_" + id);

        $(ele).remove();
        if (form == "")
            remove_header("check_box_data_str_" + id)
        return;

    }
    format = /[a-zA-Z0-9]/;
    if (!format.test(value.trim())) {
        M.toast({
            'html': "Invalid choice name(Choice name must contain at least one alphanumeric character)"
        }, 2000);
        document.getElementById(form + "check_box_data_str_" + id).value = ""
        var ele = document.getElementById(form + "check_box_data_" + id);
        $(ele).remove();
        if (form == "")
            remove_header("check_box_data_str_" + id)
        return;
    }

    var checkbox_list = get_check_box_list()
    if (form != "")
        checkbox_list = form_get_check_box_list(field_id)
    var checkbox_list_duplicate_values = duplicates_exists(checkbox_list)
    if (checkbox_list_duplicate_values == true) {
        M.toast({
            'html': "Duplicate choices found!"
        }, 2000);

        document.getElementById(form + "check_box_data_str_" + id).value = ""
        var ele = document.getElementById(form + "check_box_data_" + id);
        $(ele).remove();
        if (form == "")
            remove_header("check_box_data_str_" + id)
        return;
    }

}

function add_check_box_choices_collection(sentence, form = "", field_id = "") {
    if (sentence.trim() == "") {
        return;
    }
    var id = form + "check_box_data_" + check_box_data_count.toString();
    var str_id = form + "check_box_data_str_" + check_box_data_count.toString();

    var html = `  <div class="response-widget-dragable-output-item" id="` + id + `">
                                                    <div class="dragable-item-icon tooltip-custom">
                                                        <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M16.9998 6.5C16.9998 7.6 16.0998 8.5 14.9998 8.5C13.8998 8.5 12.9998 7.6 12.9998 6.5C12.9998 5.4 13.8998 4.5 14.9998 4.5C16.0998 4.5 16.9998 5.4 16.9998 6.5ZM8.9998 4.5C7.8998 4.5 6.9998 5.4 6.9998 6.5C6.9998 7.6 7.8998 8.5 8.9998 8.5C10.0998 8.5 10.9998 7.6 10.9998 6.5C10.9998 5.4 10.0998 4.5 8.9998 4.5ZM6.99976 12.5C6.99976 11.4 7.89976 10.5 8.99976 10.5C10.0998 10.5 10.9998 11.4 10.9998 12.5C10.9998 13.6 10.0998 14.5 8.99976 14.5C7.89976 14.5 6.99976 13.6 6.99976 12.5ZM8.99976 20.5C10.0998 20.5 10.9998 19.6 10.9998 18.5C10.9998 17.4 10.0998 16.5 8.99976 16.5C7.89976 16.5 6.99976 17.4 6.99976 18.5C6.99976 19.6 7.89976 20.5 8.99976 20.5ZM14.9998 10.5C13.8998 10.5 12.9998 11.4 12.9998 12.5C12.9998 13.6 13.8998 14.5 14.9998 14.5C16.0998 14.5 16.9998 13.6 16.9998 12.5C16.9998 11.4 16.0998 10.5 14.9998 10.5ZM12.9998 18.5C12.9998 17.4 13.8998 16.5 14.9998 16.5C16.0998 16.5 16.9998 17.4 16.9998 18.5C16.9998 19.6 16.0998 20.5 14.9998 20.5C13.8998 20.5 12.9998 19.6 12.9998 18.5Z" fill="#DADADA"/>
                                                            </svg>
                                                        <div class="tooltiptext-custom tooltip-bottom-custom">Drag to move</div>


                                                    </div>
                                                    <div class="widget-indigator-icon" style="height: 20px;">
                                                        <svg width="19" height="19" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M4.25 2.75H14.75C15.575 2.75 16.25 3.425 16.25 4.25V14.75C16.25 15.575 15.575 16.25 14.75 16.25H4.25C3.425 16.25 2.75 15.575 2.75 14.75V4.25C2.75 3.425 3.425 2.75 4.25 2.75ZM5 14.75H14C14.4125 14.75 14.75 14.4125 14.75 14V5C14.75 4.5875 14.4125 4.25 14 4.25H5C4.5875 4.25 4.25 4.5875 4.25 5V14C4.25 14.4125 4.5875 14.75 5 14.75Z" fill="#C4C4C4"/>
                                                            </svg>


                                                    </div>
                                                    <input type="text" maxlength="`+ character_limit_small_text + `" class="edit_radio_button_choices" id="` + str_id + `" onfocus="edit_checkbox_choices_focus(this)"  onfocusout="edit_checkbox_choices_focusout(this,'` + check_box_data_count + `','` + field_id + `')" value="` + sentence + `">
                                                    <div class="widget-delete-icon" onclick="delete_elem(` + id + `)">
                                                        <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path d="M9.15011 3.35534C9.05669 3.26172 8.92987 3.2091 8.79761 3.2091C8.66535 3.2091 8.53852 3.26172 8.44511 3.35534L6.00011 5.79534L3.55511 3.35034C3.46169 3.25672 3.33487 3.2041 3.20261 3.2041C3.07035 3.2041 2.94352 3.25672 2.85011 3.35034C2.65511 3.54534 2.65511 3.86034 2.85011 4.05534L5.29511 6.50034L2.85011 8.94534C2.65511 9.14034 2.65511 9.45534 2.85011 9.65034C3.04511 9.84534 3.36011 9.84534 3.55511 9.65034L6.00011 7.20534L8.44511 9.65034C8.64011 9.84534 8.95511 9.84534 9.15011 9.65034C9.34511 9.45534 9.34511 9.14034 9.15011 8.94534L6.70511 6.50034L9.15011 4.05534C9.34011 3.86534 9.34011 3.54534 9.15011 3.35534Z" fill="#2D2D2D"/>
                                                            </svg>

                                                    </div>

                                                </div>`

    if (form == "") {
        $(html).appendTo($("#sortable-checkbox-widget-edit-div"));
        document.getElementById('checkbox-heading').style.display = "block"
        document.getElementById("new_bot_error_div_div-check-box-widget").innerHTML = ""
    } else {

        $(html).appendTo($("#sortable-checkbox-widget-edit-div-" + field_id));
        $("#sortable-checkbox-widget-edit-div-" + field_id).sortable({
            containment: "parent"
        });
        document.getElementById("new_bot_error_div_widgets_" + field_id).innerHTML = ""
    }

    check_box_data_count += 1;
}

//checkbox sortables
function edit_checkbox_choices_focus(elem) {
    $(elem).parent().addClass('edit-radio-widget-focus');
    $(elem).parent().children('.widget-delete-icon').css("display", "none");

}

function edit_checkbox_choices_focusout(elem, id, field_id = "") {
    $(elem).parent().removeClass('edit-radio-widget-focus');
    $(elem).parent().children('.widget-delete-icon').css("display", "block");
    if (elem.id.toString().includes("form"))
        checkbox_input_focusout(id, "form_", field_id)
    else
        checkbox_input_focusout(id)
};

//checkbox sortables end
var tms_cat_drop_down_count = 0

function get_tms_cat_drop_down_list() {
    drop_down_choices_list = []
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf('tms_drop_down_data_str') == 0) {
            data_id = "#" + inputs[i].id;
            drop_down_choices = $(data_id).val();
            if (drop_down_choices != "") {
                drop_down_choices_list.push(drop_down_choices.trim().toLowerCase());
            }
        }
    }
    return drop_down_choices_list
}

function add_tms_drop_down_cat_collection(sentence) {
    if (sentence.trim() == "") {
        return;
    }
    var id = "tms_drop_down_data_" + tms_cat_drop_down_count.toString();
    var str_id = "tms_drop_down_data_str_" + tms_cat_drop_down_count.toString();

    var html = `<li class="collection-item" id="` + id + `">
      <div class="row">
        <input id="` + str_id + `" type="text" maxlength="` + tms_cat_limit + `" onkeypress="return (event.charCode >= 65 && event.charCode <= 90) || (event.charCode >= 97 && event.charCode <= 122) || (event.charCode >= 48 && event.charCode <= 57) || (event.charCode == 32)" data-length="100"\
         value="` + sentence + `" style="width: 80%">
        <label for="` + str_id + `"></label>
        <div class="secondary-content">
        <a href="" class="delete-button-dropdown-tms-category" id="` + id + `">
          <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>
        </div>
      </div>
    </li>`;

    $(html).appendTo($("#tms-drop-down-cat-collection"));
    tms_cat_drop_down_count += 1;
}

var drop_down_data_count = 0;

function get_drop_down_list() {
    drop_down_choices_list = []
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf('drop_down_data_str') == 0) {
            data_id = "#" + inputs[i].id;
            drop_down_choices = $(data_id).val();
            if (drop_down_choices != "") {
                drop_down_choices_list.push(drop_down_choices.trim().toLowerCase());
            }
        }
    }
    return drop_down_choices_list
}

function form_get_dropdown_list(field_id) {
    drop_down_choices_list = []
    var searchable_elem = 'sortable-dropdown-widget-edit-div-' + field_id
    var inputs = document.getElementById(searchable_elem).getElementsByTagName('input')
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf('form_drop_down_data_str') == 0) {
            data_id = "#" + inputs[i].id;
            drop_down_choices = $(data_id).val();
            if (drop_down_choices != "") {
                drop_down_choices_list.push(drop_down_choices);
            }
        }
    }

    return drop_down_choices_list
}

function drop_down_input_focusout(id, form = "", field_id = "") {

    var value = document.getElementById(form + "drop_down_data_str_" + id).value

    var format = /[`#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
    if (format.test(value.trim())) {
        M.toast({
            'html': "Invalid choice name(Only A-Z, a-z, 0-9, ?, !, @, & are allowed)"
        }, 2000);
        document.getElementById(form + "drop_down_data_str_" + id).value = ""
        var ele = document.getElementById(form + "drop_down_data_" + id);
        $(ele).remove();
        if (form == "")
            remove_header("drop_down_data_str_" + id)
        return;

    }
    format = /[a-zA-Z0-9]/;
    if (!format.test(value.trim())) {
        M.toast({
            'html': "Invalid choice name(Choice name must contain at least one alphanumeric character)"
        }, 2000);
        document.getElementById(form + "drop_down_data_str_" + id).value = ""
        var ele = document.getElementById(form + "drop_down_data_" + id);
        $(ele).remove();
        if (form == "")
            remove_header("drop_down_data_str_" + id)
        return;
    }

    var drop_down_list = get_drop_down_list()
    if (form != "")
        drop_down_list = form_get_dropdown_list(field_id)
    var drop_down_list_duplicate_values = duplicates_exists(drop_down_list)
    if (drop_down_list_duplicate_values == true) {
        M.toast({
            'html': "Duplicate choices found!"
        }, 2000);

        document.getElementById(form + "drop_down_data_str_" + id).value = "";
        var ele = document.getElementById(form + "drop_down_data_" + id);
        $(ele).remove();
        if (form == "")
            remove_header("drop_down_data_str_" + id)
        return;
    }

}


function form_add_dropdown_chip(sentence, form, field_id) {
    if (sentence.trim() == "") {
        return;
    }
    var id = form + "drop_down_data_" + drop_down_data_count.toString();
    var str_id = form + "drop_down_data_str_" + drop_down_data_count.toString();

    var html = `  <div class="form-widget-dropdown-chip-item" id="` + id + `">
                                                                <div class="dragable-item-icon tooltip-custom">
                                                                    <svg width="14" height="15" viewBox="0 0 14 15" fill="#d9d9d9" xmlns="http://www.w3.org/2000/svg">
                                                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M9.91683 4.00016C9.91683 4.64183 9.39183 5.16683 8.75016 5.16683C8.1085 5.16683 7.5835 4.64183 7.5835 4.00016C7.5835 3.3585 8.1085 2.8335 8.75016 2.8335C9.39183 2.8335 9.91683 3.3585 9.91683 4.00016ZM5.2502 2.8335C4.60854 2.8335 4.08354 3.3585 4.08354 4.00017C4.08354 4.64183 4.60854 5.16683 5.2502 5.16683C5.89187 5.16683 6.41687 4.64183 6.41687 4.00017C6.41687 3.3585 5.89187 2.8335 5.2502 2.8335ZM4.0835 7.50016C4.0835 6.8585 4.6085 6.3335 5.25016 6.3335C5.89183 6.3335 6.41683 6.8585 6.41683 7.50016C6.41683 8.14183 5.89183 8.66683 5.25016 8.66683C4.6085 8.66683 4.0835 8.14183 4.0835 7.50016ZM5.25016 12.1668C5.89183 12.1668 6.41683 11.6418 6.41683 11.0002C6.41683 10.3585 5.89183 9.8335 5.25016 9.8335C4.6085 9.8335 4.0835 10.3585 4.0835 11.0002C4.0835 11.6418 4.6085 12.1668 5.25016 12.1668ZM8.75016 6.3335C8.1085 6.3335 7.5835 6.8585 7.5835 7.50016C7.5835 8.14183 8.1085 8.66683 8.75016 8.66683C9.39183 8.66683 9.91683 8.14183 9.91683 7.50016C9.91683 6.8585 9.39183 6.3335 8.75016 6.3335ZM7.5835 11.0002C7.5835 10.3585 8.1085 9.8335 8.75016 9.8335C9.39183 9.8335 9.91683 10.3585 9.91683 11.0002C9.91683 11.6418 9.39183 12.1668 8.75016 12.1668C8.1085 12.1668 7.5835 11.6418 7.5835 11.0002Z" />
                                                                        </svg>

                                                                    <div class="tooltiptext-custom tooltip-bottom-custom" style="left: -23px;">Drag to move</div>


                                                                </div>
                                                                <input type="text" maxlength="`+ character_limit_small_text + `" class="edit-form-widget-dropdown-choices" id="` + str_id + `"  onfocus = "edit_dropdown_chip_focus(this)" onfocusout="edit_dropdown_choices_focusout(this,'` + drop_down_data_count + `','` + field_id + `')" value="` + sentence + `">
                                                                <div class="widget-delete-icon" onclick="delete_elem(` + id + `)">
                                                                    <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                                            <path d="M9.15035 3.35486C9.05694 3.26123 8.93011 3.20861 8.79785 3.20861C8.66559 3.20861 8.53877 3.26123 8.44535 3.35486L6.00035 5.79486L3.55535 3.34986C3.46194 3.25623 3.33511 3.20361 3.20285 3.20361C3.07059 3.20361 2.94377 3.25623 2.85035 3.34986C2.65535 3.54486 2.65535 3.85986 2.85035 4.05486L5.29535 6.49986L2.85035 8.94486C2.65535 9.13986 2.65535 9.45486 2.85035 9.64986C3.04535 9.84486 3.36035 9.84486 3.55535 9.64986L6.00035 7.20486L8.44535 9.64986C8.64035 9.84486 8.95535 9.84486 9.15035 9.64986C9.34535 9.45486 9.34535 9.13986 9.15035 8.94486L6.70535 6.49986L9.15035 4.05486C9.34035 3.86486 9.34035 3.54486 9.15035 3.35486Z" fill="white"/>
                                                                            </svg>


                                                                </div>
                                                            </div>`



    $(html).appendTo($("#sortable-dropdown-widget-edit-div-" + field_id));
    $("#sortable-dropdown-widget-edit-div-" + field_id).sortable({
        containment: "parent"
    });


    $.fn.textWidth = function (text, font) {

        if (!$.fn.textWidth.fakeEl) $.fn.textWidth.fakeEl = $('<span>').hide().appendTo(document.body);

        $.fn.textWidth.fakeEl.text(text || this.val() || this.text() || this.attr('placeholder')).css('font', font || this.css('font'));

        return $.fn.textWidth.fakeEl.width();
    };

    $('#' + str_id).on('input', function () {
        var inputWidth = $(this).textWidth();

        $(this).attr('style', 'width: ' + inputWidth * 1.1 + 'px !important');


    }).trigger('input');


    function inputWidth(elem, minW, maxW) {
        elem = $(this);

    }

    var targetElem = $('#' + str_id);

    inputWidth(targetElem);

    document.getElementById("new_bot_error_div_widgets_" + field_id).innerHTML = ""


    drop_down_data_count += 1;
}

//dropdown chips 
function edit_dropdown_chip_focus(elem) {
    $(elem).parent().css("background", "#ffffff");
    $(elem).parent().css('border', '1px solid #729CDF');
    // $(this).css('color', "#2d2d2d !important");
    $(elem).parent().children('.widget-delete-icon').css("display", "none");
    // $(this).parent().children('.dragable-item-icon').css("display", "none");


}


function add_drop_down_choices_collection(sentence) {
    if (sentence.trim() == "") {
        return;
    }
    var id = "drop_down_data_" + drop_down_data_count.toString();
    var str_id = "drop_down_data_str_" + drop_down_data_count.toString();

    var html = `<div class="response-widget-dragable-output-item" id="` + id + `">
                                                    <div class="dragable-item-icon tooltip-custom">
                                                        <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path fill-rule="evenodd" clip-rule="evenodd" d="M16.9998 6.5C16.9998 7.6 16.0998 8.5 14.9998 8.5C13.8998 8.5 12.9998 7.6 12.9998 6.5C12.9998 5.4 13.8998 4.5 14.9998 4.5C16.0998 4.5 16.9998 5.4 16.9998 6.5ZM8.9998 4.5C7.8998 4.5 6.9998 5.4 6.9998 6.5C6.9998 7.6 7.8998 8.5 8.9998 8.5C10.0998 8.5 10.9998 7.6 10.9998 6.5C10.9998 5.4 10.0998 4.5 8.9998 4.5ZM6.99976 12.5C6.99976 11.4 7.89976 10.5 8.99976 10.5C10.0998 10.5 10.9998 11.4 10.9998 12.5C10.9998 13.6 10.0998 14.5 8.99976 14.5C7.89976 14.5 6.99976 13.6 6.99976 12.5ZM8.99976 20.5C10.0998 20.5 10.9998 19.6 10.9998 18.5C10.9998 17.4 10.0998 16.5 8.99976 16.5C7.89976 16.5 6.99976 17.4 6.99976 18.5C6.99976 19.6 7.89976 20.5 8.99976 20.5ZM14.9998 10.5C13.8998 10.5 12.9998 11.4 12.9998 12.5C12.9998 13.6 13.8998 14.5 14.9998 14.5C16.0998 14.5 16.9998 13.6 16.9998 12.5C16.9998 11.4 16.0998 10.5 14.9998 10.5ZM12.9998 18.5C12.9998 17.4 13.8998 16.5 14.9998 16.5C16.0998 16.5 16.9998 17.4 16.9998 18.5C16.9998 19.6 16.0998 20.5 14.9998 20.5C13.8998 20.5 12.9998 19.6 12.9998 18.5Z" fill="#DADADA"/>
                                                            </svg>
                                                        <div class="tooltiptext-custom tooltip-bottom-custom">Drag to move</div>


                                                    </div>

                                                    <input type="text" maxlength="`+ character_limit_small_text + `" class="edit_radio_button_choices" id="` + str_id + `" onfocus="edit_dropdown_choices_focus(this)"  onfocusout="edit_dropdown_choices_focusout(this,'` + drop_down_data_count + `')" value="` + sentence + `">
                                                    <div class="widget-delete-icon" onclick="delete_elem(` + id + `)">
                                                        <svg width="12" height="13" viewBox="0 0 12 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                            <path d="M9.15011 3.35534C9.05669 3.26172 8.92987 3.2091 8.79761 3.2091C8.66535 3.2091 8.53852 3.26172 8.44511 3.35534L6.00011 5.79534L3.55511 3.35034C3.46169 3.25672 3.33487 3.2041 3.20261 3.2041C3.07035 3.2041 2.94352 3.25672 2.85011 3.35034C2.65511 3.54534 2.65511 3.86034 2.85011 4.05534L5.29511 6.50034L2.85011 8.94534C2.65511 9.14034 2.65511 9.45534 2.85011 9.65034C3.04511 9.84534 3.36011 9.84534 3.55511 9.65034L6.00011 7.20534L8.44511 9.65034C8.64011 9.84534 8.95511 9.84534 9.15011 9.65034C9.34511 9.45534 9.34511 9.14034 9.15011 8.94534L6.70511 6.50034L9.15011 4.05534C9.34011 3.86534 9.34011 3.54534 9.15011 3.35534Z" fill="#2D2D2D"/>
                                                            </svg>

                                                    </div>

                                                </div>`

    $(html).appendTo($("#sortable-dropdown-widget-edit-div"));
    document.getElementById('dropdown-heading').style.display = "block"
    document.getElementById("new_bot_error_div_div-drop-down-widget").innerHTML = ""
    drop_down_data_count += 1;
}

//dropdown sortables

function edit_dropdown_choices_focus(elem) {
    $(elem).parent().addClass('edit-radio-widget-focus');
    $(elem).parent().children('.widget-delete-icon').css("display", "none");

}

function edit_dropdown_choices_focusout(elem, id, field_id = "") {
    $(elem).parent().removeClass('edit-radio-widget-focus');
    $(elem).parent().children('.widget-delete-icon').css("display", "block");
    if (elem.id.toString().includes("form")) {

        $(elem).parent().css("background", "#0254D7");
        $(elem).parent().css('border', 'none');
        // $(this).css('color', '#ffffff');
        $(elem).parent().children('.widget-delete-icon').css("display", "block");
        // $(this).parent().children('.dragable-item-icon').css("display", "block");



        drop_down_input_focusout(id, "form_", field_id)
    } else
        drop_down_input_focusout(id)
};

//end dropdown sortables


if (window.location.href.indexOf("chat/flow-analytics") == -1) {
    if (document.getElementById('add_radio_button_choices')) {
        document.getElementById("add_radio_button_choices")
        .addEventListener("keyup", function (event) {
            event.preventDefault();
            if (event.keyCode === 13) {
                value = document.getElementById("add_radio_button_choices").value;
                var format = /[`#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
                if (format.test(value.trim())) {
                    showToast("Invalid choice name(Only A-Z, a-z, 0-9, ?, !, @, & are allowed)")
                    return;
                }
                format = /[a-zA-Z0-9]/;
                if (!format.test(value.trim())) {
                    showToast("Invalid choice name(Choice name must contain at least one alphanumeric character)")
                    return;
                }
                let radio_button_list = node_intent_data[selected_node].intent_response.modes_param.radio_button_choices
                let check_duplicates_list = check_duplicates_for_value(value.trim(), radio_button_list)
                if (check_duplicates_list) {
                    showToast("Choice already exists(All choices must be different)")
                } else {
                    add_radio_widget_rhs([value.trim()], false);
                }
                document.getElementById("add_radio_button_choices").value = "";
            }
        });
    }

    if (document.getElementById('add_check_box_choices')) {
        document.getElementById("add_check_box_choices")
        .addEventListener("keyup", function (event) {
            event.preventDefault();
            if (event.keyCode === 13) {
                value = document.getElementById("add_check_box_choices").value;
                var format = /[`#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
                if (format.test(value.trim())) {
                    document.getElementById("new_bot_error_div_div-check-box-widget").innerHTML = "Invalid choice name(Only A-Z, a-z, 0-9, ?, !, @, & are allowed)"
                    return;
                }
                format = /[a-zA-Z0-9]/;
                if (!format.test(value.trim())) {
                    document.getElementById("new_bot_error_div_div-check-box-widget").innerHTML = "Invalid choice name(Choice name must contain at least one alphanumeric character)"
                    return;
                }
                let check_box_list = node_intent_data[selected_node].intent_response.modes_param.check_box_choices
                let check_duplicates_list = check_duplicates_for_value(value.trim(), check_box_list)
                if (check_duplicates_list) {
                    showToast("Choice already exists(All choices must be different)")
                } else {
                    add_checkbox_widget_rhs([value.trim()], false);
                }
                document.getElementById("add_check_box_choices").value = "";
            }
        });
    }


    if (document.getElementById('add_drop_down_choices')) {
        document.getElementById("add_drop_down_choices")
        .addEventListener("keyup", function (event) {
            event.preventDefault();
            if (event.keyCode === 13) {
                value = document.getElementById("add_drop_down_choices").value;
                value = value.trim()
                var format = /[`#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
                if (format.test(value.trim())) {
                    document.getElementById("new_bot_error_div_div-drop-down-widget").innerHTML = "Invalid choice name(Only A-Z, a-z, 0-9, ?, !, @, & are allowed)"
                    return;
                }
                format = /[a-zA-Z0-9]/;
                if (!format.test(value.trim())) {
                    document.getElementById("new_bot_error_div_div-drop-down-widget").innerHTML = "Invalid choice name(Choice name must contain at least one alphanumeric character)"
                    return;
                }
                let drop_down_list = node_intent_data[selected_node].intent_response.modes_param.drop_down_choices
                let check_duplicates_list = check_duplicates_for_value(value.trim(), drop_down_list)
                if (check_duplicates_list) {
                    showToast("Choice already exists(All choices must be different)")
                } else {
                    add_dropdown_widget_rhs([value.trim()], false);
                }
                document.getElementById("add_drop_down_choices").value = "";
            }
        });
    }

}

function un_entity(str) {
    str = $("<textarea></textarea>").html(str).text();
    str = str.replace(/<([a-z][a-z0-9]*)[^>]*?(\/?)>/sg, "<$1$2>");
    return str;
}

function save_intent(add_other_intent = false, e) {
    value = $("#add_enter_intent_training_data").val();
    if (value != "") {
        addIntentTrainingDataIntoCollection(value);
        $("#add_enter_intent_training_data").val("");
    }
    e.preventDefault();
    intent_pk = null

    if (window.location.href.indexOf("intent_pk=") != -1) {

        var url_parameters = get_url_vars();
        intent_pk = url_parameters["intent_pk"];
    }

    intent_name = $('#intent_name').val().trim();

    if (intent_name == "") {
        M.toast({
            "html": "Intent name cannot be empty."
        }, 2000);
        return;
    }

    // To check only emoji is present or not 
    var emoji_regex = /^(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|[\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|[\ud83c[\ude32-\ude3a]|[\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])+$/;
    raw_intent = intent_name.split(" ").join("")
    const emoji_test_reg = emoji_regex.test(raw_intent);

    if (emoji_test_reg) {
        M.toast({
            "html": "Intent name cannot have only Emoji."
        }, 2000);
        return;
    }

    multilingual_intent_elm = document.getElementById("multilingual_intent_name")
    multilingual_intent_name = ""
    if (multilingual_intent_elm != null && multilingual_intent_elm != undefined) {
        multilingual_intent_name = multilingual_intent_elm.value
    }
    selected_bot_pk_list = [$("#multiple-select-bot-choice-pk-list").val()];

    if (selected_bot_pk_list.length == 0) {
        M.toast({
            "html": "Select atleast one bot in which intent will be supported"
        }, 2000);
        return;
    }

    training_data_list = []
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf('trainingdatastr_') == 0) {
            data_id = "#" + inputs[i].id;
            training_data = $(data_id).val();
            if (training_data != "") {
                training_data_list.push(training_data);
            }
        }
    }

    if (training_data_list.length == 0) {
        M.toast({
            "html": "At least one training sentence is required."
        }, 2000);
        return;
    }

    let response_present = ['text'];

    recommended_intent_list = $("#multiple-select-intent-choice-list").val();
    var child_choices = $("#multiple-select-child-choices").val();

    if (recommended_intent_list.length > 0) {
        response_present.push('quick_recommendations');
    }

    intent_bot_response_text_text = $("#intent_bot_response_text_text").trumbowyg('html');
    intent_bot_response_text_speech = $("#intent_bot_response_text_speech").trumbowyg('html');
    intent_bot_response_reprompt = $("#intent_bot_response_reprompt").trumbowyg('html');
    intent_bot_response_ssml = $("#intent_bot_response_ssml").val();

    intent_bot_response_text_text = intent_bot_response_text_text.replace(new RegExp('\r?<br />', 'g'), '<br>');

    if (validate_ck_editor_response(intent_bot_response_text_text) != "" && validate_ck_editor_response(intent_bot_response_text_speech) == "") {
        intent_bot_response_text_speech = intent_bot_response_text_text
    }

    if (validate_ck_editor_response(intent_bot_response_text_text) == "") {
        M.toast({
            "html": "At least one text/speech response required."
        }, 2000);
        return;
    }
    var is_feedback_required = false;
    feedback_element = document.getElementById('checkbox-intent-feedback');
    if (feedback_element != null && feedback_element != undefined) {
        is_feedback_required = document.getElementById('checkbox-intent-feedback').checked;
    }
    if(is_feedback_required){
        response_present.push("intent_level_feedback");
    }
    var is_attachment_required = false
    if (selected_widget == "div-file-attach-widget")
        is_attachment_required = true
    var is_save_attachment_required = document.getElementById('checkbox-intent-save-attachment').checked;
    var choosen_file_type = document.getElementById('choosen_file_type').value;

    var is_go_back_enabled = false;
    if (document.getElementById('checkbox-tree-go-back-enabled')) {
        is_go_back_enabled = document.getElementById('checkbox-tree-go-back-enabled').checked;
    }

    is_faq_intent = document.getElementById('checkbox_faq_intent').checked;
    is_part_of_suggestion_list = document.getElementById('checkbox-intent-part-of-suggestionList').checked;
    is_small_talk = document.getElementById('checkbox-small-talk-enabled').checked;

    if (is_attachment_required && choosen_file_type == "") {

        M.toast({
            "html": "Please select file type."
        }, 2000);
        return;
    }

    if (is_attachment_required) {
        response_present.push('file_attach');
    }

    var is_livechat_enabled = false;
    element_livechat_enabled = document.getElementById('checkbox-intent-livechat-enabled');

    if (element_livechat_enabled != undefined && element_livechat_enabled != null) {
        is_livechat_enabled = element_livechat_enabled.checked;
    }

    var is_authentication_required = false;
    element_checkbox_authentication = document.getElementById('checkbox-intent-authentication');
    if (element_checkbox_authentication != null && element_checkbox_authentication != undefined) {
        is_authentication_required = element_checkbox_authentication.checked;
    }

    var is_child_intent_visible = "None";
    element_child_intent_visible = document.getElementById("checkbox-intent-child-tree-options-visible");
    if (element_child_intent_visible != null && element_child_intent_visible != undefined) {
        is_child_intent_visible = element_child_intent_visible.checked;
    }

    var authentication_id = "None";
    try {
        authentication_id = $("#select-user-authentication").val();
        if (is_authentication_required) {
            if (authentication_id == null || authentication_id == undefined) {
                M.toast({
                    "html": "Please select authentication type."
                });
                return;
            }
        } else {
            authentication_id = "None";
        }
    } catch (err) {
        console.log(err);
    }

    selected_channels_list = $("#multiple-select-intent-channel-list").val();
    var intent_response_list = [{
        "text_response": intent_bot_response_text_text,
        "speech_response": intent_bot_response_text_speech,
        "hinglish_response": "",
        "reprompt_response": intent_bot_response_reprompt,
        "ssml_response": intent_bot_response_ssml,
    }];

    image_list = []
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf("imageurl_intent_image_url_") == 0) {
            data_id = inputs[i].id;
            token_id = data_id.split("_")[4];
            image_url = $("#imageurl_intent_image_url_" + token_id).val();
            image_url = store_this_data_locally(image_url)
            image_list.push(image_url);
        }
    }

    if (image_list.length > 0) {
        response_present.push('image');
    }

    video_list = []
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf("videourl_intent_video_url_") == 0) {
            data_id = inputs[i].id;
            token_id = data_id.split("_")[4];
            video_url = $("#videourl_intent_video_url_" + token_id).val();
            video_list.push(video_url);
        }
    }

    if (video_list.length > 0) {
        response_present.push('video');
    }

    card_list = []
    var spans = document.getElementsByTagName("span");
    for (var i = 0; i < spans.length; i++) {
        if (spans[i].id.indexOf("title_intent_card_") == 0) {
            data_id = spans[i].id;
            token_id = data_id.split("_")[3];
            check_img = document.getElementById("img_url_intent_card_" + token_id);
            card_img_url = '';
            if (check_img) {
                card_img_url = $("#img_url_intent_card_" + token_id).attr("src");
            }
            card_title = document.getElementById("title_intent_card_" + token_id).innerText;
            card_content = $("#content_intent_card_" + token_id).html();
            card_url = $("#link_intent_card_" + token_id).attr("href");
            card_list.push({
                "title": card_title,
                "content": card_content,
                "link": store_this_data_locally(card_url),
                "img_url": store_this_data_locally(card_img_url)
            });
        }
    }

    if (card_list.length > 0) {
        response_present.push('link_cards');
    }

    recommended_intent_list = $("#multiple-select-intent-choice-list").val();

    if (intent_response_list.length == 0) {
        M.toast({
            'html': 'Text response cannot be empty.'
        }, 2000);
        return;
    }

    category_obj_pk = document.getElementById("select-intent-category").value

    if (category_obj_pk == "" || category_obj_pk == null) {
        alert("Please select suitable category for Intent");
        return;
    }

    validator_id = $("#select-user-validator").val();

    rows = document.getElementById('hidden-numbers-rows').innerHTML;
    if (document.getElementById('number-of-rows-table').value != "") {
        rows = document.getElementById('number-of-rows-table').value
    }
    table_input_list_of_list = ""
    if (rows != 0) {
        table_input_list_of_list = check_table_filled()
        if (table_input_list_of_list == false) {
            alert("Table cannot have empty cells");
            return;
        } else {
            response_present.push('table');
        }
    }

    function check_table_filled() {
        rows = document.getElementById('hidden-numbers-rows').innerHTML;
        columns = document.getElementById('hidden-numbers-columns').innerHTML;
        if (document.getElementById('number-of-rows-table').value != "") {
            rows = document.getElementById('number-of-rows-table').value
        }
        if (document.getElementById('number-of-columns-table').value != "") {
            columns = document.getElementById('number-of-columns-table').value
        }
        table_input_list_of_list = []
        for (i = 0; i < rows; i++) {
            row_list = []
            for (j = 0; j < columns; j++) {
                cell_value = document.getElementById('cell-id-' + i.toString() + j.toString()).innerHTML;
                if (cell_value != "") {
                    if (un_entity(cell_value).trim() == "<br>" || un_entity(cell_value).trim() == "")
                        return false
                    else
                        row_list.push(un_entity(cell_value));
                } else {
                    return false
                };

            };
            table_input_list_of_list.push(row_list)
        };
        return table_input_list_of_list
    };
    var explanation = "";

    try {
        explanation = document.getElementById("explanation").value;
    } catch { }

    /* Widgets 
        1. Date Picker
        2. Time Picker
        3. Range Slider
        4. Radio Button
    */

    //Date Picker
    var is_date_picker_allowed = false
    if (selected_widget == "div-date-picker-widget")
        is_date_picker_allowed = true
    var is_single_date_picker_allowed = document.getElementById('checkbox-intent-single-date-picker').checked;
    var is_multi_date_picker_allowed = document.getElementById('checkbox-intent-multi-date-picker').checked;

    if (is_date_picker_allowed) {
        if (is_single_date_picker_allowed == false && is_multi_date_picker_allowed == false) {
            M.toast({
                'html': 'Please select atleast one option.'
            }, 2000);
            return;
        } else {
            response_present.push('date_picker');
        }
    }

    //Time Picker
    var is_time_picker_allowed = false
    if (selected_widget == "div-time-picker-widget")
        is_time_picker_allowed = true
    var is_single_time_picker_allowed = document.getElementById('checkbox-intent-single-time-picker').checked;
    var is_multi_time_picker_allowed = document.getElementById('checkbox-intent-multi-time-picker').checked;
    if (is_time_picker_allowed) {
        if (is_single_time_picker_allowed == false && is_multi_time_picker_allowed == false) {
            M.toast({
                'html': 'Please select atleast one option.'
            }, 2000);
            return;
        } else {
            response_present.push('time_picker');
        }
    }

    // Range Slider
    var is_range_slider_required = false;
    var minimum_range = ""
    var maximum_range = ""
    var range_slider_type = ""
    if (selected_widget == "div-range-slider-widget") {
        is_range_slider_required = true;
        if (document.getElementById('single-range-slider').checked)
            range_slider_type = "single-range-slider";
        else if (document.getElementById('multi-range-slider').checked)
            range_slider_type = "multi-range-slider";
        minimum_range = document.getElementById("range-slider-min-range").value;
        maximum_range = document.getElementById("range-slider-max-range").value;
        minimum_range = parseInt(minimum_range)
        document.getElementById("range-slider-min-range").value = minimum_range
        maximum_range = parseInt(maximum_range)
        document.getElementById("range-slider-max-range").value = maximum_range
        if (range_slider_type == "" || range_slider_type == null || range_slider_type == undefined) {
            M.toast({
                'html': 'Please select a range slider option.'
            }, 2000);
            return;
        }

        if (/^\d+$/.test(minimum_range) == false || /^\d+$/.test(maximum_range) == false) {
            M.toast({
                'html': 'Please enter a valid range.'
            }, 2000);
            return;
        }
        if (minimum_range >= maximum_range) {
            M.toast({
                'html': 'Minimum range should be less than maximum.'
            }, 2000);
            return;
        }

        if (minimum_range >= 9999999999 || maximum_range >= 9999999999) {
            M.toast({
                'html': 'Range values should be less than 10 digits'
            }, 2000);
            return;
        }

        response_present.push('range_slider');
    }

    //Radio Button

    var is_radio_button_allowed = false
    radio_choices_list = []
    if (selected_widget == "div-radio-button-widget") {
        is_radio_button_allowed = true
        var inputs = document.getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].id.indexOf('radio_button_data_str') == 0) {
                data_id = "#" + inputs[i].id;
                radio_choices = $(data_id).val();
                if (radio_choices != "") {
                    radio_choices_list.push(radio_choices);
                }
            }
        }
        if (radio_choices_list.length == 0) {
            M.toast({
                "html": "At least one choice is required."
            }, 2000);
            return;
        }

        response_present.push('radio_button');

    }

    var post_processor_variable = "";
    try {
        post_processor_variable = document.getElementById('post_processor_variable').value
    } catch { }

    //Checkbox
    var is_check_box_allowed = false
    checkbox_choices_list = []
    if (selected_widget == "div-check-box-widget") {
        is_check_box_allowed = true
        var inputs = document.getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].id.indexOf('check_box_data_str') == 0) {
                data_id = "#" + inputs[i].id;
                checkbox_choices = $(data_id).val();
                if (checkbox_choices != "") {
                    checkbox_choices_list.push(checkbox_choices);
                }
            }
        }

        if (checkbox_choices_list.length == 0) {
            M.toast({
                "html": "At least one choice is required."
            }, 2000);
            return;
        }
        response_present.push('checkbox');
    }

    //Phone Widget

    var is_phone_widget_enabled = false
    var country_code = "in"
    if (selected_widget == "div-phone-number-widget") {
        is_phone_widget_enabled = true
        var country_code = $("#phone").intlTelInput("getSelectedCountryData")

        country_code = country_code.iso2
        response_present.push('phone_number');

    }


    //Form
    var is_create_form_allowed = false
    if (selected_widget == 'div-create-form-widget')
        is_create_form_allowed = true
    var form_name = ""
    form_fields_list = [];
    if (is_create_form_allowed) {
        form_name = document.getElementById('form_name').value;
        form_name = strip_unwanted_characters(stripHTML(form_name));
        form_name = form_name.trim();
        if (form_name == '') {
            M.toast({
                "html": "Please enter a valid form name"
            }, 2000);
            return;
        }

        let fields_present = document.getElementsByClassName('create-form-field');
        if (fields_present.length == 0) {
            M.toast({
                "html": "Please add atleast one form section"
            }, 2000);
            return;
        }
        for (let i = 0; i < fields_present.length; ++i) {
            let field_id = fields_present[i].id;
            let field_div = document.getElementById(field_id);
            let field_id_num = field_id.split('-')[1]

            let label_name, input_type, placeholder_or_options_elem1, placeholder_or_options_elem2, validator, attachment_type, optional, range_type, calendar_type, dependent;
            placeholder_or_options_elem2 = ""

            label_name = document.getElementById('input_name_' + field_id_num + '_1').value;
            label_name = strip_unwanted_characters(stripHTML(label_name));

            input_type = document.getElementById('input_type_' + field_id_num).value
            // input_type = input_name_mapping(input_type)

            placeholder_or_options_elem1 = document.getElementById('input_selected_type_' + field_id_num + '_3').value;
            validator = document.getElementById('validator_' + field_id_num).value;

            // validator = validator_mapping(validator);

            attachment_type = document.getElementById('file_attach_type_' + field_id_num).value;

            range_type = document.getElementById('range_selector_' + field_id_num).value;

            calendar_type = document.getElementById('calendar_selector_type_' + field_id_num).value;

            optional = document.getElementById('optional-toggle-field-' + field_id_num).checked;

            dependent = document.getElementById('dependent-field-' + field_id_num);

            country_code = $("#phone_number_selector_type_" + field_id_num).intlTelInput("getSelectedCountryData").iso2

            if (dependent) {
                dependent = dependent.checked;
            } else {
                dependent = false;
            }
            let dependent_on = ''
            let dependent_on_label_name = ''
            if (dependent) {
                dependent_on = document.getElementById('dependent_field_dropdown_' + field_id_num).value;
                dependent_on_label_name = document.getElementById('input_name_' + dependent_on + '_1').value
            }

            if (dependent_on == 'Select Dependency') {
                M.toast({
                    "html": "Please select a valid dependency"
                }, 2000);
                return;
            }

            let dependent_fields = document.querySelectorAll('.dependent-dropdown');
            let dependent_ids = []
            for (let j = 0; j < dependent_fields.length; j++) {
                if (dependent_fields[j].value == field_id_num) {
                    dependent_ids.push(dependent_fields[j].id.split('_')[3])
                }
            }
            
            dependent_ids = dependent_ids.join('$$$')

            label_name = label_name.trim();
            if (label_name == "") {
                M.toast({
                    "html": "Please enter a valid label name"
                }, 2000);
                return;
            }

            if (input_type == "") {
                M.toast({
                    "html": "Please enter an input type"
                }, 2000);
                return;
            }

            let placeholder_or_options = placeholder_or_options_elem1;

            if (input_type == 'file_attach') {
                placeholder_or_options = attachment_type
            } else {
                // placeholder_or_options = stripHTML(placeholder_or_options);
                // placeholder_or_options = placeholder_or_options.trim();

                // var values = placeholder_or_options.toLowerCase().split('$$$');
                // var values_set = new Set(values);
                // if (values_set.size != values.length) {
                //     M.toast({
                //         "html": "Please enter unique values for choices in form widget."
                //     }, 2000);
                //     return;
                // }
                if (input_type == "radio") {

                    placeholder_or_options = form_get_radio_button_list(field_id.split("-")[1])
                    placeholder_or_options = placeholder_or_options.join('$$$')

                } else if (input_type == "checkbox") {
                    placeholder_or_options = form_get_check_box_list(field_id.split("-")[1])
                    placeholder_or_options = placeholder_or_options.join('$$$')

                } else if (input_type == "dropdown_list") {
                    placeholder_or_options = form_get_dropdown_list(field_id.split("-")[1])
                    placeholder_or_options = placeholder_or_options.join('$$$')
                } else if (input_type == "range") {
                    var form_range_slider_min_value = document.getElementById("form-range-slider-min-range-" + field_id.split("-")[1]).value;
                    var form_range_slider_max_value = document.getElementById("form-range-slider-max-range-" + field_id.split("-")[1]).value;
                    placeholder_or_options = form_range_slider_min_value + "-" + form_range_slider_max_value;
                }
            }

            if (input_type == "text_field" || input_type == "phone_number") {
                if (placeholder_or_options == "") {
                    M.toast({
                        "html": "Please enter placeholder value"
                    }, 2000);
                    return;
                }
            } else if (!api_integrated_fields.includes(field_id_num) && input_type == "dropdown_list" && placeholder_or_options == "") {
                M.toast({
                    "html": "Please enter at least one and valid dropdown option"
                }, 2000);
                return;
            } else if (!api_integrated_fields.includes(field_id_num) && input_type == "checkbox" && placeholder_or_options == "") {
                M.toast({
                    "html": "Please enter at least one and valid checkbox option"
                }, 2000);
                return;
            } else if (!api_integrated_fields.includes(field_id_num) && input_type == "radio" && placeholder_or_options == "") {
                M.toast({
                    "html": "Please enter at least one and valid radio button option"
                }, 2000);
                return;
            } else if (input_type == "range") {
                if (placeholder_or_options.split('-')[0] == "" || placeholder_or_options.split('-')[1] == "") {
                    M.toast({
                        "html": "Please enter a range"
                    }, 2000);
                    return;
                } else if (placeholder_or_options.split('-').length != 2 || (isNaN(placeholder_or_options.split('-')[0]) || isNaN(placeholder_or_options.split('-')[1]))) {
                    M.toast({
                        "html": "Please enter a valid range"
                    }, 2000);
                    return;
                } else if (parseInt(placeholder_or_options.split('-')[0]) >= parseInt(placeholder_or_options.split('-')[1])) {
                    M.toast({
                        'html': 'Minimum range should be less than maximum.'
                    }, 2000);
                    return;
                }
            } else if (input_type == "file_attach" && (placeholder_or_options == undefined || placeholder_or_options == "")) {
                M.toast({
                    "html": "Please select file type"
                }, 2000);
                return;
            }

            form_fields_list.push({
                label_name: label_name,
                input_type: input_type,
                validator: validator,
                placeholder_or_options: placeholder_or_options,
                optional: optional.toString(),
                range_type: range_type,
                calendar_type: calendar_type,
                field_id_num: field_id_num,
                is_dependent: dependent.toString(),
                dependent_on: dependent_on.toString(),
                dependent_on_label_name: dependent_on_label_name,
                dependent_field_ids: dependent_ids,
                country_code: country_code,
            })
        }

        response_present.push('form');

    }

    //Calender
    var is_calender_picker_allowed = false
    if (selected_widget == "div-calender-picker-widget")
        is_calender_picker_allowed = true
    var is_single_calender_date_picker_allowed = document.getElementById('single-date-picker-radio').checked;
    var is_multi_calender_date_picker_allowed = document.getElementById('custom-date-picker-radio').checked;
    var is_single_calender_time_picker_allowed = document.getElementById('single-time-picker-radio').checked;
    var is_multi_calender_time_picker_allowed = document.getElementById('custom-time-picker-radio').checked;


    var is_calender_date_picker_enabled = document.getElementById('enabledatepicker_switch1').checked
    var is_calender_time_picker_enabled = document.getElementById('enabletimepicker_switch2').checked

    if (is_calender_picker_allowed) {

        if (is_calender_date_picker_enabled) {
            if ((is_single_calender_date_picker_allowed == false && is_multi_calender_date_picker_allowed == false)) {
                M.toast({
                    'html': 'Please select atleast one option in date picker.'
                }, 2000);
                return;
            }
        }

        if (is_calender_time_picker_enabled) {
            if ((is_single_calender_time_picker_allowed == false && is_multi_calender_time_picker_allowed == false)) {
                M.toast({
                    'html': 'Please select atleast one option in time picker.'
                }, 2000);
                return;
            }
        }

        response_present.push('calendar_picker');
    }

    var is_automate_recursion_enabled = false;
    element_checkbox_automate_recursion = document.getElementById("checkbox-automate-recursion");
    if (element_checkbox_automate_recursion != null && element_checkbox_automate_recursion != undefined) {
        is_automate_recursion_enabled = element_checkbox_automate_recursion.checked;
    }

    //Dropdown
    var is_drop_down_allowed = false
    dropdown_choices_list = []
    if (selected_widget == "div-drop-down-widget") {
        is_drop_down_allowed = true
        var inputs = document.getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].id.indexOf('drop_down_data_str') == 0) {
                data_id = "#" + inputs[i].id;
                dropdown_choices = $(data_id).val();
                if (dropdown_choices != "") {
                    dropdown_choices_list.push(dropdown_choices);
                }
            }
        }
        if (dropdown_choices_list.length == 0) {
            M.toast({
                "html": "At least one choice is required."
            }, 2000);
            return;
        }
        response_present.push('drop_down');
    }
    // Video Recorder
    var is_video_recorder_allowed = false
    if (selected_widget == "div-video-recorder-widget")
        is_video_recorder_allowed = true
    if (is_video_recorder_allowed) {
        response_present.push('video_record')
    }
    var is_save_video_attachment_required = document.getElementById('checkbox-intent-save-video-attachment').checked;

    var is_recommendation_menu = document.getElementById('checkbox-intent-recommendation-menu').checked;
    let is_catalogue_added = document.getElementById('add_catalogue_checkbox').checked;

    try {
        var is_category_intent_allowed = document.getElementById("checkbox-cateogry-intent").checked;
        var flow_analytics_variable = document.getElementById('flow_analytics_variable').value
    } catch (err) { }
    //Order of Response
    var order_of_response_result = check_order_of_response(response_present);

    var is_last_tree = false
    try {
        is_last_tree = document.getElementById("checkbox-last-tree").checked
    } catch (err) { }

    var is_exit_tree = false
    try {
        is_exit_tree = document.getElementById("checkbox-exit-tree").checked
    } catch (err) { }

    var is_transfer_tree = false
    try {
        is_transfer_tree = document.getElementById("checkbox-transfer-tree").checked
    } catch (err) {}

    var necessary_keywords = "None";
    if (document.getElementById("easychat_necessary_keywords")) {
        necessary_keywords = document.getElementById("easychat_necessary_keywords").value.trim();
        if (necessary_keywords != "" && !(/^[a-zA-Z ,]+$/.test(necessary_keywords))) {
            M.toast({
                "html": "Necessary keyword should not contain digits and special characters other than comma."
            }, 2000);
            return;
        }
    }

    var restricted_keywords = "None";
    if (document.getElementById("easychat_restricted_keywords")) {
        restricted_keywords = document.getElementById("easychat_restricted_keywords").value.trim();
        if (restricted_keywords != "" && !(/^[a-zA-Z ,]+$/.test(restricted_keywords))) {
            M.toast({
                "html": "Restricted keyword should not contain digits and special characters other than comma."
            }, 2000);
            return;
        }
    }

    var intent_threshold = "None";
    if (document.getElementById("easychat-intent-threshold")) {
        intent_threshold = document.getElementById("easychat-intent-threshold").value;
    }

    var whatsapp_list_message_header = document.getElementById("whatsapp-list-message-header").value;
    if (whatsapp_list_message_header == "" && selected_channels_list.includes("WhatsApp")) {
        M.toast({
            'html': 'Please enter whatsapp list message header.'
        }, 2000);
        return;
    } else if (whatsapp_list_message_header.length > 20) {
        M.toast({
            'html': 'Whatsapp list message header cannot be greater than 20 characters. Please enter a valid list message header.'
        }, 2000);
        return;
    }
    let intent_short_name = $('#enter_intent_short_name').val().trim();
    if(selected_channels_list.includes("GoogleBusinessMessages")){
        if(intent_short_name.length > 25){
            M.toast({
                "html": "Intent short name cannot more than 25 characters."
            }, 2000);
            return
        }
    }

    if (is_enable_intent_icon) {

        var intent_icon_active_elements = document.getElementsByClassName("easychat-active-intent-icon");

        if (intent_icon_active_elements.length < 1) {
            M.toast({
                'html': 'Please select atleast one intent icon.'
            }, 2000);
            return;
        } else if (intent_icon_active_elements > 1) {
            M.toast({
                'html': 'Please select only one intent icon.'
            }, 2000);
            return;
        } else {
            var intent_icon_unique_id = intent_icon_active_elements[0].getAttribute("icon_unique_id");
        }
    } else {
        var intent_icon_unique_id = "";
    }

    var allow_barge = document.getElementById("checkbox-allow-barge").checked;
    var disposition_code = document.getElementById("disposition_code").value;

    var enable_whatsapp_menu_format = false;
    if (document.getElementById("whatsapp_menu_collapsible") && document.getElementById("whatsapp_menu_collapsible").style.display != 'none') {
        enable_whatsapp_menu_format = document.getElementById("enable_whatsapp_menu_format").checked;
        if (enable_whatsapp_menu_format) {
            var whatsapp_menu_section_cards = document.getElementsByClassName("easychat-whatsapp-menu-item-wrapper");
            if (!whatsapp_menu_section_cards.length) {
                M.toast({
                    "html": "Please add at least one section in menu format"
                }, 2000);
                return;
            }

            var total_options_selected = document.querySelectorAll(".child-tree").length + document.querySelectorAll(".main-intent").length;
            if (total_options_selected < 4) {
                M.toast({
                    "html": "Total quick recommendations and child intents selected in whatsapp chatbot menu should be greater than 3."
                }, 2000);
                return;
            } else if (total_options_selected > 10) {
                M.toast({
                    "html": "Total quick recommendations and child intents selected in whatsapp chatbot menu should be less than 11."
                }, 2000);
                return;
            }
        }
    }

    if (disposition_code.length > 25) {
        M.toast({
            "html": "Disposition code cannot be more than 25 characters."
        }, 2000);
        return;
    }

    disable_save_intent_buttons();


    var whatsapp_short_name = "";
    if (document.getElementById("whatsapp-short-name-input")) {
        whatsapp_short_name = document.getElementById("whatsapp-short-name-input").value;
        if (whatsapp_short_name.length == 0) {
            M.toast({
                "html": "Whatsapp button title cannot be empty."
            }, 2000);
            return;
        }
    }

    var whatsapp_description = "";
    if (document.getElementById("whatsapp-description-input")) {
        whatsapp_description = document.getElementById("whatsapp-description-input").value;
        if (whatsapp_description.length == 0) {
            M.toast({
                "html": "Whatsapp description cannot be empty."
            }, 2000);
            return;
        }
    }

    json_string = JSON.stringify({
        intent_pk: intent_pk,
        intent_name: intent_name,
        intent_short_name:intent_short_name,
        multilingual_name: multilingual_intent_name,
        training_data: training_data_list,
        is_feedback_required: is_feedback_required,
        is_attachment_required: is_attachment_required,
        choosen_file_type: choosen_file_type,
        is_part_of_suggestion_list: is_part_of_suggestion_list,
        is_livechat_enabled: is_livechat_enabled,
        is_authentication_required: is_authentication_required,
        is_small_talk: is_small_talk,
        channel_list: selected_channels_list,
        is_child_intent_visible: is_child_intent_visible,
        selected_bot_pk_list: selected_bot_pk_list,
        response_sentence_list: intent_response_list,
        image_list: image_list,
        video_list: video_list,
        recommended_intent_list: recommended_intent_list,
        child_choices: child_choices,
        card_list: card_list,
        authentication_id: authentication_id,
        validator_id: validator_id,
        table_input_list_of_list: table_input_list_of_list,
        category_obj_pk: category_obj_pk,
        is_automate_recursion_enabled: is_automate_recursion_enabled,
        is_save_attachment_required: is_save_attachment_required,
        is_date_picker_allowed: is_date_picker_allowed,
        is_time_picker_allowed: is_time_picker_allowed,
        is_single_date_picker_allowed: is_single_date_picker_allowed,
        is_multi_date_picker_allowed: is_multi_date_picker_allowed,
        is_single_time_picker_allowed: is_single_time_picker_allowed,
        is_multi_time_picker_allowed: is_multi_time_picker_allowed,
        is_calender_picker_allowed: is_calender_picker_allowed,
        is_single_calender_date_picker_allowed: is_single_calender_date_picker_allowed,
        is_multi_calender_date_picker_allowed: is_multi_calender_date_picker_allowed,
        is_single_calender_time_picker_allowed: is_single_calender_time_picker_allowed,
        is_multi_calender_time_picker_allowed: is_multi_calender_time_picker_allowed,
        is_range_slider_required: is_range_slider_required,
        range_slider_type: range_slider_type,
        minimum_range: minimum_range,
        maximum_range: maximum_range,
        is_radio_button_allowed: is_radio_button_allowed,
        radio_button_choices: radio_choices_list,
        explanation: explanation,
        post_processor_variable: post_processor_variable,
        is_check_box_allowed: is_check_box_allowed,
        checkbox_choices_list: checkbox_choices_list,
        is_drop_down_allowed: is_drop_down_allowed,
        dropdown_choices_list: dropdown_choices_list,
        is_video_recorder_allowed: is_video_recorder_allowed,
        is_save_video_attachment_required: is_save_video_attachment_required,
        is_phone_widget_enabled: is_phone_widget_enabled,
        country_code: country_code,
        is_create_form_allowed: is_create_form_allowed,
        form_name: form_name,
        form_fields_list: form_fields_list,
        is_go_back_enabled: is_go_back_enabled,
        is_recommendation_menu: is_recommendation_menu,
        is_catalogue_added: is_catalogue_added,
        flow_analytics_variable: flow_analytics_variable,
        is_category_intent_allowed: is_category_intent_allowed,
        is_custom_order_selected: order_of_response_result.is_custom_order_selected,
        order_of_response: order_of_response_result.final_order_of_response,
        is_last_tree: is_last_tree,
        is_exit_tree: is_exit_tree,
        is_transfer_tree: is_transfer_tree,
        necessary_keywords: necessary_keywords,
        restricted_keywords: restricted_keywords,
        intent_threshold: intent_threshold,
        whatsapp_list_message_header: whatsapp_list_message_header,
        intent_icon_unique_id: intent_icon_unique_id,
        allow_barge: allow_barge,
        is_faq_intent: is_faq_intent,
        disposition_code: disposition_code,
        enable_whatsapp_menu_format: enable_whatsapp_menu_format,
        whatsapp_short_name: whatsapp_short_name,
        whatsapp_description: whatsapp_description,
    });
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: '/chat/save-intent/',
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            json_string: json_string
        },
        dataType: "json",
        async: false,
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {

                M.toast({
                    'html': "Intent saved successfully!"
                }, 1000);
                setTimeout(function (e) {
                    global_select_intent_id = response["intent_pk"];
                    if (add_other_intent) {

                        window.location = '/chat/create-intent/?bot_pk=' + selected_bot_pk_list[0];
                    } else {
                        window.location = '/chat/edit-intent/?intent_pk=' + global_select_intent_id;
                    }
                }, 1000);
            } else if (response['status'] == 401) {
                M.toast({
                    'html': "Kindly select all the children in child order"
                }, 4000);
                enable_save_intent_buttons();
            } else {
                if (response['status'] == 301) {

                    M.toast({
                        'html': "Intent Name Already Exists"
                    }, 2000);
                } else if (response['status'] == 302) {
                    M.toast({
                        'html': response["status_message"]
                    }, 2000);
                } else if (response['status'] == 303) {
                    M.toast({
                        'html': response["status_message"]
                    }, 2000);
                } else {
                    M.toast({
                        'html': "Unable to save the Intent!"
                    }, 2000);
                }
                enable_save_intent_buttons();
            }
        }
    });
}

function disable_save_intent_buttons() {
    document.getElementById('save-intent').style.pointerEvents = "none";
    document.getElementById('save-intent').style.opacity = "0.5";
    document.getElementById('save-intent-bottom').style.pointerEvents = "none";
    document.getElementById('save-intent-bottom').style.opacity = "0.5";
    document.getElementById('save_add_other_intent').style.pointerEvents = "none";
    document.getElementById('save_add_other_intent').style.opacity = "0.5";
    document.getElementById('save_add_other_intent_bottom').style.pointerEvents = "none";
    document.getElementById('save_add_other_intent_bottom').style.opacity = "0.5";
}

function enable_save_intent_buttons() {
    document.getElementById('save-intent').style.pointerEvents = "auto";
    document.getElementById('save-intent').style.opacity = "1";
    document.getElementById('save-intent-bottom').style.pointerEvents = "auto";
    document.getElementById('save-intent-bottom').style.opacity = "1";
    document.getElementById('save_add_other_intent').style.pointerEvents = "auto";
    document.getElementById('save_add_other_intent').style.opacity = "1";
    document.getElementById('save_add_other_intent_bottom').style.pointerEvents = "auto";
    document.getElementById('save_add_other_intent_bottom').style.opacity = "1";
}


function input_name_mapping(str) {
    if (str == "Text Field")
        return "text_field"
    else if (str == "Dropdown list")
        return "dropdown_list"
    else if (str == "Checkbox")
        return "checkbox"
    else if (str == "Radio Button")
        return "radio"
    else if (str == "Range Slider")
        return "range"
    else if (str == "File Attach")
        return "file_attach"
    else if (str == "Date Picker")
        return "date_picker"
    else if (str == "Time Picker")
        return "time_picker"
    else if (str == "Phone Number")
        return "phone_number"
}

function reverse_input_name_mapping(str) {

    if (str == "text_field")
        return "Text Field"
    else if (str == "dropdown_list")
        return "Dropdown list"
    else if (str == "checkbox")
        return "Checkbox"
    else if (str == "radio")
        return "Radio Button"
    else if (str == "range")
        return "Range Slider"
    else if (str == "file_attach")
        return "File Attach"
    else if (str == "date_picker")
        return "Date Picker"
    else if (str == "time_picker")
        return "Time Picker"
    else if (str == "phone_number")
        return "Phone Number"
}

function validator_mapping(str) {
    if (str == "Choose Validator")
        return "choose_validator"
    else if (str == "6 Digit OTP Validator")
        return "6digitotp_validator"
    else if (str == "4 Digit OTP Validator")
        return "4digitotp_validator"
    else if (str == "Email Validator")
        return "email_validator"
    else if (str == "PAN Validator")
        return "pan_validator"
    else if (str == "Name Validator")
        return "name_validator"
    else if (str == "Mobile Validator")
        return "mobile_validator"
}

function reverse_validator_mapping(str) {
    if (str == "choose_validator")
        return "Choose Validator"
    else if (str == "6digitotp_validator")
        return "6 Digit OTP Validator"
    else if (str == "4digitotp_validator")
        return "4 Digit OTP Validator"
    else if (str == "email_validator")
        return "Email Validator"
    else if (str == "pan_validator")
        return "PAN Validator"
    else if (str == "name_validator")
        return "Name Validator"
    else if (str == "mobile_validator")
        return "Mobile Validator"
}

function check_order_of_response(response_present) {
    var is_custom_order_selected = document.getElementById('custom-order').checked;
    let final_order_of_response = []
    if (!is_custom_order_selected) {
        final_order_of_response = default_order_of_response;
    } else {
        var response_order_elements = document.getElementsByClassName('easychat-intent-response-item');
        var order_of_response = [];
        
        for (el of response_order_elements) {
            order_of_response.push(el.getAttribute("item-name"));
        }
        for (el of order_of_response) {
            if (response_present.includes(el)) {
                final_order_of_response.push(el);
            }
        }
        for (el of response_present) {
            if (!order_of_response.includes(el)) {
                final_order_of_response.push(el);
            }
        }
    }
    return {
        is_custom_order_selected: is_custom_order_selected,
        final_order_of_response: final_order_of_response
    };
}

function render_faq_results() {
    document.getElementById("error_messages").innerHTML = ""
    var selected_bot_pk = get_url_vars()["bot_pk"];
    $.ajax({
        url: "/chat/get-faq-excel-result/",
        type: "GET",
        data: {
            "selected_bot_pk": selected_bot_pk
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {

                document.getElementById("redirect-to-channel").style.display = "block";
            } else if (response["status"] == 305) {

                document.getElementById("error_messages").innerHTML = response["status_message"];
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });

}

function getIntentDetails(bot_filter_list, channel_filter_list) {
    var json_string = JSON.stringify({
        bot_filter_list: bot_filter_list,
        channel_filter_list: channel_filter_list
    });
    json_string = EncryptVariable(json_string);
    $("#manage-intent-preloader").show();
    var json_response = "";
    var response = $.ajax({
        url: '/chat/fetch-all-intents/',
        type: "POST",
        async: false,
        data: {
            data: json_string
        },
        success: function (response) {
            $("#manage-intent-preloader").hide();
            return response;
        }
    }).responseJSON;
    response = custom_decrypt(response)
    response = JSON.parse(response);
    return response;
};

$(document).on("change", "#multiple-select-intent-filter-bot-list", function (e) {
    value = document.getElementById("multiple-select-intent-filter-bot-list").value;
    if (value != "None") {
        let selected_language = get_url_vars()['selected_language']
        if (selected_language == "" || selected_language == undefined || selected_language == null) {
            selected_language = "en";
        }

        window.location = "/chat/intent/?bot_pk=" + value + "&selected_language=" + selected_language;
    }
});

// Render Intent into SideNav
function renderBasicIntentInformation() {
    $("#modify-intent-select-all-checkbox").change(function (e) {
        var status = document.getElementById("modify-intent-select-all-checkbox").checked;
        var inputs = document.getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].id.indexOf('modify-intent-checkbox-') == 0) {
                data_id = inputs[i].id;
                document.getElementById(data_id).checked = status;
            }
        }
    });

    $(document).on("click", "#modify-intent-delete-selected", function (e) {
        var html = getHTMLOfDeleteIntentModal("modify-intent-delete-selected-modal");
        document.getElementById('div-intent-list-modal-container').innerHTML = html
        $(".modal").modal();
        $("#delete-intent-modal").modal();
        $("#delete-intent-modal").modal('open');
    });

    $(".modify-intent-checkbox").change(function (e) {
        var inputs = document.getElementsByTagName("input");
        var all_selected = 1;
        var delete_intent = false;
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].id.indexOf('modify-intent-checkbox-') == 0) {
                data_id = inputs[i].id;
                if (document.getElementById(data_id).checked) {
                    $("#modify-intent-delete-selected").show();
                    delete_intent = true
                } else {
                    all_selected = 0;
                }
            }
        }
        if (all_selected == 1) {
            document.getElementById("modify-intent-select-all-checkbox").checked = true
            return;
        } else if (all_selected == 0) {
            document.getElementById("modify-intent-select-all-checkbox").checked = false
        }

        if (delete_intent == true) {
            return;
        }
        $("#modify-intent-delete-selected").hide();
    });

    // $(document).ready(function() {
    //     $('#intent_info_table').DataTable({
    //         dom: 'Bfrtip',
    //         "pageLength": 200,
    //         "paging": false,
    //         "ordering": false,
    //     });
    // });
}

function do_not_delete_form_assist_tag() {
    $("#delete-tag-modal").modal("close");
}


function delete_form_assist_tag(form_assist_id, bot_id) {
    var json_string = JSON.stringify({
        form_assist_id: form_assist_id,
        bot_id: bot_id
    })
    json_string = EncryptVariable(json_string)

    $.ajax({
        url: '/chat/delete-tag/',
        type: "POST",
        data: {
            json_string: json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Tag deleted successfully"
                }, 2000);
                setTimeout(location.reload(), 2000);
            }
        },
        error: function (error) {

        }
    });
}

function delete_category(category_id, bot_id) {
    var json_string = JSON.stringify({
        category_id: category_id,
        bot_id: bot_id
    })
    json_string = EncryptVariable(json_string)

    $.ajax({
        url: '/chat/delete-category/',
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            json_string: json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Category removed successfully!"
                }, 2000);
                $(".easychat-custom-delete-modal").hide()
                setTimeout(function() {
                    location.reload()
                }, 2000);
            }
        },
        error: function (error) {

        }
    });
}

function save_form_assist_tag(bot_id) {

    var form_assist_tag_id = document.getElementById("form-assist-tag-id").value;
    var form_assist_intent = $("#form-assist-intent").val();
    var form_assist_popup_timer = document.getElementById("form-assist-popup-timer").value;

    if (form_assist_tag_id == "") {
        M.toast({
            "html": "Kindly enter valid tag id"
        }, 2000);
        return;
    } else if (form_assist_intent == "") {
        M.toast({
            "html": "Kindly enter valid intent "
        }, 2000);
        return;
    } else if (form_assist_popup_timer == "") {
        M.toast({
            "html": "Kindly enter valid popup timer "
        }, 2000);
        return;
    }

    if (!(/^\d+$/.test(form_assist_popup_timer))) {
        M.toast({
            "html": "Form assist popup timer should contain only numbers"
        }, 2000);
        return;
    }

    if (parseInt(form_assist_popup_timer) < 0 || parseInt(form_assist_popup_timer) > 300) {
        form_assist_popup_timer = 10;
    }

    document.getElementById('form-assist-tag-save-btn').style.pointerEvents = "none";
    document.getElementById('form-assist-tag-save-btn').style.opacity = "0.5";

    json_string = JSON.stringify({
        bot_id: bot_id,
        form_assist_id: "",
        form_assist_tag_id: form_assist_tag_id,
        form_assist_intent: form_assist_intent,
        form_assist_popup_timer: form_assist_popup_timer
    });

    json_string = EncryptVariable(json_string)

    $.ajax({
        url: '/chat/save-tag/',
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "New Tag Saved Successfully!"
                }, 2000);
                $("#add-new-tag-modal").modal("close");
                setTimeout(location.reload(), 2000);
            } else if (response["status"] == 301) {
                M.toast({
                    "html": "Already Exist!"
                }, 2000);
                $("#add-new-tag-modal").modal("close");
                setTimeout(location.reload(), 2000);
            } else if (response["status"] == 300) {
                M.toast({
                    "html": response["message"]
                }, 2000);
                document.getElementById('form-assist-tag-save-btn').style.pointerEvents = "auto";
                document.getElementById('form-assist-tag-save-btn').style.opacity = "1";
            }
        },
        error: function (error) {
            console.log("Error in Save new Tag");
            document.getElementById('form-assist-tag-save-btn').style.pointerEvents = "auto";
            document.getElementById('form-assist-tag-save-btn').style.opacity = "1";
        }


    });
}


function edit_save_form_assist_tag(bot_id, form_assist_id) {

    var form_assist_tag_id = document.getElementById("form-assist-tag-id-" + form_assist_id).value;
    var form_assist_intent = $("#form-assist-intent-" + form_assist_id).val();
    var form_assist_popup_timer = document.getElementById("form-assist-popup-timer-" + form_assist_id).value;

    if (form_assist_tag_id == "") {
        M.toast({
            "html": "Kindly enter valid tag id"
        }, 2000);
        return;
    } else if (form_assist_intent == "") {
        M.toast({
            "html": "Kindly enter valid Bot Response"
        }, 2000);
        return;
    } else if (form_assist_popup_timer == "") {
        M.toast({
            "html": "Kindly enter valid popup timer "
        }, 2000);
        return;
    }

    if (!(/^\d+$/.test(form_assist_popup_timer))) {
        M.toast({
            "html": "Form assist popup timer should contain only numbers"
        }, 2000);
        return;
    }

    if (parseInt(form_assist_popup_timer) < 0 || parseInt(form_assist_popup_timer) > 300) {
        form_assist_popup_timer = 10;
    }

    json_string = JSON.stringify({
        bot_id: bot_id,
        form_assist_id: form_assist_id,
        form_assist_tag_id: form_assist_tag_id,
        form_assist_intent: form_assist_intent,
        form_assist_popup_timer: form_assist_popup_timer
    });
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: '/chat/edit-tag/',
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Tag Edited Successfully!"
                }, 2000);
                $("#edit-new-tag-modal-" + form_assist_id).modal("close");
                setTimeout(location.reload(), 2000);
            } else if (response["status"] == 301) {
                M.toast({
                    "html": "Already Exists!"
                }, 2000);
                $("#edit-new-tag-modal-" + form_assist_id).modal("close");
                setTimeout(location.reload(), 2000);
            } else if (response["status"] == 300) {
                M.toast({
                    "html": response["message"]
                }, 2000);
            }
        },
        error: function (error) {
            console.log("Error in Save new Tag");
        }


    });
}


function save_category(bot_id, category_id, edit_mode = false) {
    if (edit_mode) {
        var category_name = document.getElementById("category-id-" + category_id).value.trim();
    } else {
        var category_name = document.getElementById("category-id").value.trim();
    }
    if (category_name.trim() == "") {
        M.toast({
            "html": "Kindly enter valid category name"
        }, 2000);
        return;
    }

    if (category_name.length > character_limit_small_text) {
        M.toast({
            "html": "Exceeding character limit of " + character_limit_small_text + " characters"
        }, 2000);
        return;
    }

    let check_emoji_only_string = remove_special_and_emoji_chars(category_name)
    
    if (check_emoji_only_string == '') {
        M.toast({
            "html": "Bot name should have atleast one alphanumeric character."
        }, 2000);
        return;
    }

    json_string = JSON.stringify({
        bot_id: bot_id,
        category_id: category_id,
        category_name: category_name.trim(),
    });

    json_string = EncryptVariable(json_string)

    $.ajax({
        url: '/chat/save-category/',
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                if (edit_mode) {
                    M.toast({
                        "html": "Category edited successfully!"
                    }, 2000);
                }
                else {
                    $("#easychat_language_config_success_toast_container_category").show()
                }
                $("#add-new-category-modal").modal("close");
                setTimeout(function() {
                    location.reload()
                }, 3000);
            } else if (response["status"] == 301) {
                M.toast({
                    "html": "Category Already Exist!"
                }, 2000);
            } else if (response["status"] == 500) {
                M.toast({
                    "html": "Internal Server Error!"
                }, 2000);
            } else {
                M.toast({
                    "html": response.message
                }, 2000);
            }
        },
        error: function (error) { }


    });
}

$(document).on("change", "#select-intent-filter-form-assist-bot-list", function (e) {
    renderBasicFormAssistInformation();
});

function renderBasicFormAssistInformation() {

    var form_assist_bot_id = $("#select-intent-filter-form-assist-bot-list").val();

    if (form_assist_bot_id != "") {
        window.location = "/chat/form-assist/?bot_id=" + form_assist_bot_id;
    } else {
        window.location = "/chat/categories/";
    }

}

$(document).on("change", "#select-intent-filter-category-bot-list", function (e) {
    renderBasicCategoryInformation();
});

function renderBasicCategoryInformation() {

    var category_bot_id = $("#select-intent-filter-category-bot-list").val();

    if (category_bot_id != "")
        window.location = "/chat/categories/?bot_id=" + category_bot_id;

}
$(document).on("change", "#select-lead-generation-bot", function (e) {
    renderBasicLeadGenerationInformation();
});

function renderBasicLeadGenerationInformation() {

    var lead_generation_bot_id = $("#select-lead-generation-bot").val();

    if (lead_generation_bot_id != "")
        window.location = "/chat/lead-generation/?bot_id=" + lead_generation_bot_id;

}

function searchInfo(table_id, number_of_columns) {

    var input, filter, table, tr, td, i;
    input = document.getElementById("global_search");
    filter = input.value.toUpperCase();
    table = document.getElementById(table_id);
    tr = table.getElementsByTagName("tr");
    no_data_shown = true
    for (var i = 1; i < tr.length; i++) {

        var display_status = false;
        for (var j = 0; j < number_of_columns; j++) {
            th = tr[i].getElementsByTagName("td")[j];
            if (th) {
                if (th.innerHTML.toUpperCase().indexOf(filter) > -1) {
                    display_status = true;
                    break;
                }
            }
        }

        if (display_status) {
            tr[i].style.display = "";
            no_data_shown = false
        } else {
            tr[i].style.display = "none";
        }
    }
    if (document.getElementById("pagination_message_history") != null) {
        if (no_data_shown == true) {
            document.getElementById("pagination_message_history").style.display = "none";
        } else {
            document.getElementById("pagination_message_history").style.display = "";
        }
    }
}


function duplicates_exists(arr) {
    let sorted_arr = arr.slice().sort();
    let results = [];
    for (let i = 0; i < sorted_arr.length - 1; i++) {
        if (sorted_arr[i + 1].toString().toLowerCase().replace(/\s/g, '').trim() == sorted_arr[i].toString().toLowerCase().replace(/\s/g, '').trim()) {
            return true;
        }
    }
    return false;
}

function check_duplicates_for_value(value, arr) {
    for (let i = 0; i < arr.length; i++) {
        if (arr[i].toString().toLowerCase().replace(/\s/g, '').trim() == value.toLowerCase().replace(/\s/g, '').trim()) {
            return true;
        }
    }
    return false;
}

async function select_widget(id, check_validations = false) {
    //new code
    if (check_validations) {
        if (id == "div-file-attach-widget") {

            var file_attachment_allowed = document.getElementById("checkbox-intent-attachment").checked
            var choosen_file_type = document.getElementById('choosen_file_type').value;

            if (file_attachment_allowed == false) {
                M.toast({
                    "html": "Please check the attachment required field."
                }, 2000);
                return;

            }

            if (choosen_file_type == "") {

                M.toast({
                    "html": "Please select file type."
                }, 2000);
                return;
            }

            $('#modal-file-attachment').modal('close');

        } else if (id == "div-calender-picker-widget") {
            var is_single_calender_date_picker_allowed = document.getElementById('single-date-picker-radio').checked;
            var is_multi_calender_date_picker_allowed = document.getElementById('custom-date-picker-radio').checked;
            var is_single_calender_time_picker_allowed = document.getElementById('single-time-picker-radio').checked;
            var is_multi_calender_time_picker_allowed = document.getElementById('custom-time-picker-radio').checked;


            var is_calender_date_picker_enabled = document.getElementById('enabledatepicker_switch1').checked
            var is_calender_time_picker_enabled = document.getElementById('enabletimepicker_switch2').checked
            if (is_calender_date_picker_enabled == false && is_calender_time_picker_enabled == false) {
                {
                    M.toast({
                        'html': 'Please select atleast one picker.'
                    }, 2000);
                    return;
                }
            }

            if (is_calender_date_picker_enabled) {
                if ((is_single_calender_date_picker_allowed == false && is_multi_calender_date_picker_allowed == false)) {
                    M.toast({
                        'html': 'Please select atleast one option in date picker.'
                    }, 2000);
                    return;
                }
            }

            if (is_calender_time_picker_enabled) {
                if ((is_single_calender_time_picker_allowed == false && is_multi_calender_time_picker_allowed == false)) {
                    M.toast({
                        'html': 'Please select atleast one option in time picker.'
                    }, 2000);
                    return;
                }
            }

            $('#modal-calender-picker').modal('close');

        } else if (id == "div-radio-button-widget") {
            var radio_choices_list = []
            var inputs = document.getElementsByTagName("input");
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].id.indexOf('radio_button_data_str') == 0) {
                    data_id = "#" + inputs[i].id;
                    radio_choices = $(data_id).val();
                    if (radio_choices != "") {
                        radio_choices_list.push(radio_choices);
                    }
                }
            }
            if (radio_choices_list.length == 0) {
                M.toast({
                    "html": "At least one choice is required."
                }, 2000);
                return;
            }

            $('#modal-radio-button').modal('close');

        } else if (id == "div-check-box-widget") {
            var checkbox_choices_list = []
            var inputs = document.getElementsByTagName("input");
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].id.indexOf('check_box_data_str') == 0) {
                    data_id = "#" + inputs[i].id;
                    checkbox_choices = $(data_id).val();
                    if (checkbox_choices != "") {
                        checkbox_choices_list.push(checkbox_choices);
                    }
                }
            }

            if (checkbox_choices_list.length == 0) {
                M.toast({
                    "html": "At least one choice is required."
                }, 2000);
                return;
            }
            $('#modal-check-box').modal('close');
        }
        else if (id == "div-drop-down-widget") {
            var dropdown_choices_list = []
            var inputs = document.getElementsByTagName("input");
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].id.indexOf('drop_down_data_str') == 0) {
                    data_id = "#" + inputs[i].id;
                    dropdown_choices = $(data_id).val();
                    if (dropdown_choices != "") {
                        dropdown_choices_list.push(dropdown_choices);
                    }
                }
            }
            if (dropdown_choices_list.length == 0) {
                M.toast({
                    "html": "At least one choice is required."
                }, 2000);
                return;
            }

            $('#modal-drop-down').modal('close');
        }
        else if (id == "div-range-slider-widget") {
            var maximum_range = ""
            var minimum_range = ""
            var range_slider_type = ""
            if (document.getElementById('single-range-slider').checked)
                range_slider_type = "single-range-slider";
            else if (document.getElementById('multi-range-slider').checked)
                range_slider_type = "multi-range-slider";
            minimum_range = document.getElementById("range-slider-min-range").value;
            maximum_range = document.getElementById("range-slider-max-range").value;
            minimum_range = parseInt(minimum_range)
            document.getElementById("range-slider-min-range").value = minimum_range
            maximum_range = parseInt(maximum_range)
            document.getElementById("range-slider-max-range").value = maximum_range
            if (range_slider_type == "" || range_slider_type == null || range_slider_type == undefined) {
                M.toast({
                    'html': 'Please select a range slider option.'
                }, 2000);
                return;
            }

            if (/^\d+$/.test(minimum_range) == false || /^\d+$/.test(maximum_range) == false) {
                M.toast({
                    'html': 'Please enter a valid range.'
                }, 2000);
                return;
            }
            if (minimum_range >= maximum_range) {
                M.toast({
                    'html': 'Minimum range should be less than maximum.'
                }, 2000);
                return;
            }

            if (minimum_range >= 9999999999 || maximum_range >= 9999999999) {
                M.toast({
                    'html': 'Range values should be less than 10 digits'
                }, 2000);
                return;
            }
            $('#modal-range-slider').modal('close');
        }
        else if (id == "div-video-recorder-widget") {
            var video_recorder_allowed = document.getElementById("checkbox-intent-video-recorder").checked

            if (video_recorder_allowed == false) {
                M.toast({
                    'html': 'Please check the video recorder'
                }, 2000);
                return;
            }
            $('#modal-video-recorder').modal('close');
        }
        else if (id == "div-phone-number-widget") {
            var country_code_switch = document.getElementById("enablecountrycode_switch").checked
            if (!country_code_switch) {
                M.toast({
                    'html': 'Please enable the country code'
                }, 2000);
                return;
            } 

            $('#modal-phone-num').modal('close');

        } 
        else if (id == "div-create-form-widget") {
            var form_name = ""
            var form_fields_list = [];
            form_name = document.getElementById('form_name').value;
            form_name = strip_unwanted_characters(stripHTML(form_name));
            form_name = form_name.trim();
            if (form_name == '') {
                M.toast({
                    "html": "Please enter a valid form name"
                }, 2000);
                return;
            }

            let fields_present = document.getElementsByClassName('create-form-field');
            if (fields_present.length == 0) {
                M.toast({
                    "html": "Please add atleast one form section"
                }, 2000);
                return;
            }
            await update_form_widget_api_integration_status();
            for (let i = 0; i < fields_present.length; ++i) {
                let field_id = fields_present[i].id;
                let field_div = document.getElementById(field_id);
                let field_id_num = field_id.split('-')[1]

                let label_name, input_type, placeholder_or_options_elem1, placeholder_or_options_elem2, validator, attachment_type, optional, range_type, calendar_type, dependent, dependent_on;
                placeholder_or_options_elem2 = ""

                label_name = document.getElementById('input_name_' + field_id_num + '_1').value;
                label_name = strip_unwanted_characters(stripHTML(label_name));

                input_type = document.getElementById('input_type_' + field_id_num).value
                // input_type = input_name_mapping(input_type)

                placeholder_or_options_elem1 = document.getElementById('input_selected_type_' + field_id_num + '_3').value;
                validator = document.getElementById('validator_' + field_id_num).value;

                // validator = validator_mapping(validator);

                attachment_type = document.getElementById('file_attach_type_' + field_id_num).value;

                range_type = document.getElementById('range_selector_' + field_id_num).value;

                calendar_type = document.getElementById('calendar_selector_type_' + field_id_num).value;

                optional = document.getElementById('optional-toggle-field-' + field_id_num).checked;

                dependent = document.getElementById('dependent-field-' + field_id_num);

                country_code = $("#phone_number_selector_type_" + field_id_num).intlTelInput("getSelectedCountryData").iso2

                if (dependent) {
                    dependent = dependent.checked;
                }

                if (dependent) {
                    dependent_on = document.getElementById('dependent_field_dropdown_' + field_id_num).value;
                }

                if (dependent_on == 'Select Dependency') {
                    M.toast({
                        "html": "Please select a valid dependency"
                    }, 2000);
                    return;
                }

                // let text_elem = placeholder_or_options_elem1;
                // let select_elem = placeholder_or_options_elem2;
                // if (text_elem.tagName == 'SELECT') {
                //     text_elem = placeholder_or_options_elem2;
                //     select_elem = placeholder_or_options_elem1;
                // }

                label_name = label_name.trim();
                if (label_name == "") {
                    M.toast({
                        "html": "Please enter a valid label name"
                    }, 2000);
                    return;
                }

                if (check_if_label_name_exists(field_id_num)) {
                    M.toast({
                        "html": "Duplicate label names are not allowed."
                    }, 2000);
                    return;
                }

                if (input_type == "") {
                    M.toast({
                        "html": "Please enter an input type"
                    }, 2000);
                    return;
                }

                if (dependent && !api_integrated_fields.includes(field_id_num)) {
                    M.toast({
                        "html": "Please integrate API for dependent fields."
                    }, 2000);
                    return;
                }

                let placeholder_or_options = placeholder_or_options_elem1;

                if (input_type == 'file_attach') {
                    placeholder_or_options = attachment_type
                } else {

                    if (input_type == "radio") {

                        placeholder_or_options = form_get_radio_button_list(field_id.split("-")[1])
                        placeholder_or_options = placeholder_or_options.join('$$$')

                    } else if (input_type == "checkbox") {
                        placeholder_or_options = form_get_check_box_list(field_id.split("-")[1])
                        placeholder_or_options = placeholder_or_options.join('$$$')

                    } else if (input_type == "dropdown_list") {
                        placeholder_or_options = form_get_dropdown_list(field_id.split("-")[1])
                        placeholder_or_options = placeholder_or_options.join('$$$')
                    } else if (input_type == "range") {
                        var form_range_slider_min_value = document.getElementById("form-range-slider-min-range-" + field_id.split("-")[1]).value;
                        var form_range_slider_max_value = document.getElementById("form-range-slider-max-range-" + field_id.split("-")[1]).value;
                        placeholder_or_options = form_range_slider_min_value + "-" + form_range_slider_max_value;
                    }
                }

                if (input_type == "text_field" || input_type == "phone_number") {
                    if (placeholder_or_options == "") {
                        M.toast({
                            "html": "Please enter placeholder value"
                        }, 2000);
                        return;
                    }
                } else if (!api_integrated_fields.includes(field_id_num) && input_type == "dropdown_list" && placeholder_or_options == "") {
                    M.toast({
                        "html": "Please enter at least one and valid dropdown option"
                    }, 2000);
                    return;
                } else if (!api_integrated_fields.includes(field_id_num) && input_type == "checkbox" && placeholder_or_options == "") {
                    M.toast({
                        "html": "Please enter at least one and valid checkbox option"
                    }, 2000);
                    return;
                } else if (!api_integrated_fields.includes(field_id_num) && input_type == "radio" && placeholder_or_options == "") {
                    M.toast({
                        "html": "Please enter at least one and valid radio button option"
                    }, 2000);
                    return;
                } else if (input_type == "range") {
                    if (placeholder_or_options.split('-')[0] == "" || placeholder_or_options.split('-')[1] == "") {
                        M.toast({
                            "html": "Please enter a range"
                        }, 2000);
                        return;
                    } else if (placeholder_or_options.split('-').length != 2 || (isNaN(placeholder_or_options.split('-')[0]) || isNaN(placeholder_or_options.split('-')[1]))) {
                        M.toast({
                            "html": "Please enter a valid range"
                        }, 2000);
                        return;
                    } else if (parseInt(placeholder_or_options.split('-')[0]) >= parseInt(placeholder_or_options.split('-')[1])) {
                        M.toast({
                            'html': 'Minimum range should be less than maximum.'
                        }, 2000);
                        return;
                    }
                } else if (input_type == "file_attach" && (placeholder_or_options == undefined || placeholder_or_options == "")) {
                    M.toast({
                        "html": "Please select file type"
                    }, 2000);
                    return;
                }

            }
            $('#modal-create-form').modal('close');
        }

    }

    if (selected_widget != "") {
        $('#' + selected_widget).removeClass("widgetCardSelected")
        $('#' + selected_widget + " .widgetCardPlus").css('visibility', 'hidden')
    }

    selected_widget = id;
    // Deselects and Disables FAQ Intent checkbox if any widget is selected
    if (selected_widget != '') {
        $('#checkbox_faq_intent').prop('checked', false);
        $("#checkbox_faq_intent").attr("disabled", "disabled");
    }
    if (document.getElementById("new_bot_error_div_" + id))
        document.getElementById("new_bot_error_div_" + id).innerHTML = ""

    $('#' + selected_widget).addClass("widgetCardSelected")
    $('#' + selected_widget + " .widgetCardPlus").css('visibility', 'visible')


}

function check_range_slider_validations() {
    var minimum_range = "";
    var maximum_range = "";
    var range_slider_type = "";
    minimum_range = document.getElementById("range-slider-min-range").value;
    maximum_range = document.getElementById("range-slider-max-range").value;
    minimum_range = parseInt(minimum_range)
    maximum_range = parseInt(maximum_range)
    if (document.getElementById('single-range-slider').checked)
        range_slider_type = "single-range-slider";
    else if (document.getElementById('multi-range-slider').checked)
        range_slider_type = "multi-range-slider";
    if (range_slider_type == "" || range_slider_type == null || range_slider_type == undefined) {
        cancel_widget_modal('div-range-slider-widget');
        M.toast({
            'html': 'Please select a range slider option.'
        }, 2000);
        return;
    }

    if (/^\d+$/.test(minimum_range) == false || /^\d+$/.test(maximum_range) == false) {
        cancel_widget_modal('div-range-slider-widget');
        M.toast({
            'html': 'Please enter a valid range.'
        }, 2000);
        return;
    }
    if (minimum_range >= maximum_range) {
        cancel_widget_modal('div-range-slider-widget');
        M.toast({
            'html': 'Minimum range should be less than maximum.'
        }, 2000);
        return;
    }

    if (minimum_range >= 9999999999 || maximum_range >= 9999999999) {
        cancel_widget_modal('div-range-slider-widget');
        M.toast({
            'html': 'Range values should be less than 10 digits'
        }, 2000);
        return;
    }
    $('#modal-range-slider').modal('close');
    select_widget('div-range-slider-widget');
}

function cancel_widget_modal(id) {
    if (document.getElementById("new_bot_error_div_" + id))
        document.getElementById("new_bot_error_div_" + id).innerHTML = ""
    if (selected_widget == id) {
        $('#' + selected_widget).removeClass("widgetCardSelected")
        $('#' + selected_widget + " .widgetCardPlus").css('visibility', 'hidden')
        selected_widget = ""
        if(!is_child_present && !is_quick_recommendation_present) {
            // Enables FAQ Intent checkbox if no widgets are selected and Intent does not have any children
            $("#checkbox_faq_intent").removeAttr("disabled", "disabled"); 
        }
    }


    if (id == 'div-date-picker-widget') {
        document.getElementById("checkbox-intent-date-picker").checked = false;
        document.getElementById("intent-single-date-picker").style.display = "none";
        document.getElementById("intent-multi-date-picker").style.display = "none";
        document.getElementById("checkbox-intent-multi-date-picker").checked = false;
        document.getElementById("checkbox-intent-multi-date-picker").disabled = false;
        document.getElementById("checkbox-intent-single-date-picker").disabled = false;
        document.getElementById("checkbox-intent-single-date-picker").checked = false;
    } else if (id == 'div-time-picker-widget') {
        document.getElementById("checkbox-intent-time-picker").checked = false;
        document.getElementById("intent-single-time-picker").style.display = "none";
        document.getElementById("intent-multi-time-picker").style.display = "none";
        document.getElementById("checkbox-intent-multi-time-picker").disabled = false;
        document.getElementById("checkbox-intent-multi-time-picker").checked = false;
        document.getElementById("checkbox-intent-single-time-picker").disabled = false;
        document.getElementById("checkbox-intent-single-time-picker").checked = false;
    } else if (id == 'div-calender-picker-widget') {

        document.getElementById("enabledatepicker_switch1").checked = false
        document.getElementById("enabletimepicker_switch2").checked = false

        document.querySelector(".single-date").disabled = true;
        document.querySelector(".custom-date").disabled = true;
        document.getElementById('single-date-picker-radio').checked = false
        document.getElementById('custom-date-picker-radio').checked = false

        document.querySelector(".single-time").disabled = true;
        document.querySelector(".custom-time").disabled = true;
        document.getElementById('single-time-picker-radio').checked = false
        document.getElementById('custom-time-picker-radio').checked = false
    } else if (id == 'div-radio-button-widget') {
        document.getElementById("sortable-radio-widget-edit-div").innerHTML = ""
        remove_header('div-radio-button-widget')
    } else if (id == 'div-check-box-widget') {
        document.getElementById("sortable-checkbox-widget-edit-div").innerHTML = ""
        remove_header('div-check-box-widget')
    } else if (id == 'div-drop-down-widget') {
        document.getElementById("sortable-dropdown-widget-edit-div").innerHTML = ""
        remove_header('div-drop-down-widget')
    } else if (id == 'div-video-recorder-widget') {
        document.getElementById("checkbox-intent-video-recorder").checked = false;
        document.getElementById("easychat-save-video-attachment-server").style.display = "none";
        document.getElementById("checkbox-intent-save-video-attachment").checked = false;
    } else if (id == 'div-range-slider-widget') {


    } else if (id == 'div-file-attach-widget') {
        document.getElementById("checkbox-intent-attachment").checked = false;
        document.getElementById("checkbox-intent-save-attachment").checked = false;
        document.getElementById('choosen_file_type').value = ""
        document.getElementById("easychat-attachment-dropdown").style.display = "none";
        document.getElementById("easychat-save-attachment-server").style.display = "none";
    } else if (id == 'div-phone-number-widget') {
        document.getElementById("enablecountrycode_switch").checked = false;
        $('.modal-country-code-wrapper').hide();
    }  
    else if (id == 'div-create-form-widget') {
        $('#create-form-fields').html('')
        $('#create-form-fields').hide()
        $("#form_name").val('')
        $('#form_name').val('')
        $('#sync_preview_modal').html('');
        reset_api_integration('', true)
    }
}

function check_range_slider_div() {
    var single_range_slider = document.getElementById("single-range-slider");
    var multi_range_slider = document.getElementById("multi-range-slider");
    if (single_range_slider.checked || multi_range_slider.checked)
        document.getElementById('range-slider-min-max-value-input-div').style.display = "flex";
    else
        document.getElementById('range-slider-min-max-value-input-div').style.display = "none";
}

// if (window.location.pathname == '/chat/edit-intent/') {

//     if (window.location.href.indexOf("intent_pk=") != -1) {
//         let is_custom_order_selected = document.getElementById('custom-order').checked;
//         $('#easychat_order_of_responses').sortable({
//             containment: "parent",
//         });
//         if (is_custom_order_selected) {
//             let elem = document.getElementById('easychat_order_of_responses');
//             elem.classList.remove('response-order-disabled');
//         } else {
//             $('#easychat_order_of_responses').sortable('disable');
//         }

//         var url_parameters = get_url_vars()
//         // active_url = window.location.href.replace("#", "");
//         // active_url = active_url.replace("!", "");
//         // intent_pk = active_url.substring(active_url.indexOf("intent_pk=") + "intent_pk=".length, );
//         intent_pk = url_parameters["intent_pk"];
//         if (url_parameters["selected_language"] != undefined) {

//             selected_language = url_parameters["selected_language"]
//         }
//         global_select_intent_id = intent_pk;
//         loadTemplateSentences();
//         renderIntentInformationByID(intent_pk);
//         renderTreeStructureByIntentID(intent_pk);
//         var checked_val = document.getElementById("checkbox-intent-attachment").checked
//         if (checked_val) {
//             document.getElementById("easychat-attachment-dropdown").style.display = "table-row";
//             document.getElementById("easychat-save-attachment-server").style.display = "table-row";
//             select_widget('div-file-attach-widget')
//         } else {
//             document.getElementById("easychat-attachment-dropdown").style.display = "none";
//             document.getElementById("easychat-save-attachment-server").style.display = "none";
//         }
//         $(document).ready(generate_table);

//         var video_attachment_val = document.getElementById("checkbox-intent-video-recorder").checked
//         if (video_attachment_val) {
//             document.getElementById("easychat-save-video-attachment-server").style.display = "table-row";
//             select_widget('div-video-recorder-widget')
//         } else {
//             document.getElementById("easychat-save-video-attachment-server").style.display = "none";
//         }

//         var date_checked_val = document.getElementById("checkbox-intent-date-picker").checked
//         if (date_checked_val) {
//             document.getElementById("intent-single-date-picker").style.display = "block";
//             document.getElementById("intent-multi-date-picker").style.display = "block";
//             select_widget('div-date-picker-widget')
//         } else {
//             document.getElementById("intent-single-date-picker").style.display = "none";
//             document.getElementById("intent-multi-date-picker").style.display = "none";
//         }

//         var time_checked_val = document.getElementById("checkbox-intent-time-picker").checked
//         if (time_checked_val) {
//             document.getElementById("intent-single-time-picker").style.display = "block";
//             document.getElementById("intent-multi-time-picker").style.display = "block";
//             select_widget('div-time-picker-widget')
//         } else {
//             document.getElementById("intent-single-time-picker").style.display = "none";
//             document.getElementById("intent-multi-time-picker").style.display = "none";
//         }

//         var calender_checked_val = window.is_calender_picker_allowed
//         if (calender_checked_val == "True") {
//             calendar_initializations()
//             select_widget('div-calender-picker-widget')
//         }

//         var range_checked_val = window.is_range_slider_required;
//         if (range_checked_val == 'True') {
//             select_widget('div-range-slider-widget')
//             document.getElementById('range-slider-min-max-value-input-div').style.display = "flex";
//         } else {
//             document.getElementById('range-slider-min-max-value-input-div').style.display = "none";
//         }

//         var radio_button_val = window.is_radio_btn_allowed

//         if (radio_button_val == 'True') {
//             select_widget('div-radio-button-widget')
//             var values = window.radio_button_choices_values.split("_")
//             if (values != []) {
//                 for (var i = 0; i < values.length; i++) {
//                     value = values[i];
//                     add_radio_button_choices_collection(value)
//                 }
//             }
//         }

//         var check_box_val = window.is_check_box_allowed
//         if (check_box_val == 'True') {
//             select_widget('div-check-box-widget')
//             var values = window.check_box_choices_values.split("_")
//             if (values != []) {
//                 for (var i = 0; i < values.length; i++) {
//                     value = values[i];
//                     add_check_box_choices_collection(value)
//                 }
//             }
//         }

//         var drop_down_val = window.is_drop_down_allowed
//         if (drop_down_val == 'True') {
//             select_widget('div-drop-down-widget')
//             var values = window.drop_down_choices_values.split("_")
//             if (values != []) {
//                 for (var i = 0; i < values.length; i++) {
//                     value = values[i];
//                     add_drop_down_choices_collection(value)
//                 }
//             }
//         }

//         var is_phone_widget_enabled = window.is_phone_widget_enabled
//         if (is_phone_widget_enabled == 'True') {
//             select_widget('div-phone-number-widget')
            
//         }

//         var create_form_val = window.is_create_form_allowed;
//         if (create_form_val == 'True') {
//             let tmp = document.createElement("DIV");
//             tmp.innerHTML = window.initial_form_fields;
//             var json_string = tmp.textContent || tmp.innerText || ""
//             json_string = json_string.replaceAll(`'`, `"`)
//             add_initial_form_sections(JSON.parse(json_string))
//             tmp.remove()
//             document.getElementById('intent-create-form-fields').style.display = "block";
//             select_widget('div-create-form-widget')
//         } else {

//             add_section_in_create_form_modal()

//         }

//         load_order_of_responses();
//     }

//     url_string = window.location.href
//     url = new URL(url_string);
//     sentence_value = url.searchParams.get("val");
//     if (sentence_value != null) {
//         sentence_list = sentence_value.split(',')

//         for (var i = 0; i < sentence_list.length; i++) {
//             value = sentence_list[i]
//             addIntentTrainingDataIntoCollection(value);
//             $("#add_enter_intent_training_data").val("");
//         }
//         // $("#intent_name").val(sentence_list[0])
//         $("#training_sentence_li").addClass('active')
//     }
// }

function calendar_initializations() {

    if (window.is_single_calender_date_picker_allowed == 'True') {

        document.getElementById("enabledatepicker_switch1").checked = true

        document.querySelector(".single-date").disabled = false;
        document.querySelector(".custom-date").disabled = false;
        document.getElementById('single-date-picker-radio').checked = true
        document.getElementById('custom-date-picker-radio').checked = false
    }

    if (window.is_multi_calender_date_picker_allowed == "True") {
        document.getElementById("enabledatepicker_switch1").checked = true

        document.querySelector(".single-date").disabled = false;
        document.querySelector(".custom-date").disabled = false;
        document.getElementById('single-date-picker-radio').checked = false
        document.getElementById('custom-date-picker-radio').checked = true
    }

    if (window.is_single_calender_time_picker_allowed == "True") {
        document.getElementById("enabletimepicker_switch2").checked = true

        document.querySelector(".single-time").disabled = false;
        document.querySelector(".custom-time").disabled = false;
        document.getElementById('single-time-picker-radio').checked = true
        document.getElementById('custom-time-picker-radio').checked = false
    }

    if (window.is_multi_calender_time_picker_allowed == "True") {
        document.getElementById("enabletimepicker_switch2").checked = true

        document.querySelector(".single-time").disabled = false;
        document.querySelector(".custom-time").disabled = false;
        document.getElementById('single-time-picker-radio').checked = false
        document.getElementById('custom-time-picker-radio').checked = true
    }
}

if (window.location.pathname == '/chat/edit-intent-multilingual/') {

    if (window.location.href.indexOf("intent_pk=") != -1) {

        var url_parameters = get_url_vars()
        intent_pk = url_parameters["intent_pk"];
        set_selected_language_based_on_url_param()

        renderIntentInformationByID(intent_pk);
        renderTreeStructureByIntentID(intent_pk);
    }
    let url_selected_language = get_url_vars()['selected_language']
    try {
        if (url_selected_language !== SELECTED_LANGUAGE) {
            window.location = set_url_parameter("selected_language", SELECTED_LANGUAGE)
        }
    } catch (err) {
        console.log(err)
    }

    $(document).ready(function () {
        create_language_custom_dropdowns_for_intent()
        generate_table()
    });
    open_close_language_dropdown_event()
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    add_language_selction_event_for_edit_intent()
}

$(document).on('click', '.delete_intent', function () {

    intent_pk_list = []

    if (this.id == "modify-intent-delete-selected-modal") {

        var inputs = document.getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].id.indexOf('modify-intent-checkbox-') == 0) {
                data_id = inputs[i].id;
                if (document.getElementById(data_id).checked) {
                    intent_pk_list.push(data_id.split("-")[3]);
                    selected_bot_id_modify_intent = data_id.split("-")[4]
                }
            }
        }
        data = window.location.href.split("=")
        // bot_pk = data[1].replace("#", "")
        // bot_pk = bot_pk.replace("!", "")
        // bot_pk = bot_pk.split("&")
        // bot_pk = bot_pk[0]
        let url_parameters = get_url_vars()
        bot_pk = url_parameters['bot_pk']
        var additional_data, intent_type = "";
        try {
            // additional_data = data[2];
            // additional_data = additional_data.split('&');
            // intent_type = additional_data[0];
            intent_type = url_parameters['intent_type']
        } catch (err) {
            intent_type = "";
        }
        var category = "";


        try {
            category = url_parameters['category']
        } catch (err) {
            category = "";
        }
    } else {
        intent_pk = this.id.split("_")[1];
        intent_pk_list.push(intent_pk);
        bot_pk = $("#multiple-select-bot-choice-pk-list").val();
    }
    json_string = JSON.stringify({
        intent_pk_list: intent_pk_list,
        bot_pk: bot_pk,
    });
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: '/chat/delete-intent/',
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            json_string: json_string
        },
        success: function (data) {
            data = custom_decrypt(data)
            data = JSON.parse(data);
            if (data['status'] == 200) {
                if (intents_deleted_count > 1) {
                    M.toast({
                        'html': "Intents deleted successfully!"
                    }, 2000);
                } else {
                    M.toast({
                        'html': "Intent deleted successfully!"
                    }, 2000);
                }

                if (bot_pk != undefined) {
                    setTimeout(function () {
                        let location = '/chat/intent/?bot_pk=' + bot_pk + "&selected_language=en";
                        if (intent_type != undefined && intent_type != "") {
                            location += '&intent_type=' + intent_type;
                        }
                        if (category != undefined && category != "") {
                            location += '&category=' + category;
                        }
                        window.location = location;
                    }, 2000);
                } else {
                    setTimeout(function () {
                        window.location = window.location.href;
                    }, 2000);
                }
            } else {
                M.toast({
                    'html': "Unable to delete the Intent!"
                }, 2000);
            }
        }
    });
});

function capitalize_words(words) {
    var final_capitalized_words = [];
    words = words.split("_");

    for (var i = 0; i < words.length; i++) {
        final_capitalized_words.push(words[i][0].toUpperCase() + words[i].substring(1));
    }

    return final_capitalized_words.join(" ");
}

// function load_order_of_responses() {
//     let response_pk = intent_data['answer_pk']

//     if (response_pk != null) {
//         sentence_list = bot_response_data["response_list"]
//         image_list = bot_response_data["image_list"]
//         video_list = bot_response_data["video_list"]
//         card_list = bot_response_data["card_list"]
//     }
//     let order_div = document.getElementById('easychat_order_of_responses');
//     let drag_img = '<span class="easychat-drag-response"><img src="/static/EasyChatApp/img/dragger.svg"></span>';
//     let response_item;

//     let is_custom_order_selected = document.getElementById('custom-order').checked;
//     if (order_of_response.length == 0 || !is_custom_order_selected) {
//         order_of_response = default_order_of_response

//         if (order_of_response.length == 0) {
//             order_of_response = ['text', 'image', 'table', 'video', 'link_cards', 'intent_level_feedback', 'quick_recommendations', 'drop_down', 'date_picker', 'checkbox', 'radio_button', 'range_slider', 'form', 'time_picker', 'calendar_picker', 'file_attach', 'video_record', 'phone_number'];
//         }
//     }

//     order_div.innerHTML = '';
//     for (element of order_of_response) {
//         response_item = '<div class="easychat-intent-response-item" item-name="' + element + '">' + capitalize_words(element) + drag_img + '</div>';

//         if (element == "image" && image_list.length == 0) {
//             response_item = ''
//         } else if (element == "link_cards" && card_list.length == 0) {
//             response_item = ''
//         } else if (element == "table") {
//             try {
//                 if (table_res == "") {
//                     if (document.getElementById('table_list_of_list'))
//                         table_matrix = document.getElementById('table_list_of_list').innerHTML;
//                     else
//                         table_matrix = document.getElementById('tree_table_list_of_list').innerHTML;
//                     table_matrix = JSON.parse(table_matrix)["items"];
//                     table_res = table_matrix
//                 }
//             } catch (err) {
//                 table_res = null
//             }
//             if (table_res == undefined || table_res == null || table_res == '') {
//                 response_item = ''
//             }
//         } else if (element == "video" && video_list.length == 0) {
//             response_item = ''
//         } else if (element == "quick_recommendations") {
//             let recommended_intent_list = document.getElementById('multiple-select-intent-choice-list').value;
//             if (recommended_intent_list.length == 0) {
//                 response_item = ''
//             }
//         } else if (element == "checkbox") {
//             let is_check_box_allowed = window.is_check_box_allowed
//             if (is_check_box_allowed != 'True') {
//                 response_item = ''
//             }
//         } else if (element == "radio_button") {
//             let is_radio_button_allowed = window.is_radio_btn_allowed
//             radio_choices_list = []
//             if (is_radio_button_allowed != "True") {
//                 response_item = ''
//             }
//         } else if (element == "drop_down") {
//             var is_drop_down_allowed = window.is_drop_down_allowed
//             if (is_drop_down_allowed != "True") {
//                 response_item = ''
//             }
//         } else if (element == "video_record") {
//             let is_video_recorder_allowed = document.getElementById('checkbox-intent-video-recorder').checked;
//             if (!is_video_recorder_allowed) {
//                 response_item = ''
//             }
//         } else if (element == "date_picker") {
//             let is_single_date_picker_allowed = document.getElementById('checkbox-intent-single-date-picker').checked;
//             let is_multi_date_picker_allowed = document.getElementById('checkbox-intent-multi-date-picker').checked;
//             if (!is_single_date_picker_allowed && !is_multi_date_picker_allowed) {
//                 response_item = ''
//             }
//         } else if (element == "time_picker") {
//             let is_single_time_picker_allowed = document.getElementById('checkbox-intent-single-time-picker').checked;
//             let is_multi_time_picker_allowed = document.getElementById('checkbox-intent-multi-time-picker').checked;
//             if (!is_single_time_picker_allowed && !is_multi_time_picker_allowed) {
//                 response_item = ''
//             }
//         } else if (element == "range_slider") {
//             let is_range_slider_required = window.is_range_slider_required;
//             if (is_range_slider_required != "True") {
//                 response_item = ''
//             }
//         } else if (element == "form") {
//             let is_create_form = window.is_create_form_allowed
//             if (is_create_form != "True") {
//                 response_item = '';
//             }
//         } else if (element == "file_attach") {
//             let is_attachment_required = document.getElementById('checkbox-intent-attachment').checked;
//             if (!is_attachment_required) {
//                 response_item = ''
//             }
//         } else if (element == "calendar_picker") {
//             let is_calender_picker_allowed = window.is_calender_picker_allowed;
//             if (is_calender_picker_allowed != "True") {
//                 response_item = ''
//             }
//         } else if (element == "phone_number") {
//             let is_phone_widget_enabled = window.is_phone_widget_enabled;
//             if (is_phone_widget_enabled != "True") {
//                 response_item = ''
//             }
//         } else if (element == "intent_level_feedback") {
//             let is_intent_level_feedback_required = window.is_intent_level_feedback_required;
//             if (is_intent_level_feedback_required != "True") {
//                 response_item = ''
//             }
//         }

//         if (response_item != '') {
//             $(order_div).append(response_item);
//         }
//     }
// }

function switch_default_custom(el) {
    let elem = document.getElementById('easychat_order_of_responses');
    if (el.value == "Default") {
        elem.classList.add('response-order-disabled');
        $('#easychat_order_of_responses').sortable('disable');
    } else {
        elem.classList.remove('response-order-disabled');
        $('#easychat_order_of_responses').sortable('enable');
    }
    load_order_of_responses();
}


function check_enter_pressed(event, elem) {
    if (event.keyCode === 13) {
        var input_type = document.getElementById('input_type_' + elem[0].id.split('_')[3]).value;
        input_type = reverse_input_name_mapping(input_type)
        if (input_type == "Radio Button") {
            value = document.getElementById(elem[0].id).value;
            var format = /[`#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
            if (format.test(value.trim())) {
                document.getElementById("new_bot_error_div_widgets_" + elem[0].id.split('_')[3]).innerHTML = "Invalid choice name(Only A-Z, a-z, 0-9, ?, !, @, & are allowed)"
                return;
            }
            format = /[a-zA-Z0-9]/;
            if (!format.test(value.trim())) {
                document.getElementById("new_bot_error_div_widgets_" + elem[0].id.split('_')[3]).innerHTML = "Invalid choice name(Choice name must contain at least one alphanumeric character)"
                return;
            }
            var radio_button_list = form_get_radio_button_list(elem[0].id.split('_')[3])
            var check_duplicates_list = check_duplicates_for_value(value, radio_button_list)
            if (check_duplicates_list) {
                document.getElementById("new_bot_error_div_widgets_" + elem[0].id.split('_')[3]).innerHTML = "Choice already exists(All choices must be different)"
            } else {
                add_radio_button_choices_collection(value.trim(), "form_", elem[0].id.split('_')[3] + "");
            }
            document.getElementById(elem[0].id).value = "";
        } else if (input_type == "Checkbox") {
            value = document.getElementById(elem[0].id).value;
            var format = /[`#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
            if (format.test(value.trim())) {
                document.getElementById("new_bot_error_div_widgets_" + elem[0].id.split('_')[3]).innerHTML = "Invalid choice name(Only A-Z, a-z, 0-9, ?, !, @, & are allowed)"
                return;
            }
            format = /[a-zA-Z0-9]/;
            if (!format.test(value.trim())) {
                document.getElementById("new_bot_error_div_widgets_" + elem[0].id.split('_')[3]).innerHTML = "Invalid choice name(Choice name must contain at least one alphanumeric character)"
                return;
            }
            var checkbox_list = form_get_check_box_list(elem[0].id.split('_')[3])
            var check_duplicates_list = check_duplicates_for_value(value, checkbox_list)
            if (check_duplicates_list) {
                document.getElementById("new_bot_error_div_widgets_" + elem[0].id.split('_')[3]).innerHTML = "Choice already exists(All choices must be different)"
            } else {
                add_check_box_choices_collection(value.trim(), "form_", elem[0].id.split('_')[3] + "");
            }
            document.getElementById(elem[0].id).value = "";
        } else if (input_type == "Dropdown list") {
            value = document.getElementById(elem[0].id).value;
            var format = /[`#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
            if (format.test(value.trim())) {
                document.getElementById("new_bot_error_div_widgets_" + elem[0].id.split('_')[3]).innerHTML = "Invalid choice name(Only A-Z, a-z, 0-9, ?, !, @, & are allowed)"
                return;
            }
            format = /[a-zA-Z0-9]/;
            if (!format.test(value.trim())) {
                document.getElementById("new_bot_error_div_widgets_" + elem[0].id.split('_')[3]).innerHTML = "Invalid choice name(Choice name must contain at least one alphanumeric character)"
                return;
            }
            var dropdown_list = form_get_dropdown_list(elem[0].id.split('_')[3])
            var check_duplicates_list = check_duplicates_for_value(value, dropdown_list)
            if (check_duplicates_list) {
                document.getElementById("new_bot_error_div_widgets_" + elem[0].id.split('_')[3]).innerHTML = "Choice already exists(All choices must be different)"
            } else {
                form_add_dropdown_chip(value.trim(), "form_", elem[0].id.split('_')[3] + "");
            }
            document.getElementById(elem[0].id).value = "";
        }
    }
}

function add_initial_form_sections(form_fields_list) {
    $(document).ready(function () {
        $('.easychat-form-widget-dropdown-wrapper').select2({
            dropdownParent: $('#modal-create-form')
        });
    });

    var last_form_field_id
    let intent_pk = get_url_vars()["intent_pk"];
    let form_obj = {}

    for (var i = 0; i < form_fields_list.length; i++) {
        last_form_field_id = i

        var label_name = form_fields_list[i]["label_name"]
        var placeholder_or_options = form_fields_list[i]["placeholder_or_options"]
        var country_code = form_fields_list[i]["country_code"]

        var input_type = form_fields_list[i]["input_type"]

        var optional = form_fields_list[i]["optional"]
        if (optional == 'true')
            optional = true
        else
            optional = false

        var dependent = form_fields_list[i]["is_dependent"]

        var dependent_on;

        if (dependent == "true") {
            dependent_on = form_fields_list[i]["dependent_on"]
            dependent = true
        } else {
            dependent = false
        }

        var range_type = form_fields_list[i]["range_type"]

        var calendar_type = form_fields_list[i]["calendar_type"]

        var validator = form_fields_list[i]["validator"]

        let id;
        if (form_fields_list[i]["field_id_num"]) {
            id = form_fields_list[i]["field_id_num"]
        } else {
            id = generate_random_string(5)
        }

        let is_dependent_field_required = true;

        if (input_type == 'date_picker' || input_type == 'file_attach' || input_type == 'time_picker') {
            is_dependent_field_required = false;
        }

        let new_form_field = '<div class="create-form-field" id="field-' + id + '">\
                                <div class="open-form-field" id="opened_form_div_'+ id + '">\
                                                        <div style="float: right;">\
                                                            <a class="easychat-form-widget-individual-form-save-btn" id="minimize_btn_'+ id + '" onclick="minimize_form_field_div(this)">\
                                                                <svg width="18" height="19" viewBox="0 0 18 19" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                                    <path d="M9.0001 6.03638C9.30569 6.036 9.59664 6.16726 9.7986 6.3966L14.3296 11.546C14.5393 11.7735 14.6094 12.0969 14.5126 12.3908C14.4158 12.6848 14.1674 12.9032 13.8635 12.9617C13.5596 13.0202 13.2479 12.9094 13.0489 12.6724L9.08693 8.16956C9.065 8.14455 9.03336 8.1302 9.0001 8.1302C8.96684 8.1302 8.9352 8.14455 8.91328 8.16956L4.95127 12.6733C4.75234 12.9104 4.44061 13.0211 4.1367 12.9626C3.83279 12.9042 3.58439 12.6857 3.48762 12.3917C3.39084 12.0978 3.46088 11.7745 3.67062 11.5469L8.20022 6.39845C8.40252 6.16855 8.69387 6.03667 9.0001 6.03638Z" fill="#7B7A7B"/>\
                                                                    <mask id="mask0_76_322" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="3" y="6" width="12" height="7">\
                                                                    <path d="M9.0001 6.03638C9.30569 6.036 9.59664 6.16726 9.7986 6.3966L14.3296 11.546C14.5393 11.7735 14.6094 12.0969 14.5126 12.3908C14.4158 12.6848 14.1674 12.9032 13.8635 12.9617C13.5596 13.0202 13.2479 12.9094 13.0489 12.6724L9.08693 8.16956C9.065 8.14455 9.03336 8.1302 9.0001 8.1302C8.96684 8.1302 8.9352 8.14455 8.91328 8.16956L4.95127 12.6733C4.75234 12.9104 4.44061 13.0211 4.1367 12.9626C3.83279 12.9042 3.58439 12.6857 3.48762 12.3917C3.39084 12.0978 3.46088 11.7745 3.67062 11.5469L8.20022 6.39845C8.40252 6.16855 8.69387 6.03667 9.0001 6.03638Z" fill="white"/>\
                                                                    </mask>\
                                                                    <g mask="url(#mask0_76_322)">\
                                                                    </g>\
                                                                    </svg>\
                                                            </a>\
                                                            <div class="create-form-div-remove" id="remove-create-form-div-'+ id + '" onclick="remove_create_form_div(this)"> <svg width="11" height="10" viewBox="0 0 11 10" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                                <path d="M11 1.23576L9.64067 0L5.5 3.76424L1.35933 0L0 1.23576L4.14067 5L0 8.76424L1.35933 10L5.5 6.23576L9.64067 10L11 8.76424L6.85933 5L11 1.23576Z" fill="#757575"></path> </svg>\
                                                            </div>\
                                                        </div>\
                                                        <div class="input-field-custom">\
                                                            <label for="label_name_' + id + '_1" id="label_name_' + id + '_1">Label Name<span style="color: red;">*</span></label>\
                                                            <input class="label-name edit-intent-common-primary-input" id="input_name_' + id + '_1" onblur="form_label_field_changed(this)" type="text" maxlength="' + character_limit_small_text + '" placeholder="Eg: Account details" value="' + label_name + '" >\
                                                            <div class="form-widget-label-name-error-message" id="label_name_error_msg_' + id + '" style="display: none;">\
                                                                Label name already exists. Please try another.\
                                                            </div>\
                                                        </div>\
                                                        <div class="input-field-custom">\
                                                            <label for="label_name_' + id + '_2">Input type<span style="color: red;">*</span></label>\
                                                            <select class="easychat-form-widget-dropdown-wrapper" id=input_type_' + id + '>\
                                                                    <option value="text_field">Text Field</option>\
                                                                    <option value="dropdown_list">Dropdown list</option>\
                                                                    <option value="checkbox">Checkbox</option>\
                                                                    <option value="radio">Radio Button</option>\
                                                                    <option value="range">Range Slider</option>\
                                                                    <option value="file_attach">File Attach</option>\
                                                                    <option value="date_picker">Date Picker</option>\
                                                                    <option value="time_picker">Time Picker</option>\
                                                                    <option value="phone_number">Phone Number</option>\
                                                            </select>\
                                                            <div class="col s12" id="validator_dropdown_' + id + '" style=" padding: 0px !important; margin-top: 16px; ">\
                                                                <select class="easychat-form-widget-dropdown-wrapper" id="validator_' + id + '">\
                                                                        <option value="choose_validator">Choose Validator</option>\
                                                                        <option value="6digitotp_validator">6 Digit OTP Validator</option>\
                                                                        <option value="4digitotp_validator">4 Digit OTP Validator</option>\
                                                                        <option value="email_validator">Email Validator</option>\
                                                                        <option value="pan_validator">PAN Validator</option>\
                                                                        <option value="name_validator">Name Validator</option>\
                                                                        <option value="mobile_validator">Mobile Validator</option>\
                                                                </select>\
                                                            </div>\
                                                            <div class="col s12" id="file_attach_' + id + '"  style="display: none;padding: 0px !important; margin-top: 16px; ">\
                                                                <select class="easychat-form-widget-dropdown-wrapper" id="file_attach_type_' + id + '">\
                                                                    <option value="image(ex. .jpeg, .png, .jpg)">image(ex. .jpeg, .png, .jpg)</span>\
                                                                    <option value="video file(ex. .mp4)">video file(ex. .mp4)</span>\
                                                                    <option value="word processor(i.e. .doc,.pdf)">word processor(i.e. .doc,.pdf)</span>\
                                                                    <option value="compressed file(ex. .zip)">compressed file(ex. .zip)</span>\
                                                                </select>\
                                                            </div>\
                                                            <div class="col s12" id="range_type_' + id + '" style="display: none; padding: 0px !important; margin-top: 16px; ">\
                                                                <select class="easychat-form-widget-dropdown-wrapper" id="range_selector_' + id + '">\
                                                                    <option value="Single Range Selector">Single Range Selector</span>\
                                                                    <option value="Dual Range Selector">Dual Range Selector</span>\
                                                                </select>\
                                                            </div>\
                                                            <div class="col s12" id="calendar_type_' + id + '" style="display: none; padding: 0px !important; margin-top: 16px; ">\
                                                            <select class="easychat-form-widget-dropdown-wrapper" id="calendar_selector_type_' + id + '">\
                                                                <option value="Single Type">Single Type</span>\
                                                                <option value="Custom Type">Custom Type</span>\
                                                            </select>\
                                                            </div>\
                                                            \
\
                                                            <div class="col s12" id="phone_number_type_' + id + '" style="display: none; padding: 0px !important; margin-top: 16px; ">\
                                                            <label for="label_name_dP2mz_2">Default Country Code\
                                                                <span style="color: red;">*</span>\
                                                            </label>\
                                                            <input type="tel" placeholder="" style="visibility:hidden !important;" id="phone_number_selector_type_' + id + '" >\
                                                            </div>\
\
\
                                                            <div class=" col s12 response-widget-dragable-output-div sortable-radio-widget-edit-div" style="display: none;" id="sortable-radio-widget-edit-div-' + id + '">\
                                                            </div>\
                                                            <div class=" col s12 response-widget-dragable-output-div sortable-checkbox-widget-edit-div" style="display: none;" id="sortable-checkbox-widget-edit-div-' + id + '">\
                                                            </div>\
                                                            <div class="form-widget-dropdown-area sortable-radio-widget-edit-div" style="display: none;" id="sortable-dropdown-widget-edit-div-' + id + '">\
                                                            </div>\
                                                            <div class="form-widget-range-slidervalue-holder-contaainer" id="form-widget-range-slider-min-max-container' + id + '" style="display: none;">\
                                                            <div class="range-slider-min-max-value-div">\
                                                            <div class="form-widget-slider-heading-div">\
                                                            Enter Value\
                                                            </div>\
                                                            <div class="form-widget-slider-min-max-value-area">\
                                                            <div class="range-slider-min-value-input">\
                                                            <input type="number" id="form-range-slider-min-range-' + id + '" placeholder="Enter Value" autocomplete="off">\
                                                            <p>Min range</p>\
                                                            </div>\
                                                            <svg style="margin: 27px 10px 0px 10px;" width="9" height="1" viewBox="0 0 9 1" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                            <path d="M0 0.5H9" stroke="#8F8F8F"/>\
                                                            </svg>\
                                                            <div class="range-slider-max-value-input">\
                                                            <input type="number" id="form-range-slider-max-range-' + id + '" placeholder="Enter Value" autocomplete="off">\
                                                            <p>Max range</p>\
                                                            </div>\
                                                            </div>\
                                                            </div>\
                                                            </div>\
                                                        </div>\
                                                        <div class="input-field-custom">\
                                            <p style="color: red;" id="new_bot_error_div_widgets_' + id + '"></p>\
                                                            <input class = "input_selected_type_3 edit-intent-common-primary-input" onblur="form_placeholder_field_changed(this)" id="input_selected_type_' + id + '_3" maxlength="' + character_limit_small_text + '" type="text" placeholder="Placeholder text" style="margin-top:12px !important">\
                                                        </div>'+ get_dependent_field_div(id, is_dependent_field_required) + '\
                                                        <div class="form-field-footer">\
                                                            <div style="display: flex; align-items: center; column-gap: 10px;">\
                                                                <a id="reset_values_'+ id + '" class="form-widget-individual-reset-btn" onclick="reset_api_integration(`' + id + '`, false, true)">Reset</a>\
                                                                <div class="optional-btn" style="font-weight: 300; font-size: 12px; position: relative; left: -4px;"> <span>Optional</span> <input type="checkbox" id="optional-toggle-field-'+ id + '"><label style="margin-left: 5px; height: 13px;" for="optional-toggle-field-' + id + '">Toggle</label> </div>\
                                                            </div>\
                                                            <div>\
                                                                <div class="form-widget-individual-api-integration-text" id="api_integration_status_' + id + '" style="display: none;">API Integration - <span style="color: green;">Active</span> </div>\
                                                            </div>\
                                                            <div>\
                                                            <a href="/chat/field-processor/?processor=field&bot_pk=' + SELECTED_BOT_PK + '&field_id=' + id + '" class="form-widget-individual-integrate-api-btn" target="_blank" id="api_integration_link_' + id + '">Integrate API</a>\
                                                            </div>\
                                                        </div></div>\
                                                        <div class="create-form-field-data-saved-div" id="saved_data_div_'+ id + '" style="display: none;">\
                                                            <div class="drag-icon ui-sortable-handle">\
                                                                <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                                <path d="M6.5 6C7.32843 6 8 5.32843 8 4.5C8 3.67157 7.32843 3 6.5 3C5.67157 3 5 3.67157 5 4.5C5 5.32843 5.67157 6 6.5 6Z" fill="#7B7A7B"/>\
                                                                <path d="M6.5 11C7.32843 11 8 10.3284 8 9.5C8 8.67157 7.32843 8 6.5 8C5.67157 8 5 8.67157 5 9.5C5 10.3284 5.67157 11 6.5 11Z" fill="#7B7A7B"/>\
                                                                <path d="M8 14.5C8 15.3284 7.32843 16 6.5 16C5.67157 16 5 15.3284 5 14.5C5 13.6716 5.67157 13 6.5 13C7.32843 13 8 13.6716 8 14.5Z" fill="#7B7A7B"/>\
                                                                <path d="M13.5 6C14.3284 6 15 5.32843 15 4.5C15 3.67157 14.3284 3 13.5 3C12.6716 3 12 3.67157 12 4.5C12 5.32843 12.6716 6 13.5 6Z" fill="#7B7A7B"/>\
                                                                <path d="M15 9.5C15 10.3284 14.3284 11 13.5 11C12.6716 11 12 10.3284 12 9.5C12 8.67157 12.6716 8 13.5 8C14.3284 8 15 8.67157 15 9.5Z" fill="#7B7A7B"/>\
                                                                <path d="M13.5 16C14.3284 16 15 15.3284 15 14.5C15 13.6716 14.3284 13 13.5 13C12.6716 13 12 13.6716 12 14.5C12 15.3284 12.6716 16 13.5 16Z" fill="#7B7A7B"/>\
                                                                </svg>\
                                                            </div>\
                                                            <div class="create-form-field-data-div-wrapper">\
                                                                <div class="create-form-field-data-saved-div-label-name" id="saved_full_name_'+ id + '">Full Name</div>\
                                                                <div class="create-form-field-data-saved-div-input-type" id="saved_input_type_'+ id + '">Input Type - <span>Text Field</span></div>\
                                                                <div class="create-form-field-data-saved-div-validator" id="saved_validator_'+ id + '"><span>Name</span> Validator</div>\
                                                                <div class="create-form-field-data-saved-div-api-status" id="saved_api_status_'+ id + '">API Integration - <span style="color:green">Active</span></div>\
                                                                <div class="create-form-field-data-saved-div-dependent-value" id="saved_dependency_'+ id + '">\
                                                                    <svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                                        <path d="M9.75 4.5H10.2662C12.3292 4.5 14 6.17984 14 8.25C14 10.2534 12.4353 11.8912 10.4706 11.9948L10.2729 12L9.75667 12.0046C9.34247 12.0082 9.00371 11.6755 8.99997 11.2613C8.99665 10.8816 9.276 10.5653 9.64162 10.5124L9.74333 10.5046L10.2662 10.5C11.499 10.5 12.5 9.49355 12.5 8.25C12.5 7.05827 11.5807 6.08428 10.419 6.00519L10.2662 6H9.75C9.33579 6 8.99997 5.66421 8.99997 5.25C8.99997 4.8703 9.28215 4.55651 9.64823 4.50685L9.75 4.5H10.2662H9.75ZM5.7523 4.5H6.25C6.66421 4.5 7 4.83579 7 5.25C7 5.6297 6.71785 5.94349 6.35177 5.99315L6.25 6H5.7523C4.50839 6 3.5 7.00839 3.5 8.2523C3.5 9.44437 4.42611 10.4201 5.59809 10.4994L5.7523 10.5046H6.25C6.66421 10.5046 7 10.8404 7 11.2546C7 11.6343 6.71785 11.9481 6.35177 11.9977L6.25 12.0046H5.7523C3.67996 12.0046 2 10.3246 2 8.2523C2 6.24681 3.57332 4.60879 5.55302 4.5052L5.7523 4.5H6.25H5.7523ZM5.75 7.5H10.25C10.6642 7.5 11 7.83579 11 8.25C11 8.6297 10.7178 8.94349 10.3518 8.99315L10.25 9H5.75C5.33579 9 5 8.66421 5 8.25C5 7.8703 5.28215 7.55651 5.64823 7.50685L5.75 7.5H10.25H5.75Z" fill="#2741FA"/>\
                                                                        </svg><span id="saved_dependency_name_'+ id + '">Full Name\
                                                                    </span>\
                                                                </div>\
                                                            </div>\
                                                            <a id="maximize_btn_'+ id + '" class="create-form-field-data-div-wrapper-edit-icon" onclick="maximize_form_field_div(this)">\
                                                                <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                                <path d="M8.50525 5.60684L4.04384 10.0693C3.80447 10.3087 3.50454 10.4785 3.17613 10.5606L1.4645 10.9885C1.19091 11.0569 0.943097 10.8091 1.01149 10.5355L1.4394 8.82387C1.52151 8.49546 1.69132 8.19553 1.93069 7.95616L6.3921 3.49369L8.50525 5.60684ZM9.56235 2.43765C10.1459 3.02118 10.1459 3.96727 9.56235 4.5508L9.03354 5.07856L6.92039 2.96541L7.4492 2.43765C8.03273 1.85412 8.97882 1.85412 9.56235 2.43765Z" fill="#7B7A7B"/>\
                                                                </svg>\
                                                            </a>\
                                                        </div>\
                                                    </div>'

        $('#create-form-fields').append(new_form_field);
        $("#create-form-fields").show()
        document.getElementById("input_type_" + id).value = input_type

        $(document).on("change", "#input_type_" + id, function() {
            if (["file_attach", "date_picker", "time_picker"].includes($("#input_type_" + id).val())) {
                $("#saved_api_status_"+ id).hide()
            } else {
                $("#saved_api_status_"+ id).show()
            }
        })

        $("#input_type_" + id).trigger("change")

        input_type = reverse_input_name_mapping(input_type)

        document.getElementById("optional-toggle-field-" + id).checked = optional
        let dependent_field_div = document.getElementById("dependent-field-" + id)
        if (dependent_field_div) {
            dependent_field_div.checked = dependent
        }
        if (dependent) {
            document.getElementById('dependent_dropdown_div_' + id).style.display = 'block';
            $('#dependent_field_dropdown_' + id).append('<option value="' + dependent_on + '" selected>' + form_fields_list[i]["dependent_on_label_name"] + '</option>');
        }

        if (input_type == "Text Field") {
            document.getElementById("validator_" + id).style.display = "block"
            document.getElementById('input_selected_type_' + id + '_3').value = placeholder_or_options
            document.getElementById("validator_" + id).value = validator
            document.getElementById('input_selected_type_' + id + '_3').placeholder = "Placeholder text"

        } else {
            //not input
            document.getElementById('validator_dropdown_' + id).style.display = 'none';

            if (input_type == "Radio Button") {
                var choices = placeholder_or_options.split('$$$')
                choices.forEach(choice => add_radio_button_choices_collection(choice, "form_", id + ""));
                document.getElementById('input_selected_type_' + id + '_3').style.display = "inline-block"
                document.getElementById("sortable-radio-widget-edit-div-" + id).style.display = "block"
                document.getElementById('input_selected_type_' + id + '_3').value = "";
                document.getElementById('input_selected_type_' + id + '_3').placeholder = "Enter any value or text and hit \"Enter\""

            } else {


                if (input_type == "Checkbox") {

                    document.getElementById("sortable-checkbox-widget-edit-div-" + id).style.display = "block"
                    var choices = placeholder_or_options.split('$$$')
                    choices.forEach(choice => add_check_box_choices_collection(choice, "form_", id + ""));
                    document.getElementById('input_selected_type_' + id + '_3').style.display = "inline-block"
                    document.getElementById('input_selected_type_' + id + '_3').value = "";
                    document.getElementById('input_selected_type_' + id + '_3').placeholder = "Enter any value or text and hit \"Enter\""



                } else {
                    if (input_type == "Dropdown list") {
                        document.getElementById("sortable-dropdown-widget-edit-div-" + id).style.display = "block"
                        var choices = placeholder_or_options.split('$$$')
                        choices.forEach(choice => form_add_dropdown_chip(choice, "form_", id + ""));
                        document.getElementById('input_selected_type_' + id + '_3').style.display = "inline-block"
                        document.getElementById('input_selected_type_' + id + '_3').value = "";
                        document.getElementById('input_selected_type_' + id + '_3').placeholder = "Enter any value or text and hit \"Enter\""
                    } else {

                        if (input_type == "File Attach") {
                            document.getElementById('input_selected_type_' + id + '_3').style.display = "block"
                            document.getElementById('input_selected_type_' + id + '_3').style.visibility = "hidden"
                            document.getElementById('file_attach_' + id).style.display = "block"
                            document.getElementById('file_attach_type_' + id).value = placeholder_or_options
                            $('#file_attach_type_' + id).change()
                            if (document.getElementById('api_integration_link_' + id)) {
                                document.getElementById('api_integration_link_' + id).style.display = "none"
                            }

                        } else {

                            if (input_type == "Range Slider") {
                                document.getElementById('input_selected_type_' + id + '_3').style.display = "none";
                                document.getElementById('form-widget-range-slider-min-max-container' + id).style.display = "block";
                                document.getElementById('range_type_' + id).style.display = "block"
                                var form_range_slider_min_value = placeholder_or_options.split('-')[0]
                                var form_range_slider_max_value = placeholder_or_options.split('-')[1]
                                document.getElementById('range_selector_' + id).value = range_type
                                document.getElementById('form-range-slider-min-range-' + id).value = form_range_slider_min_value;
                                document.getElementById('form-range-slider-max-range-' + id).value = form_range_slider_max_value;
                            } else {
                                if (input_type == "Date Picker" || input_type == "Time Picker") {
                                    document.getElementById('input_selected_type_' + id + '_3').style.display = "block";
                                    document.getElementById('input_selected_type_' + id + '_3').style.visibility = "hidden";
                                    document.getElementById('calendar_type_' + id).style.display = "block"
                                    document.getElementById('calendar_selector_type_' + id).value = calendar_type;
                                    if (document.getElementById('api_integration_link_' + id)) {
                                        document.getElementById('api_integration_link_' + id).style.display = "none"
                                    }
                                } else {
                                    if (input_type == "Phone Number") {
                                        document.getElementById('input_selected_type_' + id + '_3').value = placeholder_or_options
                                        document.getElementById('input_selected_type_' + id + '_3').style.display = "block"  
                                        document.getElementById('phone_number_type_' + id).style.display = "block"
                                        document.getElementById('input_selected_type_' + id + '_3').placeholder = "Placeholder text"
                      
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        if (input_type == "Phone Number") {
            initialize_phone_number_selector_console("phone_number_selector_type_" + id, country_code, id)    
        } else {
            initialize_phone_number_selector_console("phone_number_selector_type_" + id, "in", id)    
        }
        // create_custom_dropdowns_form_widgets("field-" + id, id, input_type, validator, placeholder_or_options,range_type,calendar_type)
        // create_custom_dropdowns("field-"+last_form_field_id, last_form_field_id, input_type, validator)
        $('#input_selected_type_' + id + '_3').keyup(function (event) {
            check_enter_pressed(event, $(this))
        });
        $('#input_name_' + id + '_1').focusout(function () {
            check_if_label_name_exists(id)
        });
        var className = "field-" + last_form_field_id

        last_form_field_id++;
        $('.easychat-form-widget-dropdown-wrapper').select2().on('select2:open', function (e) {
            $('.select2-search__field').attr('placeholder', 'Search here');
        });
        $('#input_type_' + id).select2().on('select2:close', function (e) {
            add_input_type_field(id);
        });
        $('#input_type_' + id).select2().on('select2:open', function(e) {
            $('.select2-search__field').attr('placeholder', 'Search here');
        });
        $("#dependent-field-" + id).on("change", function (event) {
            if (this.checked) {
                $("#dependent_dropdown_div_" + id).show();

            } else {
                $("#dependent_dropdown_div_" + id).hide();
            }
        });
        $('#dependent_field_dropdown_' + id).select2().on('select2:open', function (e) {
            let fields = document.querySelectorAll(".label-name");
            $('#dependent_field_dropdown_' + id).children().remove();
            $('#dependent_field_dropdown_' + id).append('<option value="Select Dependency">Select Dependency</option>');
            for (let i = 0; i < fields.length; i++) {
                let label_name = fields[i].value;
                let label_id = fields[i].id.split('_')[2]
                let label_input_type = $('#input_type_' + label_id).val()
                if (label_input_type == 'file_attach' || label_input_type == 'date_picker' || label_input_type == 'time_picker') continue;
                if (label_id == id) break;
                $('#dependent_field_dropdown_' + id).append('<option value="' + label_id + '">' + label_name + '</option>');
            }
        });
        form_obj[i+1] = form_fields_list[id]
    }
    $('.tooltipped').tooltip();
    update_form_widget_api_integration_status(true);
}


function sanitize_special_characters(elem, toast_msg) {

    var format = /[`@#$%^*()_+\-=\[\]{};':"\\|,<>\/~]/;

    if (format.test(elem.value)) {

        M.toast({
            "html": toast_msg
        });
        elem.value = ""
        return;
    }
}

function sanitize_special_characters_from_text(text, toast_msg) {

    var format = /[`@#$%^*()_+\-=\[\]{};':"\\|,<>\/~]/;

    if (format.test(text)) {

        M.toast({
            "html": toast_msg
        });
        return false;
    }
    else {
        return true
    }
}

function form_label_field_changed(elem) {

    var format = /[`@#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;

    if (format.test(elem.value)) {

        M.toast({
            "html": "Form label can't contain special characters"
        });
        elem.value = ""
        return;
    }
}

function form_placeholder_field_changed(elem) {

    var format = /[`@#$%^*_+=\[\]{};':"\\|,.<>\/~]/;

    if (format.test(elem.value)) {

        M.toast({
            "html": "Form placeholder can contain only alphabets, numerics, (, ) and -"
        });
        elem.value = ""
        return;
    }
}

function initialize_phone_number_selector_console(id, country_code, form_field_id) {
    $("#" + id).intlTelInput({
        initialCountry: country_code,
    
        allowExtensions: true,
        formatOnDisplay: true,
        autoFormat: true,
        autoHideDialCode: true,
        autoPlaceholder: true,
        // defaultCountry: "auto",
        ipinfoToken: "yolo",
        nationalMode: false,
        numberType: "MOBILE",
        //onlyCountries: ['us', 'gb', 'ch', 'ca', 'do'],
        preferredCountries: ['in', 'ae', 'qa', 'om', 'bh', 'kw', 'ma'],
        preventInvalidNumbers: true,
        separateDialCode: true,
    });

    if ($("#searchinput_country_" + form_field_id).length == 0){ 
        if (id.indexOf("telephone") != -1) {
            $("#telephone-preview-wrapper-" + form_field_id + " .country-list").prepend("<input autocomplete='off' id='searchinput_country_" + form_field_id + "' style='width: 100% !important; border-bottom: none !important; box-shadow: none !important;' placeholder='Search..'  type='text' class='search_phone_number_widget_class' onkeydown='filterFunction(event, this, \"telephone-preview-wrapper-" + form_field_id + " \")' data-search />");
            $("#telephone-preview-wrapper-" + form_field_id + ".country-list").append("<div class='country-no-result-found' id='country_no_result_found_modal_" + form_field_id + "\'>No Result Found</div>");
            
            $("#searchinput_country_" + form_field_id).click(function(event) {
                event.stopPropagation();
                $("#telephone-preview-wrapper-" + form_field_id + " .country-list").addClass("show");
            });
        } else {
            $("#phone_number_type_" + form_field_id + " .country-list").prepend("<input autocomplete='off' id='searchinput_country_" + form_field_id + "' style='width: 100% !important; border-bottom: none !important; box-shadow: none !important;' placeholder='Search..'  type='text' class='search_phone_number_widget_class' onkeydown='filterFunction(event, this, \"phone_number_type_" + form_field_id + " \")' data-search />");
            $("#phone_number_type_" + form_field_id + " .country-list").append("<div class='country-no-result-found' id='country_no_result_found_modal_" + form_field_id + "\'>No Result Found</div>");
            
            $("#searchinput_country_" + form_field_id).click(function(event) {
                event.stopPropagation();
                $("#phone_number_type_" + form_field_id + " .country-list").addClass("show");
            });
        }

        
      }

}

function filterFunction(event, ele, wrapper_id) {
    var input, filter, ul, a, i;
    input = ele;
    a = document.querySelectorAll("#" + wrapper_id + " .country");
    event.stopPropagation();
    setTimeout(function() {
        filter = input.value.toUpperCase().trim();
        var no_results_found = true
        for (i = 0; i < a.length; i++) {
            var txtValue = a[i].textContent || a[i].innerText;
            if (txtValue.toUpperCase().startsWith(filter)) {
                a[i].style.display = "";
                no_results_found = false
            } else {
                a[i].style.display = "none";
            }
        }
        if (filter != "") {
            $("#" + wrapper_id + " li.country.preferred, #" + wrapper_id + " li.divider").hide();
        } else {
            $("#" + wrapper_id + " li.country.preferred, #" + wrapper_id + " li.divider").show();
        }
        if (no_results_found) {
            document.querySelector("#" + wrapper_id + " .country-no-result-found").style.display = "block";
        } else {
            document.querySelector("#" + wrapper_id + " .country-no-result-found").style.display = "none";
        }
    }, 100)

}


function add_section_in_create_form_modal() {
    $(document).ready(function () {
        $('.easychat-form-widget-dropdown-wrapper').select2({
            dropdownParent: $('#modal-create-form')
        });
    });

    let last_form_field_id = document.getElementsByClassName('create-form-field').length;
    let intent_pk = get_url_vars()["intent_pk"];

    if (last_form_field_id >= 1) {
        last_form_field_id = parseInt(last_form_field_id);
    } else {
        last_form_field_id = '0'
    }
    window.last_form_field_id = last_form_field_id
    let id = generate_random_string(5);

    let new_form_field = '<div class="create-form-field" id="field-' + id + '">\
                                <div class="open-form-field" id="opened_form_div_'+ id + '">\
                                                        <div style="float: right;">\
                                                                <a class="easychat-form-widget-individual-form-save-btn"  id="minimize_btn_'+ id + '" onclick="minimize_form_field_div(this)">\
                                                                    <svg width="18" height="19" viewBox="0 0 18 19" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                                        <path d="M9.0001 6.03638C9.30569 6.036 9.59664 6.16726 9.7986 6.3966L14.3296 11.546C14.5393 11.7735 14.6094 12.0969 14.5126 12.3908C14.4158 12.6848 14.1674 12.9032 13.8635 12.9617C13.5596 13.0202 13.2479 12.9094 13.0489 12.6724L9.08693 8.16956C9.065 8.14455 9.03336 8.1302 9.0001 8.1302C8.96684 8.1302 8.9352 8.14455 8.91328 8.16956L4.95127 12.6733C4.75234 12.9104 4.44061 13.0211 4.1367 12.9626C3.83279 12.9042 3.58439 12.6857 3.48762 12.3917C3.39084 12.0978 3.46088 11.7745 3.67062 11.5469L8.20022 6.39845C8.40252 6.16855 8.69387 6.03667 9.0001 6.03638Z" fill="#7B7A7B"/>\
                                                                        <mask id="mask0_76_322" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="3" y="6" width="12" height="7">\
                                                                        <path d="M9.0001 6.03638C9.30569 6.036 9.59664 6.16726 9.7986 6.3966L14.3296 11.546C14.5393 11.7735 14.6094 12.0969 14.5126 12.3908C14.4158 12.6848 14.1674 12.9032 13.8635 12.9617C13.5596 13.0202 13.2479 12.9094 13.0489 12.6724L9.08693 8.16956C9.065 8.14455 9.03336 8.1302 9.0001 8.1302C8.96684 8.1302 8.9352 8.14455 8.91328 8.16956L4.95127 12.6733C4.75234 12.9104 4.44061 13.0211 4.1367 12.9626C3.83279 12.9042 3.58439 12.6857 3.48762 12.3917C3.39084 12.0978 3.46088 11.7745 3.67062 11.5469L8.20022 6.39845C8.40252 6.16855 8.69387 6.03667 9.0001 6.03638Z" fill="white"/>\
                                                                        </mask>\
                                                                        <g mask="url(#mask0_76_322)">\
                                                                        </g>\
                                                                    </svg>\
                                                                </a>\
                                                            <div class="create-form-div-remove" id="remove-create-form-div-' + id + '" onclick="remove_create_form_div(this)"> <svg width="11" height="10" viewBox="0 0 11 10" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                                <path d="M11 1.23576L9.64067 0L5.5 3.76424L1.35933 0L0 1.23576L4.14067 5L0 8.76424L1.35933 10L5.5 6.23576L9.64067 10L11 8.76424L6.85933 5L11 1.23576Z" fill="#757575"></path> </svg>\
                                                            </div>\
                                                        </div>\
                                                        <div class="input-field-custom">\
                                                            <label for="label_name_' + id + '_1" id="label_name_' + id + '_1">Label Name<span style="color: red;">*</span></label>\
                                                            <input ' + 'class="label-name edit-intent-common-primary-input" onblur="form_label_field_changed(this)" id="input_name_' + id + '_1" type="text" maxlength="' + character_limit_small_text + '" placeholder="Eg: Account details">\
                                                            <div class="form-widget-label-name-error-message" id="label_name_error_msg_' + id + '" style="display: none;">\
                                                                Label name already exists. Please try another.\
                                                            </div>\
                                                        </div>\
                                                        <div class="input-field-custom">\
                                                            <label for="label_name_' + id + '_2">Input type<span style="color: red;">*</span></label>\
                                                            <select' + ' class="easychat-form-widget-dropdown-wrapper" id=input_type_' + id + '>\
                                                                    <option value="text_field">Text Field</option>\
                                                                    <option value="dropdown_list">Dropdown list</option>\
                                                                    <option value="checkbox">Checkbox</option>\
                                                                    <option value="radio">Radio Button</option>\
                                                                    <option value="range">Range Slider</option>\
                                                                    <option value="file_attach">File Attach</option>\
                                                                    <option value="date_picker">Date Picker</option>\
                                                                    <option value="time_picker">Time Picker</option>\
                                                                    <option value="phone_number">Phone Number</option>\
                                                            </select>\
                                                            <div class="col s12" id="validator_dropdown_' + id + '" style=" padding: 0px !important; margin-top: 16px; ">\
                                                                <select' + ' class="easychat-form-widget-dropdown-wrapper" id="validator_' + id + '">\
                                                                        <option value="choose_validator">Choose Validator</option>\
                                                                        <option value="6digitotp_validator">6 Digit OTP Validator</option>\
                                                                        <option value="4digitotp_validator">4 Digit OTP Validator</option>\
                                                                        <option value="email_validator">Email Validator</option>\
                                                                        <option value="pan_validator">PAN Validator</option>\
                                                                        <option value="name_validator">Name Validator</option>\
                                                                        <option value="mobile_validator">Mobile Validator</option>\
                                                                </select>\
                                                            </div>\
                                                            <div class="col s12" id="file_attach_' + id + '"  style="display: none;padding: 0px !important; margin-top: 16px; ">\
                                                                <select class="easychat-form-widget-dropdown-wrapper" id="file_attach_type_' + id + '">\
                                                                    <option value="image(ex. .jpeg, .png, .jpg)">image(ex. .jpeg, .png, .jpg)</span>\
                                                                    <option value="video file(ex. .mp4)">video file(ex. .mp4)</span>\
                                                                    <option value="word processor(i.e. .doc,.pdf)">word processor(i.e. .doc,.pdf)</span>\
                                                                    <option value="compressed file(ex. .zip)">compressed file(ex. .zip)</span>\
                                                                </select>\
                                                            </div>\
                                                            <div class="col s12" id="range_type_' + id + '" style="display: none; padding: 0px !important; margin-top: 16px; ">\
                                                                <select class="easychat-form-widget-dropdown-wrapper" id="range_selector_' + id + '">\
                                                                    <option value="Single Range Selector">Single Range Selector</span>\
                                                                    <option value="Dual Range Selector">Dual Range Selector</span>\
                                                                </select>\
                                                            </div>\
                                                            <div class="col s12" id="calendar_type_' + id + '" style="display: none; padding: 0px !important; margin-top: 16px; ">\
                                                            <select class="easychat-form-widget-dropdown-wrapper" id="calendar_selector_type_' + id + '">\
                                                                <option value="Single Type">Single Type</span>\
                                                                <option value="Custom Type">Custom Type</span>\
                                                            </select>\
                                                            </div>\
\
\
                                                            <div class="col s12" id="phone_number_type_' + id + '" style="display: none; padding: 0px !important; margin-top: 16px; ">\
                                                            <label for="label_name_' + id + '_3">Default Country Code\
                                                                <span style="color: red;">*</span>\
                                                            </label>\
                                                            <input type="tel" placeholder="" style="visibility:hidden !important;" id="phone_number_selector_type_' + id + '" >\
                                                            </div>\
\
\
                                                            <div class=" col s12 response-widget-dragable-output-div sortable-radio-widget-edit-div" style="display: none;" id="sortable-radio-widget-edit-div-' + id + '">\
                                                            </div>\
                                                            <div class=" col s12 response-widget-dragable-output-div sortable-checkbox-widget-edit-div" style="display: none;" id="sortable-checkbox-widget-edit-div-' + id + '">\
                                                            </div>\
                                                            <div class="form-widget-dropdown-area sortable-radio-widget-edit-div" style="display: none;" id="sortable-dropdown-widget-edit-div-' + id + '">\
                                                            </div>\
                                                            <div class="form-widget-range-slidervalue-holder-contaainer" id="form-widget-range-slider-min-max-container' + id + '" style="display: none;">\
                                                            <div class="range-slider-min-max-value-div">\
                                                            <div class="form-widget-slider-heading-div">\
                                                            Enter Value\
                                                            </div>\
                                                            <div class="form-widget-slider-min-max-value-area">\
                                                            <div class="range-slider-min-value-input">\
                                                            <input type="number" id="form-range-slider-min-range-' + id + '" placeholder="Enter Value" autocomplete="off">\
                                                            <p>Min range</p>\
                                                            </div>\
                                                            <svg style="margin: 27px 10px 0px 10px;" width="9" height="1" viewBox="0 0 9 1" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                            <path d="M0 0.5H9" stroke="#8F8F8F"/>\
                                                            </svg>\
                                                            <div class="range-slider-max-value-input">\
                                                            <input type="number" id="form-range-slider-max-range-' + id + '" placeholder="Enter Value" autocomplete="off">\
                                                            <p>Max range</p>\
                                                            </div>\
                                                            </div>\
                                                            </div>\
                                                            </div>\
                                                        </div>\
                                                        <div class="input-field-custom">\
                                            <p style="color: red;" id="new_bot_error_div_widgets_' + id + '"></p>\
                                                            <input class = "input_selected_type_3 edit-intent-common-primary-input" onblur="form_placeholder_field_changed(this)" id="input_selected_type_' + id + '_3" maxlength="' + character_limit_small_text + '" type="text" placeholder="Placeholder text" style="margin-top:12px !important">\
                                                        </div>'+ get_dependent_field_div(id, true) + '\
                                                        <div class="form-field-footer">\
                                                            <div style="display: flex; align-items: center; column-gap: 10px;">\
                                                                <a id="reset_values_'+ id + '" class="form-widget-individual-reset-btn" onclick="reset_api_integration(`' + id + '`, false, true)">Reset</a>\
                                                                <div class="optional-btn" style="font-weight: 300; font-size: 12px; position: relative; left: -4px;"> <span>Optional</span> <input type="checkbox" id="optional-toggle-field-'+ id + '"><label style="margin-left: 5px; height: 13px;" for="optional-toggle-field-' + id + '">Toggle</label> </div>\
                                                            </div>\
                                                            <div>\
                                                                <div class="form-widget-individual-api-integration-text" id="api_integration_status_' + id + '" style="display: none;">API Integration - <span style="color: green;">Active</span> </div>\
                                                            </div>\
                                                            <div>\
                                                            <a href="/chat/field-processor/?processor=field&bot_pk=' + SELECTED_BOT_PK + '&field_id=' + id + '" class="form-widget-individual-integrate-api-btn" target="_blank" id="api_integration_link_' + id + '">Integrate API</a>\
                                                            </div>\
                                                        </div>\
                                                    </div>\
                                                    <div class="create-form-field-data-saved-div" id="saved_data_div_'+ id + '" style="display: none;">\
                                                            <div class="drag-icon ui-sortable-handle">\
                                                                <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                                <path d="M6.5 6C7.32843 6 8 5.32843 8 4.5C8 3.67157 7.32843 3 6.5 3C5.67157 3 5 3.67157 5 4.5C5 5.32843 5.67157 6 6.5 6Z" fill="#7B7A7B"/>\
                                                                <path d="M6.5 11C7.32843 11 8 10.3284 8 9.5C8 8.67157 7.32843 8 6.5 8C5.67157 8 5 8.67157 5 9.5C5 10.3284 5.67157 11 6.5 11Z" fill="#7B7A7B"/>\
                                                                <path d="M8 14.5C8 15.3284 7.32843 16 6.5 16C5.67157 16 5 15.3284 5 14.5C5 13.6716 5.67157 13 6.5 13C7.32843 13 8 13.6716 8 14.5Z" fill="#7B7A7B"/>\
                                                                <path d="M13.5 6C14.3284 6 15 5.32843 15 4.5C15 3.67157 14.3284 3 13.5 3C12.6716 3 12 3.67157 12 4.5C12 5.32843 12.6716 6 13.5 6Z" fill="#7B7A7B"/>\
                                                                <path d="M15 9.5C15 10.3284 14.3284 11 13.5 11C12.6716 11 12 10.3284 12 9.5C12 8.67157 12.6716 8 13.5 8C14.3284 8 15 8.67157 15 9.5Z" fill="#7B7A7B"/>\
                                                                <path d="M13.5 16C14.3284 16 15 15.3284 15 14.5C15 13.6716 14.3284 13 13.5 13C12.6716 13 12 13.6716 12 14.5C12 15.3284 12.6716 16 13.5 16Z" fill="#7B7A7B"/>\
                                                                </svg>\
                                                            </div>\
                                                            <div class="create-form-field-data-div-wrapper">\
                                                                <div class="create-form-field-data-saved-div-label-name" id="saved_full_name_'+ id + '">Full Name</div>\
                                                                <div class="create-form-field-data-saved-div-input-type" id="saved_input_type_'+ id + '">Input Type - <span>Text Field</span></div>\
                                                                <div class="create-form-field-data-saved-div-validator" id="saved_validator_'+ id + '"><span>Name</span> Validator</div>\
                                                                <div class="create-form-field-data-saved-div-api-status" id="saved_api_status_'+ id + '">API Integration - <span style="color:green">Active</span></div>\
                                                                <div class="create-form-field-data-saved-div-dependent-value" id="saved_dependency_'+ id + '">\
                                                                    <svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                                        <path d="M9.75 4.5H10.2662C12.3292 4.5 14 6.17984 14 8.25C14 10.2534 12.4353 11.8912 10.4706 11.9948L10.2729 12L9.75667 12.0046C9.34247 12.0082 9.00371 11.6755 8.99997 11.2613C8.99665 10.8816 9.276 10.5653 9.64162 10.5124L9.74333 10.5046L10.2662 10.5C11.499 10.5 12.5 9.49355 12.5 8.25C12.5 7.05827 11.5807 6.08428 10.419 6.00519L10.2662 6H9.75C9.33579 6 8.99997 5.66421 8.99997 5.25C8.99997 4.8703 9.28215 4.55651 9.64823 4.50685L9.75 4.5H10.2662H9.75ZM5.7523 4.5H6.25C6.66421 4.5 7 4.83579 7 5.25C7 5.6297 6.71785 5.94349 6.35177 5.99315L6.25 6H5.7523C4.50839 6 3.5 7.00839 3.5 8.2523C3.5 9.44437 4.42611 10.4201 5.59809 10.4994L5.7523 10.5046H6.25C6.66421 10.5046 7 10.8404 7 11.2546C7 11.6343 6.71785 11.9481 6.35177 11.9977L6.25 12.0046H5.7523C3.67996 12.0046 2 10.3246 2 8.2523C2 6.24681 3.57332 4.60879 5.55302 4.5052L5.7523 4.5H6.25H5.7523ZM5.75 7.5H10.25C10.6642 7.5 11 7.83579 11 8.25C11 8.6297 10.7178 8.94349 10.3518 8.99315L10.25 9H5.75C5.33579 9 5 8.66421 5 8.25C5 7.8703 5.28215 7.55651 5.64823 7.50685L5.75 7.5H10.25H5.75Z" fill="#2741FA"/>\
                                                                        </svg><span id="saved_dependency_name_'+ id + '">Full Name\
                                                                    </span>\
                                                                </div>\
                                                            </div>\
                                                            <a id="maximize_btn_'+ id + '" class="create-form-field-data-div-wrapper-edit-icon" onclick="maximize_form_field_div(this)">\
                                                                <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                                                <path d="M8.50525 5.60684L4.04384 10.0693C3.80447 10.3087 3.50454 10.4785 3.17613 10.5606L1.4645 10.9885C1.19091 11.0569 0.943097 10.8091 1.01149 10.5355L1.4394 8.82387C1.52151 8.49546 1.69132 8.19553 1.93069 7.95616L6.3921 3.49369L8.50525 5.60684ZM9.56235 2.43765C10.1459 3.02118 10.1459 3.96727 9.56235 4.5508L9.03354 5.07856L6.92039 2.96541L7.4492 2.43765C8.03273 1.85412 8.97882 1.85412 9.56235 2.43765Z" fill="#7B7A7B"/>\
                                                                </svg>\
                                                            </a>\
                                                        </div>\
                                                    </div>\
                                                    </div>\
                                                    '

    $('#create-form-fields').append(new_form_field);
    $("#create-form-fields").show()
    create_custom_dropdowns_form_widgets("field-" + id, id, "", "", "", "")
    // create_custom_dropdowns("field-"+last_form_field_id, last_form_field_id, "", "")
    initialize_phone_number_selector_console("phone_number_selector_type_" + id, "in", id)

    $(document).on("change", "#input_type_" + id, function() {
        if (["file_attach", "date_picker", "time_picker"].includes($("#input_type_" + id).val())) {
            $("#saved_api_status_"+ id).hide()
        } else {
            $("#saved_api_status_"+ id).show()
        }
    })

    $('#input_selected_type_' + id + '_3').keyup(function (event) {
        check_enter_pressed(event, $(this))
    });
    $('#input_name_' + id + '_1').focusout(function () {
        check_if_label_name_exists(id)
    });
    var form_div_id = "field-" + last_form_field_id
    // document.getElementById(form_div_id).scrollIntoView()
    $('.intent-widget-overflow-div-content').animate({ scrollTop: 9999 }, 400);
    $('.easychat-form-widget-dropdown-wrapper').select2().on('select2:open', function (e) {
        $('.select2-search__field').attr('placeholder', 'Search here');
    });
    $('#validator_' + id).select2().on('select2:open', function (e) {
        $('.select2-search__field').attr('placeholder', 'Search here');
    });
    $('#input_type_' + id).select2().on('select2:close', function (e) {
        add_input_type_field(id);
    });
    $('#input_type_' + id).select2().on('select2:open', function(e) {
        $('.select2-search__field').attr('placeholder', 'Search here');
    });
    $("#dependent-field-" + id).on("change", function (event) {
        if (this.checked) {
            $("#dependent_dropdown_div_" + id).show();

        } else {
            $("#dependent_dropdown_div_" + id).hide();
        }
    });
    $('#dependent_field_dropdown_' + id).select2().on('select2:open', function (e) {
        let fields = document.querySelectorAll(".label-name");
        $('#dependent_field_dropdown_' + id).children().remove();
        $('#dependent_field_dropdown_' + id).append('<option value="Select Dependency">Select Dependency</option>');
        for (let i = 0; i < fields.length; i++) {
            let label_name = fields[i].value;
            let label_id = fields[i].id.split('_')[2]
            let label_input_type = $('#input_type_' + label_id).val()
            if (label_input_type == 'file_attach' || label_input_type == 'date_picker' || label_input_type == 'time_picker') continue;
            if (label_id == id) break;
            $('#dependent_field_dropdown_' + id).append('<option value="' + label_id + '">' + label_name + '</option>');
        }
    });
    $('.tooltipped').tooltip();
}

if (window.location.pathname != '/chat/login/') {
    $(function () {
        $("#create-form-fields").sortable({

            handle: ".drag-icon"
        });
        $("#create-form-fields").disableSelection();
    })

}

function select_create_form_input_type(el) {
    let id = el.id
    id = id.split('_')[2];

    let elem_id = el.value == 'file_attach' ? 'dropdown_selected_type_' : 'input_selected_type_';

    let elem = document.getElementById('input_selected_type_' + id + '_3');
    let file_attach_elem = document.getElementById('dropdown_selected_type_' + id + '_3');

    elem.parentElement.style.display = 'block';
    file_attach_elem.parentElement.style.display = 'none';

    elem.value = "";
    file_attach_elem.value = "";
    if (el.value == "text_field") {
        elem.placeholder = "Placeholder text"
    } else if (el.value == "dropdown_list") {
        elem.placeholder = "Use $$$ to separate drop down option(e.g. Option 1$$$Option 2)";
    } else if (el.value == "checkbox") {
        elem.placeholder = "Use $$$ to separate checkbox option(e.g. Option 1$$$Option 2)";
    } else if (el.value == "radio") {
        elem.placeholder = "Use $$$ to separate radio button option(e.g. Option 1$$$Option 2)";
    } else if (el.value == "range") {
        elem.placeholder = "Use - to separate range(e.g. 0-100)";
    } else if (el.value == "file_attach") {
        elem.parentElement.style.display = 'none';
        file_attach_elem.parentElement.style.display = 'block';
        $(file_attach_elem).select2({
            width: "95%",
            placeholder: "Select file type",
            allowClear: true,
            dropdownParent: $("#modal-create-form"),
        })
    }
}

function remove_create_form_div(elem) {
    let id = elem.id.split('-');
    let div_id = 'field-' + id[id.length - 1];

    let el = document.getElementById(div_id);
    el.remove();
    if ($(".create-form-field").length === 0) {
        $("#create-form-fields").hide()
    }
    return

    id = id[id.length - 1]

    // console.log("Original id"+id)

    let dependent_fields = document.querySelectorAll('.dependent-dropdown');

    for (let j = 0; j < dependent_fields.length; j++) {
        if (dependent_fields[j].value == id) {
            $(dependent_fields[j]).children().remove();
            $(dependent_fields[j]).append('<option value="Select Dependency">Select Dependency</option>');
        }
    }
    el.remove();
    $("#create-form-fields").hide()
}

// Fetch Intent information with pk
function getIntentInformationByID(intent_pk) {
    set_selected_language_based_on_url_param();
    var json_string = JSON.stringify({
        intent_pk,
        bot_id: SELECTED_BOT_OBJ_ID,
        selected_language: SELECTED_LANGUAGE,
    })

    json_string = EncryptVariable(json_string)
    var response = $.ajax({
        url: '/chat/fetch-intent-information/',
        type: "POST",
        async: false,
        data: {
            json_string: json_string
        },
        success: function (data) {
            return data;
        }
    }).responseJSON;

    response = custom_decrypt(response)
    response = JSON.parse(response);

    return response;
}

function renderTreeStructureByIntentID(intent_pk) {
    set_selected_language_based_on_url_param()

    response = fetchIntentTreeStructureByIntentID(intent_pk, selected_language);

    renderTreeStructure(response, intent_pk);
}

function fetchIntentTreeStructureByIntentID(intent_pk, selected_language) {

    var json_string = JSON.stringify({
        intent_pk: intent_pk,
        selected_language: selected_language,
    })

    json_string = EncryptVariable(json_string)

    var response = $.ajax({
        url: '/chat/fetch-intent-tree-structure/',
        type: "POST",
        async: false,
        data: {
            json_string: json_string,
        },
        success: function (response) {

            return response;
        },
        error: function (error) {
            console.log("Error in fetchIntentTreeStructureByIntentID");
        }
    }).responseJSON;
    response = custom_decrypt(response)
    response = JSON.parse(response);

    return response;
}

function isDictEmpty(dict) {
    for (var key in dict) {
        return false;
    }
    return true;
}

function renderRecursiveTreeStructure(subtree, intent_pk, parent_pk) {
    var tree_name = subtree["tree_name"]
    tree_name = tree_name.replace(/<\/?("[^"]*"|'[^']*'|[^>])*(>|$)/g, "");
    var tree_pk = subtree["tree_pk"]
    var tree_resp = subtree["tree_resp"]
    var is_repeat = subtree["is_repeat"]

    tree_resp = tree_resp.replace(/<\/?("[^"]*"|'[^']*'|[^>])*(>|$)/g, "");
    tree_resp = tree_resp.length > 55 ? tree_resp.slice(0, 50) + "..." : tree_resp

    var key = intent_pk + "_" + parent_pk + "_" + tree_pk
    if (!is_repeat) {
        html = `
        <ul>
          <li>
          <span id="` + key + `" class="collapsible_custom">
          <a href="/chat/edit-intent/?intent_pk=` + intent_pk + `&tree_pk=` + tree_pk + `&selected_language=` + selected_language + `" class="black-text tooltip">
            <div id="` + key + `_tree_name_container" value="` + tree_name + `">
              &nbsp;&nbsp;
              ` + tree_name + `
            </div>
            <span>` + tree_resp + `</span>
            </a>
          </span>
      `;
    } else {
        html = `
        <ul>
          <li>
          <span id="` + key + `" class="collapsible_custom repeat_tree">
          <a href="/chat/edit-intent/?intent_pk=` + intent_pk + `&tree_pk=` + tree_pk + `&selected_language=` + selected_language + `" class="black-text tooltip">
            <div id="` + key + `_tree_name_container" value="` + tree_name + `">
              &nbsp;&nbsp;
               ` + tree_name + `
            </div>
            <span>` + tree_resp + `</span>
            </a>
          </span>
      `;
    }

    if (!isDictEmpty(subtree["subtree"])) {
        for (var key in subtree["subtree"]) {
            html += renderRecursiveTreeStructure(subtree["subtree"][key], intent_pk, tree_pk);
        }
    }

    html += `</li></ul>`;

    return html;

}

function renderTreeStructure(response, intent_pk) {
    tree_html = renderRecursiveTreeStructure(response["1"], intent_pk, -1);
    $("#jstree-data").html(tree_html);
    $('#jstree-data').jstree({
        "core": {
            "themes": {
                "icons": false,
            },
        }
    });

    $("#jstree-data").on("activate_node.jstree", function (e, data) {
        var href = data.node.text.match(/href="([^"]*)/)[1];
        href = href.replace(/amp;/gi, '');
        window.location.href = href;
    });

    $("#jstree-data").jstree("open_all");
}

function getHTMLOfDeleteIntentModal(button_id) {
    var counter = 0;
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf('modify-intent-checkbox-') == 0) {
            data_id = inputs[i].id;
            if (document.getElementById(data_id).checked) {
                counter++;
                if (counter > 1)
                    break;

            }
        }
    }

    var popup_text = '';
    var html = `
  <!-- Modal Structure -->
    <div id="delete-intent-modal" class="modal">
    <div class="modal-content">
      <h4>Delete Intent</h4>`

    intents_deleted_count = counter;

    if (counter > 1) {
        popup_text = `<p>Are you sure, you want to delete selected intents?</p>`
    } else {
        popup_text = `<p>Are you sure, you want to delete intent?</p>`
    }

    html = html + popup_text + `</div>
    <div class="modal-footer">
      <a href="#!" class="modal-close btn transparent-btn black-text">Cancel</a>
      <a id="` + button_id + `" class="modal-close waves-effect waves-green btn delete_intent red darken-3 white-text" style="margin-left:1%">Delete</a>
    </div>
    </div>`;

    return html;
}

function getTreeRenameModal() {
    var modal = `
  <!-- Modal Structure -->
  <div id="rename-tree-modal" class="modal">
    <div class="modal-content">
    <h4>Rename Intent</h4>
    <div class="input-field col s6">
      <input id="modal_tree_name" type="text" class="validate" autofocus>
      <label for="modal_tree_name"></label>
    </div>
    </div>
    <div class="modal-footer">
    <a href="javascript:void(0)" class="modal-close btn transparent-btn black-text">Cancel</a>
    <a id="agree-rename-tree" class="modal-close waves-effect waves-green btn green lighten-2 black-text" style="margin-left:1%">Save</a>
    </div>
  </div>`;

    return modal;
}

function getTreeDeleteModal() {
    var modal = `
  <!-- Modal Structure -->
  <div id="delete-tree-modal" class="modal">
    <div class="modal-content">
    <h4>Delete Intent</h4>
    <p>Are you sure, you want to delete this Intent?</p>
    <ol id="delete-tree-modal-info">
    </ol>
    </div>
    <div class="modal-footer">
    <a href="javascript:void(0)" class="modal-close btn transparent-btn black-text">Cancel</a>
    <a id="agree-delete-tree" class="modal-close waves-effect waves-green btn red darken-3 white-text" style="margin-left:1%">Delete</a>
    </div>
  </div>`;

    return modal;
}

function getTreeDeleteOnlyNodeModal() {
    var modal = `
  <!-- Modal Structure -->
  <div id="delete-node-modal" class="modal">
    <div class="modal-content">
    <h4>Delete only Selected node</h4>
    <p>Are you sure, you want to delete this node?</p>
    <ol id="delete-node-modal-info">
    </ol>
    </div>
    <div class="modal-footer">
    <a href="javascript:void(0)" class="modal-close btn transparent-btn black-text">Cancel</a>
    <a id="agree-delete-node" class="modal-close waves-effect waves-green btn red darken-3 white-text" style="margin-left:1%">Delete</a>
    </div>
  </div>`;

    return modal;
}

function getTreeCreateModal() {
    var modal = `
  <!-- Modal Structure -->
  <div id="create-tree-modal" class="modal">
    <div class="modal-content">
    <h4>Create Child Intent</h4>
    <div class="input-field col s6">
      <input id="child_tree_name" type="text" class="validate">
      <label for="child_tree_name">Child Intent Name</label>
    </div>
    </div>
    <div class="modal-footer">
    <a href="javascript:void(0)" class="modal-close btn transparent-btn black-text">Cancel</a>
    <a id="agree-create-tree" class="modal-close waves-effect waves-green btn green lighten-2 black-text" style="margin-left:1%">Save</a>
    </div>
  </div>`;

    return modal;
}

function getTreeInsertModal() {
    var modal = `
  <!-- Modal Structure -->
  <div id="insert-tree-modal" class="modal">
    <div class="modal-content" >
    <h4>Insert Child Intent</h4>
    <p>Are you sure, you want to Insert child in between selected node and its childs?</p>
    <ol id="insert-tree-modal-info">
    </ol>
    <div class="input-field col s6">
      <input id="insert_child_tree_name" type="text" class="validate">
      <label for="insert_child_tree_name">Child Intent Name</label>
    </div>
    </div>
    <div class="modal-footer">
    <a href="javascript:void(0)" class="modal-close btn transparent-btn black-text">Cancel</a>
    <a id="agree-insert-tree" class="modal-close waves-effect waves-green btn green lighten-2 black-text" style="margin-left:1%">Save</a>
    </div>
  </div>`;

    return modal;
}

function getChoiceAddModal() {
    var modal = `
   <!-- Modal Structure -->
  <div id="tree-choice-modal" class="modal">
    <div class="modal-content">
    <h4>Add New Choice</h4>
    <div>
      <div class="input-field">
      <input id="tree_choice_display_value" type="text" class="validate">
      <label for="tree_choice_display_value">Choice Display</label>
      </div>
      <div class="input-field">
      <input id="tree_choice_value_value" type="text" class="validate">
      <label for="tree_choice_value_value">Choice Value</label>
      </div>
      <br>
    </div>
    </div>
    <div class="modal-footer">
    <a href="#!" class="modal-close btn transparent-btn black-text">Cancel</a>
    <a id="save-new-choice" class="modal-close waves-effect waves-green btn green lighten-2 black-text" style="margin-left:1%">Save</a>
    </div>
  </div>`;

    return modal;
}

function renderRequiredModalsIntoHTML(intent_pk) {
    var modal_id = "deleteintent_" + intent_pk.toString();

    var html_modal = getHTMLOfDeleteIntentModal(modal_id);
    html_modal += getTreeRenameModal();
    html_modal += getTreeDeleteModal();
    html_modal += getTreeCreateModal();
    html_modal += getTreeInsertModal();
    html_modal += getTreeDeleteOnlyNodeModal();
    html_modal += getChoiceAddModal();

    $("#edit-intent-modal-container").append(html_modal);
    $("#edit-tree-modal-container").append(html_modal);

    html = `
  <a id="delete-intent" href="#delete-intent-modal" class="btn red darken-3 modal-trigger"><i class="inline-icon material-icons">delete_forever</i> Delete</a>
  `;

    faq_html = `
  <a id="delete-faq" href="#delete-faq-modal" class="btn red darken-3 modal-trigger"><i class="inline-icon material-icons">delete_forever</i> Delete</a>
  `;

    $("#action-intent").append(html);
    $("#action-faq").append(faq_html);
}


function myResponseInitInstance() {
    //intent
    var text_response_final = ''
    if (typeof text_response !== 'undefined')
        text_response_final = text_response

    var reprompt_response_final = ''
    if (typeof reprompt_response !== 'undefined')
        reprompt_response_final = reprompt_response

    if ($("#intent_bot_response_text_text").length) {
        $("#intent_bot_response_text_text").trumbowyg('html', text_response_final)
    }
    if ($("#intent_bot_response_reprompt").length) {
        $("#intent_bot_response_reprompt").trumbowyg('html', reprompt_response_final)
    }

    // tree
    if ($("#tree_bot_response_text_text").length) {
        $("#tree_bot_response_text_text").trumbowyg('html', text_response_final)
    }

    if ($("#tree_bot_response_reprompt").length) {
        $("#tree_bot_response_reprompt").trumbowyg('html', reprompt_response_final)
    }
}

function mySpeechResponseInitInstance() {
    var speech_response_final = ''
    if (typeof speech_response !== 'undefined')
        speech_response_final = speech_response
    let ssml_response_final = ''
    if (typeof ssml_response !== 'undefined')
        ssml_response_final = ssml_response

    //intent
    if ($("#intent_bot_response_text_speech").length) {
        $("#intent_bot_response_text_speech").trumbowyg('html', speech_response_final)
    }
    if ($("#intent_bot_response_ssml").length) {
        $("#intent_bot_response_ssml").val(ssml_response_final)
    }
    //tree
    if ($("#tree_bot_response_text_speech").length) {
        $("#tree_bot_response_text_speech").trumbowyg('html', speech_response_final)
    }
    if ($("#tree_bot_response_ssml").length) {
        $("#tree_bot_response_ssml").val(ssml_response_final)
    }
}

function renderIntentInformationByID(intent_pk) {
    training_data_count = 0;
    intent_data = getIntentInformationByID(intent_pk);
    response_pk = intent_data['answer_pk'];
    training_data = intent_data['training_data'];
    order_of_response = intent_data['order_of_response'];
    default_order_of_response = intent_data['default_order_of_response'];
    loadIntentEditForm();
    $("#intent-test-action").show();
    if (selected_language == "en") {

        renderRequiredModalsIntoHTML(intent_pk);
    }
    copy_tree_id = get_cookie("copy_tree_id")
    if (copy_tree_id != "") {
        $("#paste-tree-node").removeClass("disbled-paste-btn")
    }
    loadIntentTrainingDataIntoCollectionBody(training_data);

    sentence_list = []
    image_list = []
    video_list = []
    card_list = []

    if (response_pk != null) {
        // Bot response parameters
        bot_response_data = fetchBotResponseDetailsByID(response_pk);
        sentence_list = bot_response_data["response_list"]
        image_list = bot_response_data["image_list"]
        video_list = bot_response_data["video_list"]
        card_list = bot_response_data["card_list"]
    }

    if (sentence_list.length > 0) {

        text_response = sentence_list[0]["text_response"]
        speech_response = sentence_list[0]["speech_response"]
        hinglish_response = "";

        if ("hinglish_response" in sentence_list[0]) {
            hinglish_response = sentence_list[0]["hinglish_response"]
        }
        reprompt_response = ""
        if ("text_reprompt_response" in sentence_list[0]) {
            reprompt_response = sentence_list[0]["text_reprompt_response"]
        }
        ssml_response = ""
        if("ssml_response" in sentence_list[0]) {
            ssml_response = sentence_list[0]["ssml_response"]
        }

        // addIntentResponseTextSentencesIntoCollection(text_response, speech_response)
    }

    for (var i = 0; i < image_list.length; i++) {
        image_url = image_list[i]
        addIntentResponseImageIntoCollection(image_url)
    }

    for (var i = 0; i < video_list.length; i++) {
        video_url = video_list[i]
        addIntentResponseVideoIntoCollection(video_url)
    }

    for (var i = 0; i < card_list.length; i++) {
        card_title = card_list[i]["title"];
        card_content = card_list[i]["content"];
        card_img_url = card_list[i]["img_url"];
        card_link = card_list[i]["link"];
        addIntentResponseCardIntoCollection(card_title, card_content, card_link, card_img_url);
    }
}

function loadIntentTrainingDataIntoCollectionBody(training_data_list) {
    try {
        for (i = 0; i < training_data_list.length; i++) {
            addIntentTrainingDataIntoCollection(training_data_list[i]);
        }
    } catch (err) { }
}

function fetchBotResponseDetailsByID(response_pk) {
    var json_string = JSON.stringify({
        response_pk: response_pk,
        selected_language: selected_language
    })

    json_string = EncryptVariable(json_string);

    var response = $.ajax({
        url: '/chat/fetch-botresponse-information/',
        type: "POST",
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            return response;
        }
    }).responseJSON;
    response = custom_decrypt(response)
    response = JSON.parse(response);
    return response;
}

/////////////////////////////////////////////////////// Developer Authentication JS Start

function validate_email(email) {

    var regex = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/;
    var ctrl = email;

    if (ctrl != "" && regex.test(ctrl)) {
        return true;
    } else {
        return false;
    }
}


function login_function(logout_other) {

    username = document.getElementById("username");
    password = document.getElementById("password_form");
    easychat_access_token = get_easychat_access_token();

    if (username.value == "") {
        alert("Please enter valid username");
        return;
    }
    if (password.value == "") {
        alert("Please enter valid password");
        return;
    }
    captcha = document.getElementById("captcha").value;
    if (captcha == "") {
        alert("Please enter valid captcha");
        return;
    }
    tempusername = stripHTML(username.value);
    encrypted_username = EncryptVariable(username.value)
    encrypted_password = EncryptVariable(password.value)
    encrypted_easychat_access_token = EncryptVariable(easychat_access_token)
    logout_other = EncryptVariable(logout_other)
    var temppassword = "";
    for (var i = 0; i < encrypted_password.length; i++) {
        temppassword += "*";
    }
    encrypted_captcha = EncryptVariable(captcha)
    captcha_image = document.getElementById("captcha_image").src;
    encrypted_captcha_image = EncryptVariable(captcha_image)

    request_params = {
        username: encrypted_username,
        password: encrypted_password,
        captcha: encrypted_captcha,
        captcha_image: encrypted_captcha_image,
        easychat_access_token: encrypted_easychat_access_token,
        logout_other: logout_other,
    }

    json_string = JSON.stringify(request_params);
    encrypted_data = EncryptVariable(json_string);
    encrypted_data = {
        "Request": encrypted_data
    };

    login_btn = document.getElementById('login_btn');
    login_btn.disabled = true;

    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/authentication/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: encrypted_data,
        success: function (response) {
            try {
                document.getElementsByClassName('gy-center')[0].style["-webkit-filter"] = "";
            } catch (err) { }
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                set_cookie("is_online", "1", "/");
                setTimeout(function () {
                    window.location = "/chat/home/";
                }, 2000);

                M.toast({
                    "html": "Welcome, " + response["username"]
                }, 2000);
            } else if (response["status"] == 300) {
                login_btn.disabled = false;
                $("#session-options").modal("open");
                try {
                    document.getElementsByClassName('gy-center')[0].style = "-webkit-filter:blur(8px)";
                } catch (err) { }
            } else if (response["status"] == 302) {
                login_btn.disabled = false;

                username.value = "";
                password.value = "";
                document.getElementById("captcha").value = "";
                username.focus()
                M.toast({
                    "html": "You have entered invalid captcha. Try again."
                }, 2000);
                refreshCaptchaImage()
            } else if (response["status"] == 301) {
                login_btn.disabled = false;

                username.value = "";
                password.value = "";
                document.getElementById("captcha").value = "";
                M.toast({
                    "html": "You have entered incorrect password more than 5 times. Kindly contact administrator."
                });
                refreshCaptchaImage()
            } else if (response["status"] == 303) {
                login_btn.disabled = false;

                username.value = "";
                password.value = "";
                document.getElementById("captcha").value = "";
                M.toast({
                    "html": response["message"]
                });
                setTimeout(function () {
                    window.location.reload()
                }, 4000)
                refreshCaptchaImage()
            } else if (response["status"] == 401) {
                login_btn.disabled = false;

                M.toast({
                    "html": response["message"]
                }, 2000);
                setTimeout(function () {
                    $("#forgot-pass-btn").click()
                }, 2000);
            } else {
                login_btn.disabled = false;

                username.value = "";
                password.value = "";
                document.getElementById("captcha").value = "";
                username.focus()
                M.toast({
                    "html": "Please check your username or password"
                }, 2000);
                setTimeout(function () {
                    window.location.reload()
                }, 4000)

                refreshCaptchaImage()
            }
        },
        error: function (error) {
            try {
                document.getElementsByClassName('gy-center')[0].style["-webkit-filter"] = "";
            } catch (err) {
                console.log(err)
            }
        }
    }).responseJSON;

    return response;
}

function is_empty(){
    let username=document.getElementById("username").value;
    let password=document.getElementById("password_form").value;
    let captcha=document.getElementById("captcha").value;

    if (username !=""&& password !=""&& captcha !="")
    {
        document.getElementById("login_btn") !== null? document.getElementById("login_btn").removeAttribute("disabled"): document.getElementById("verify_btn").removeAttribute("disabled");
    }else{
        document.getElementById("login_btn") !== null? document.getElementById("login_btn").setAttribute("disabled", true): document.getElementById("verify_btn").setAttribute("disabled", true);
    }
}
function is_empty_otp(){
    verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
    let verification_code = ""
    for (let i = 0; i < verify_inputs.length; i++) {
        verification_code += verify_inputs[i].value
    }
    if (verification_code.length == 6) {
        document.getElementById("verify-login-otp-button").removeAttribute("disabled");
        document.getElementById("verify-login-otp-button").disabled = false;
    }else{
        document.getElementById("verify-login-otp-button").setAttribute("disabled", true);
        document.getElementById("verify-login-otp-button").disabled = true;
    }
}

function verify_login_otp_function(logout_other){
    let username = login_username;
    verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
    let incorrect_otp_error = document.getElementById('verify-incorrect-otp-error')
    incorrect_otp_error.style.display = 'none'
    for(let i = 0; i < verify_inputs.length; i++){
        verify_inputs[i].classList.remove('forgot-pass-otp-input-error')
        verify_inputs[i].classList.add('forgot-pass-otp-input-success')
    }
    tempusername = stripHTML(username).trim();
    if (tempusername == "") {
        showToast("Invalid Username")
        return;
    }
    if (validate_email(tempusername) == false) {
        showToast("Username should be a valid Email Id")
        return;
    }
    let verification_code = ""
    for (let i = 0; i < verify_inputs.length; i++) {
        verification_code += verify_inputs[i].value
    }
    
    if (verification_code.length != 6) {
    incorrect_otp_error.style.display = 'block'
        for(let i = 0; i < verify_inputs.length; i++){
            verify_inputs[i].classList.remove('forgot-pass-otp-input-success')
            verify_inputs[i].classList.add('forgot-pass-otp-input-error')
        }
        return
    }
    easychat_access_token = get_easychat_access_token();

    var json_string = JSON.stringify({
        'user_name': tempusername,
        'otp_access_token': verify_otp_token,
        'otp': verification_code,
        'easychat_access_token': easychat_access_token,
        'logout_other': logout_other,
    })

    encrypted_json_string = EncryptVariable(json_string)

    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/authentication/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);

            if (response["status"] == 200) {
                set_cookie("is_online", "1", "/");
                setTimeout(function () {
                    window.location = "/chat/home/";
                }, 2000);

                M.toast({
                    "html": "Welcome, " + response["username"]
                }, 2000);

            } else if (response["status"] == 300){
                $("#session-options").modal("open");
                try {
                    document.getElementsByClassName('gy-center')[0].style = "-webkit-filter:blur(8px)";
                } catch (err) { }
            } else if (response["status"] == 301) {
                showToast(response["status_message"], 2000)
                
            }else if (response["status"] == 302) {
                incorrect_otp_error.style.display = 'block'
                for(let i = 0; i < verify_inputs.length; i++){
                    verify_inputs[i].classList.remove('forgot-pass-otp-input-success')
                    verify_inputs[i].classList.add('forgot-pass-otp-input-error')
                }
            } else {
                showToast("Internal Error occoured. Please try after some time", 2000)
                verify_otp_token = ""
                if(document.getElementById("right-side-div-wrapper")){
                    document.getElementById("right-side-div-wrapper").style.display = "none"
                    document.getElementById("login-main-div").style.display = "block"
                }else{
                    document.getElementById("otp").style.display = "none"
                    document.getElementById("mobile-login-block").style.display = "block"
                }
                document.getElementById("username").value = ""
                login_username = ""
                document.getElementById("captcha").value = "";
                refreshCaptchaImage()
            }

        }
    }).responseJSON;

    response = custom_decrypt(response);
    response = JSON.parse(response);
    return response;
}

function disable_verify_otp_for_one_minute(){
    document.getElementById("resend_verify_login_otp").disabled = true
    document.getElementById("resend_verify_login_otp").style.cursor = "not-allowed"
    document.getElementById("resend_verify_login_otp").style.opacity = "0.25"
    if(document.getElementById("verify-timer")){
        document.getElementById("verify-timer").innerHTML = "00:60"
        let counter = 1
        let timer = setInterval(function(){
            let temp = (resend_verification_otp_time_limit/1000 - counter);
            if(temp === 0) clearInterval(timer)
            temp.toString().length === 2 ? document.getElementById("verify-timer").innerHTML =  "00:" + temp: document.getElementById("verify-timer").innerHTML = "00:0" + temp;
            counter++
        }, 1000)
    }
    setTimeout(function () {
        document.getElementById("resend_verify_login_otp").disabled = false
        document.getElementById("resend_verify_login_otp").style.cursor = "pointer"
        document.getElementById("resend_verify_login_otp").style.opacity = "1"
    }, resend_verification_otp_time_limit)
}

function verified_login_function(logout_other) {

    username = document.getElementById("username");
    password = document.getElementById("password_form");

    if (username.value == "") {
        alert("Please enter valid username");
        return;
    }
    if (password.value == "") {
        alert("Please enter valid password");
        return;
    }
    captcha = document.getElementById("captcha").value;
    if (captcha == "") {
        alert("Please enter valid captcha");
        return;
    }
    tempusername = stripHTML(username.value);
    encrypted_username = EncryptVariable(username.value)
    encrypted_password = EncryptVariable(password.value)
    logout_other = EncryptVariable(logout_other)
    var temppassword = "";
    for (var i = 0; i < encrypted_password.length; i++) {
        temppassword += "*";
    }
    encrypted_captcha = EncryptVariable(captcha)
    captcha_image = document.getElementById("captcha_image").src;
    encrypted_captcha_image = EncryptVariable(captcha_image)

    request_params = {
        username: encrypted_username,
        password: encrypted_password,
        captcha: encrypted_captcha,
        captcha_image: encrypted_captcha_image,
        logout_other: logout_other,
    }

    json_string = JSON.stringify(request_params);
    encrypted_data = EncryptVariable(json_string);
    encrypted_data = {
        "Request": encrypted_data
    };

    verify_btn = document.getElementById('verify_btn');
    verify_btn.disabled = true;
    verify_btn.setAttribute("disabled", '')

    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/otp-authentication/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: encrypted_data,
        success: function (response) {
            try {
                document.getElementsByClassName('gy-center')[0].style["-webkit-filter"] = "";
            } catch (err) { }
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                verify_otp_token = response["otp_access_token"]
                verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
                let incorrect_otp_error = document.getElementById('verify-incorrect-otp-error')
                incorrect_otp_error.style.display = 'none'
                for(let i = 0; i < verify_inputs.length; i++){
                    verify_inputs[i].classList.remove('forgot-pass-otp-input-error')
                    verify_inputs[i].classList.add('forgot-pass-otp-input-success')
                    verify_inputs[i].value = ''
                }
                if( document.getElementById("login-main-div") ){
                    document.getElementById("login-main-div").style.display = "none"
                    document.getElementById("right-side-div-wrapper").style.display = "block"
                }else{
                    document.getElementById("mobile-login-block").style.display = "none"
                    document.getElementById("otp").style.display = "block"
                }
                login_username = username.value
                document.getElementById("otp-multifactor-username").innerHTML = login_username
                document.getElementById("verify-login-otp-button").disabled = true;
                document.getElementById("verify-login-otp-button").setAttribute("disabled", true);
                username.value = "";
                password.value = "";
                document.getElementById("captcha").value = "";
                refreshCaptchaImage()
                disable_verify_otp_for_one_minute()
                document.getElementById('verify_btn').disabled = false
            } else if (response["status"] == 300) {
                verify_btn.disabled = false;
                $("#session-options").modal("open");
                try {
                    document.getElementsByClassName('gy-center')[0].style = "-webkit-filter:blur(8px)";
                } catch (err) { }
            } else if (response["status"] == 302) {
                verify_btn.disabled = false;

                username.value = "";
                password.value = "";
                document.getElementById("captcha").value = "";
                username.focus()
                M.toast({
                    "html": "You have entered invalid captcha. Try again."
                }, 2000);
                refreshCaptchaImage()
            } else if (response["status"] == 301) {
                verify_btn.disabled = false;

                username.value = "";
                password.value = "";
                document.getElementById("captcha").value = "";
                M.toast({
                    "html": "You have entered incorrect password more than 5 times. Kindly contact administrator."
                });
                refreshCaptchaImage()
            } else if (response["status"] == 303) {
                verify_btn.disabled = false;

                username.value = "";
                password.value = "";
                document.getElementById("captcha").value = "";
                M.toast({
                    "html": response["message"]
                });
                setTimeout(function () {
                    window.location.reload()
                }, 4000)
                refreshCaptchaImage()
            } else if (response["status"] == 304) {
                verify_btn.disabled = false;
                document.getElementById("captcha").value = "";
                M.toast({
                    "html": response["message"]
                });
                refreshCaptchaImage()
            } else if (response["status"] == 401) {
                verify_btn.disabled = false;

                M.toast({
                    "html": response["message"]
                }, 2000);
                setTimeout(function () {
                    $("#forgot-pass-btn").click()
                }, 2000);
            } else {
                verify_btn.disabled = false;

                username.value = "";
                password.value = "";
                document.getElementById("captcha").value = "";
                username.focus()
                M.toast({
                    "html": "Please check your username or password"
                }, 2000);
                setTimeout(function () {
                    window.location.reload()
                }, 4000)

                refreshCaptchaImage()
            }
        },
        error: function (error) {
            try {
                document.getElementsByClassName('gy-center')[0].style["-webkit-filter"] = "";
            } catch (err) {
                console.log(err)
            }
        }
    }).responseJSON;

    response = custom_decrypt(response);
    response = JSON.parse(response);
    return response;
}

function edit_verified_username(){
    document.getElementById('verify_btn').disabled = false
    document.getElementById('verify_btn').setAttribute("disabled", true)
    if(document.getElementById("right-side-div-wrapper")){
        verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
        let incorrect_otp_error = document.getElementById('verify-incorrect-otp-error')
        incorrect_otp_error.style.display = 'none'
        for(let i = 0; i < verify_inputs.length; i++){
            verify_inputs[i].classList.remove('forgot-pass-otp-input-error')
            verify_inputs[i].classList.add('forgot-pass-otp-input-success')
        }
        document.getElementById("right-side-div-wrapper").style.display = "none"
        document.getElementById("login-main-div").style.display = "block"
    }else{
        document.getElementById("mobile-login-block").style.display = "block"
        document.getElementById("otp").style.display = "none"
    }
    document.getElementById("username").value = login_username
    verify_otp_token = ""
    login_username = ""
    refreshCaptchaImage()
}

function cancel_login_otp_process(){
    document.getElementById('verify_btn').disabled = false
    document.getElementById('verify_btn').setAttribute("disabled", true)
    if(document.getElementById("right-side-div-wrapper")){
        verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
        let incorrect_otp_error = document.getElementById('verify-incorrect-otp-error')
        incorrect_otp_error.style.display = 'none'
        for(let i = 0; i < verify_inputs.length; i++){
            verify_inputs[i].classList.remove('forgot-pass-otp-input-error')
            verify_inputs[i].classList.add('forgot-pass-otp-input-success')
        }
        document.getElementById("right-side-div-wrapper").style.display = "none"
        document.getElementById("login-main-div").style.display = "block"
    }else{
        document.getElementById("mobile-login-block").style.display = "block"
        document.getElementById("otp").style.display = "none"
    }
    document.getElementById("username").value = ""
    document.getElementById("captcha").value = "";
    verify_otp_token = ""
    login_username = ""
    refreshCaptchaImage()
}

function sign_up_function() {

    first_name = document.getElementById("first_name").value;
    last_name = document.getElementById("last_name").value;
    email_id = document.getElementById("email_id").value;
    var text_format = /^[a-zA-Z]+$/;
    document.getElementById('firstname_error_text').style.display = 'none';
    document.getElementById('lastname_error_text').style.display = 'none';
    document.getElementById('email_error_text').style.display = 'none';

    if (first_name.value == "" || text_format.test(first_name) == false) {
        document.getElementById('firstname_error_text').style.display = 'block';
        return;
    }
    if (last_name.value == "" || text_format.test(last_name) == false) {
        document.getElementById('lastname_error_text').style.display = 'block';
        return;
    }
    if (validate_email(email_id) == false) {
        document.getElementById('email_error_text').style.display = 'block';
        return;
    }

    var json_string = JSON.stringify({
        'first_name': first_name,
        'last_name': last_name,
        'email_id': email_id,
    })
    encrypted_json_string = EncryptVariable(json_string)
    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/signup/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                window.location = "/chat/redirect-login/?token=" + response["token"]
            } else if (response["status"] == 300) {
                M.toast({
                    "html": "This account already exists"
                }, 2000);
            } else if (response["status"] == 305) {
                M.toast({
                    "html": "You have crossed the maximum limit of 5 attempts. Please try again later."
                }, 2000);
            } else if (response["status"] == 302) {
                M.toast({
                    "html": response["status_message"]
                }, 2000);
            }
            else {
                M.toast({
                    "html": "We are facing some technical issues, please try later."
                }, 2000);
            }

        },
        error: function (error) {
            console.log(error)
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
        }
    }).responseJSON;

    return response;
}

function resend_sign_up_function(access_token) {

    token = access_token

    var json_string = JSON.stringify({
        'access_token': token,
    })
    encrypted_json_string = EncryptVariable(json_string)
    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/resend-link/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                window.location = "/chat/redirect-login/?token=" + response["token"]
            } else if (response["status"] == 300) {
                M.toast({
                    "html": "Account has already been created."
                }, 2000);
            } else {
                M.toast({
                    "html": "We are facing some technical issues, please try later."
                }, 2000);
            }

        },
        error: function (error) {
            console.log(error)
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
        }
    }).responseJSON;

    return response;
}

function confirm_password_function() {

    url_params = get_url_vars()
    access_token = unescape(url_params["token"])

    password_new = document.getElementById("password").value
    confirm_password = document.getElementById("confirm_password").value

    document.getElementById('password_does_not_match').style.display = "none";

    if (password_new == "" || confirm_password == "") {
        M.toast({
            "html": "Please fill all the fields."
        }, 2000);
        return;
    }

    if (password_new != confirm_password) {
        document.getElementById('password_does_not_match').style.display = "block";
        return;
    }

    password_regex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,32}$/

    if (password_regex.test(password_new) == false) {

        one_upercase_and_lowercase_regex = /(?=.*[a-z])(?=.*[A-Z])/
        if (one_upercase_and_lowercase_regex.test(password_new) == false) {

            document.getElementById("password-one-lower-one-upper-error-text").style.display = "block";
        } else {

            document.getElementById("password-one-lower-one-upper-error-text").style.display = "none";
        }
        atleast_one_no_regex = /(?=.*\d)/
        if (atleast_one_no_regex.test(password_new) == false) {

            document.getElementById("password-one-number-error-text").style.display = "block";
        } else {

            document.getElementById("password-one-number-error-text").style.display = "none";
        }
        special_char_regex = /(?=.*[@$!%*?&])/
        if (special_char_regex.test(password_new) == false) {

            document.getElementById("password-one-special-char-match-error-text").style.display = "block";
        } else {

            document.getElementById("password-one-special-char-match-error-text").style.display = "none";
        }
        if (password_new.length < 8 || password_new.length > 32) {

            document.getElementById("password-length-error-text").style.display = "block";
        } else {

            document.getElementById("password-length-error-text").style.display = "none";
        }
        return;
    }

    document.getElementById("password-one-lower-one-upper-error-text").style.display = "none";
    document.getElementById("password-one-number-error-text").style.display = "none";
    document.getElementById("password-one-special-char-match-error-text").style.display = "none";
    document.getElementById("password-length-error-text").style.display = "none";

    var json_string = JSON.stringify({
        'access_token': access_token,
        'password_new': password_new
    })
    encrypted_json_string = EncryptVariable(json_string)
    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/password-setup/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                document.getElementById('create_pass_success_div').style.display = "block";
                document.getElementById('create_pass_div').style.display = "none";
            } else {
                M.toast({
                    "html": "We are facing some technical issues, please try later."
                }, 2000);
            }

        }
    }).responseJSON;

    return response;
}



$(document).on("click", "#login_btn", function () {
    login_function(false);
});
$(document).on("click", "#verify_btn", function () {
    verified_login_function(false);
});
$(document).on("click", "#verify-login-otp-button", function () {
    verify_login_otp_function(false);
});
$(document).on("click", "#signup_btn", function () {
    sign_up_function();
});


$(document).on("click", "#confirm_password_btn", function () {
    confirm_password_function();
});

$(document).on("click", "#multifactor-login-session", function () {
    verify_login_otp_function(true);
});
$(document).on("click", "#multifactor-login-session-close", function () {
    try {
        document.getElementsByClassName('gy-center')[0].style["-webkit-filter"] = "";
    } catch (err) { }
});
$(document).on("click", "#login-session", function () {
    login_function(true);
    document.getElementById("username").value = "";
    document.getElementById("password_form").value = "";
    document.getElementById("captcha").value = "";
});
$(document).on("click", "#login-session-close", function () {
    try {
        document.getElementsByClassName('gy-center')[0].style["-webkit-filter"] = "";
    } catch (err) { }
    document.getElementById("username").value = "";
    document.getElementById("password_form").value = "";
    document.getElementById("captcha").value = "";
    refreshCaptchaImage();
});

$(document).on("click", "#forgot-pass-btn, #forgot-pass-link", function (e) {
    document.getElementById("forgot-pass-back-username-error-text").style.display = "none";
    document.getElementById("forgot-pass-back-error-text").style.display = "none";
    document.getElementById("forgot-password-catcha").value = "";
    $(".login-block").hide()
    $("#forgot-password-div").show()
    document.getElementById("reset-password-username").value = "";
    var verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
    for (var i = 0; i < verify_inputs.length; i++) {
        verify_inputs[i].value = "";
    }

    refresh_forgot_password_captcha_image();
    try {
        document.getElementsByClassName("forgot-pass-step-1")[0].style.display = "block";
    } catch (err) {
        console.log(err)
    }
});

$('#reset-password-username').on('keypress', function (e) {
    if (event.key === " ")
        return false;
});
$('#new-password').on('keypress', function (e) {
    if (event.key === " ")
        return false;
});
$('#retype-password').on('keypress', function (e) {
    if (event.key === " ")
        return false;
});
$(".forgot-pass-otp-input").keydown(function (e) {
    var key = e.keyCode || e.charCode;
    if (key == 8 || key == 46) {
        e.preventDefault();
        e.stopPropagation();
    }
})
$('.forgot-pass-otp-input').on('keypress', function (e) {
    keys = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    if(keys.indexOf(event.key) > -1) {
        already_key_pressed++;
    }
    if(already_key_pressed > 1) {
        return false;
    }
    if (keys.indexOf(this.value) != -1) {
        if(keys.indexOf(event.key) != -1){
            $(this).val(event.key)
        }
    }
    return keys.indexOf(event.key) > -1
});
$('.forgot-pass-otp-input').on('keyup', function (e) {
    keys = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    let verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
    let incorrect_forgot_otp_error = document.getElementById('forgot-incorrect-otp-error')
    let incorrect_verify_otp_error = document.getElementById('verify-incorrect-otp-error')
    if (keys.indexOf(this.value) != -1) {
        if(keys.indexOf(event.key) != -1){
            incorrect_forgot_otp_error.style.display = 'none'
            incorrect_verify_otp_error.style.display = 'none'
            for(let i = 0; i < verify_inputs.length; i++){
                verify_inputs[i].classList.remove('forgot-pass-otp-input-error')
                verify_inputs[i].classList.add('forgot-pass-otp-input-success')
            }
            $(this).next().focus();
            already_key_pressed = 0;
        }
    }
    var pressed_key = event.keyCode || event.charCode;
    if (pressed_key == 8 || pressed_key == 46) {
        incorrect_forgot_otp_error.style.display = 'none'
        incorrect_verify_otp_error.style.display = 'none'
        for(let i = 0; i < verify_inputs.length; i++){
            verify_inputs[i].classList.remove('forgot-pass-otp-input-error')
            verify_inputs[i].classList.add('forgot-pass-otp-input-success')
        }
        if(this.value == ''){
            $(this).prev().focus();
            $(this).prev().val('');
        }else{
            $(this).val('');
            $(this).focus();
        }
        already_key_pressed = 0;
    }
});

$("#resend_forgot_password_otp").on('click', function (e) {

    resend_mail_for_otp();


});

$("#resend_verify_login_otp").on('click', function (e) {
    resend_verify_mail_for_otp();
    disable_verify_otp_for_one_minute();
});
$("#verify_login_cancel").on('click', function (e) {
    cancel_login_otp_process();
});

$("#verify-reset-password-otp-button").on('click', function (e) {

    verify_forgot_password_otp();

});


$("#reset-pass-btn").on('click', function (e) {

    save_reseted_password_for_forgot_password();

});

function save_reseted_password_for_forgot_password() {

    let access_token = get_url_vars()['token']

    password_new = document.getElementById("new_password").value
    confirm_password = document.getElementById("confirm_new_password").value

    password_regex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,32}$/

    if (password_regex.test(password_new) == false) {

        one_upercase_and_lowercase_regex = /(?=.*[a-z])(?=.*[A-Z])/
        if (one_upercase_and_lowercase_regex.test(password_new) == false) {

            document.getElementById("password-one-lower-one-upper-error-text").style.display = "block";
        } else {

            document.getElementById("password-one-lower-one-upper-error-text").style.display = "none";
        }
        atleast_one_no_regex = /(?=.*\d)/
        if (atleast_one_no_regex.test(password_new) == false) {

            document.getElementById("password-one-number-error-text").style.display = "block";
        } else {

            document.getElementById("password-one-number-error-text").style.display = "none";
        }
        special_char_regex = /(?=.*[@$!%*?&])/
        if (special_char_regex.test(password_new) == false) {

            document.getElementById("password-one-special-char-match-error-text").style.display = "block";
        } else {

            document.getElementById("password-one-special-char-match-error-text").style.display = "none";
        }

        if (password_new.length < 8 || password_new.length > 32) {

            document.getElementById("password-length-error-text").style.display = "block";
        } else {

            document.getElementById("password-length-error-text").style.display = "none";
        }
        return;
    }

    document.getElementById("password-one-lower-one-upper-error-text").style.display = "none";
    document.getElementById("password-one-number-error-text").style.display = "none";
    document.getElementById("password-one-special-char-match-error-text").style.display = "none";
    document.getElementById("password-length-error-text").style.display = "none";

    if (password_new == "" || confirm_password == "") {
        showToast("passwords can not be empty")
        return;
    }

    if (password_new != confirm_password) {
        document.getElementById("password-match-error-text").style.display = "block"
        return;
    }
    document.getElementById("password-match-error-text").style.display = "none"
    var json_string = JSON.stringify({
        'access_token': access_token,
        'password_new': password_new
    })

    encrypted_json_string = EncryptVariable(json_string)
    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/save-reseted-password-for-forgot-password/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                $("#reset-password-div").hide()
                $("#reset-password-succesfull-div").show()
            } else {
                showToast(response["message"])
            }

        }
    }).responseJSON;

    return response;


}



function disable_resend_otp_button_for_thirty_seconds() {

    document.getElementById("resend_forgot_password_otp").disabled = true
    document.getElementById("resend_forgot_password_otp").style.cursor = "not-allowed"
    document.getElementById("resend_forgot_password_otp").style.opacity = "0.25"
    document.getElementById("resend_forgot_password_otp").classList.add("disabled-link")
    if(document.getElementById("forgot-timer")){
        document.getElementById("forgot-timer").innerHTML = "00:30"
        let counter = 1
        let timer = setInterval(function(){
            let temp = (resend_otp_time_limit/1000 - counter);
            if(temp === 0) clearInterval(timer)
            temp.toString().length === 2 ? document.getElementById("forgot-timer").innerHTML =  "00:" + temp: document.getElementById("forgot-timer").innerHTML = "00:0" + temp;
            counter++
        }, 1000)
    }
    setTimeout(function () {
        document.getElementById("resend_forgot_password_otp").disabled = false
        document.getElementById("resend_forgot_password_otp").style.cursor = "pointer"
        document.getElementById("resend_forgot_password_otp").style.opacity = "1"
        document.getElementById("resend_forgot_password_otp").classList.remove("disabled-link")
    }, resend_otp_time_limit)

}

function verify_forgot_password_otp() {
    username = document.getElementById("reset-password-username");
    verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
    let incorrect_otp_error = document.getElementById('forgot-incorrect-otp-error')
    incorrect_otp_error.style.display = 'none'
    for(let i = 0; i < verify_inputs.length; i++){
        verify_inputs[i].classList.remove('forgot-pass-otp-input-error')
        verify_inputs[i].classList.add('forgot-pass-otp-input-success')
    }
    tempusername = stripHTML(username.value).trim();
    if (tempusername == "") {
        showToast("Invalid Username")
        return;
    }
    if (validate_email(tempusername) == false) {
        showToast("Username should be a valid Email Id")
        return;
    }
    var verification_code = ""
    for (var i = 0; i < verify_inputs.length; i++) {
        verification_code += verify_inputs[i].value
    }

    if (verification_code.length != 6) {
        document.getElementById("forgot-password-invalid-otp-error").style.display = "block";
        return
    }

    document.getElementById("forgot-password-invalid-otp-error").style.display = "none";

    var json_string = JSON.stringify({
        'user_name': tempusername,
        'otp_access_token': verify_otp_token,
        'otp': verification_code,
    })

    encrypted_json_string = EncryptVariable(json_string)

    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/forgot-password-verify-otp/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                $("#forgot-pass-otp").modal("close")
                $("#forgot-pass-otp-sucess").modal('open')
                $("#forgot-pass-otp-div").hide()
                $("#reset-password-sucess-div").show()

            } else if (response["status"] == 301) {
                showToast(response["status_message"], 2000)
                $("#forgot-pass-otp").modal("close")
            }else if(response["status"] == 400){
                for(let i = 0; i < verify_inputs.length; i++){
                    verify_inputs[i].classList.remove('forgot-pass-otp-input-success')
                    verify_inputs[i].classList.add('forgot-pass-otp-input-error')
                }
                incorrect_otp_error.style.display = 'block'
            } else {
                document.getElementById("forgot-password-invalid-otp-error").style.display = "block";
            }

        }
    }).responseJSON;

    response = custom_decrypt(response);
    response = JSON.parse(response);
    return response;
}



function resend_mail_for_otp() {
    username = document.getElementById("reset-password-username");
    tempusername = stripHTML(username.value).trim();
    if (tempusername == "") {
        document.getElementById("forgot-pass-back-username-error-text").style.display = "block";
        return;
    }
    if (validate_email(tempusername) == false) {
        document.getElementById("forgot-pass-back-username-error-text").style.display = "block";
        return;
    }
    document.getElementById("forgot-pass-back-username-error-text").style.display = "none";

    var json_string = JSON.stringify({
        'user_name': tempusername,
        'otp_access_token': verify_otp_token,
    })

    encrypted_json_string = EncryptVariable(json_string)

    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/forgot-password-resend-otp/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);

            if (response["status"] == 200) {
                showToast("OTP Resent Succesfully", 2000)
                disable_resend_otp_button_for_thirty_seconds();
            } else if (response["status"] == 301) {
                disable_resend_otp_button_for_thirty_seconds();
            } else {
                showToast("Thier was some error in Resending The OTP , Please Refresh and Try Again.", 2000)
                disable_resend_otp_button_for_thirty_seconds();
            }

        }
    }).responseJSON;

    response = custom_decrypt(response);
    response = JSON.parse(response);
    return response;

}

function resend_verify_mail_for_otp() {
    username = login_username
    tempusername = stripHTML(username).trim();
    if (tempusername == "") {
        document.getElementById("forgot-pass-back-username-error-text").style.display = "block";
        return;
    }
    if (validate_email(tempusername) == false) {
        document.getElementById("forgot-pass-back-username-error-text").style.display = "block";
        return;
    }

    var json_string = JSON.stringify({
        'user_name': tempusername,
        'otp_access_token': verify_otp_token,
    })

    encrypted_json_string = EncryptVariable(json_string)

    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/resend-multifactor-login-otp/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);

            if (response["status"] == 200) {
                showToast("OTP Resent Succesfully", 2000)
                disable_verify_otp_for_one_minute();
            } else if (response["status"] == 301) {
                showToast(response["status_message"], 2000)
                disable_verify_otp_for_one_minute();
            } else {
                showToast("Thier was some error in Resending The OTP , Please Refresh and Try Again.", 2000)
                disable_verify_otp_for_one_minute();
            }

        }
    }).responseJSON;

    response = custom_decrypt(response);
    response = JSON.parse(response);
    return response;

}

$(document).on("click", "#forgot-password-edit-username-button", function (e) {

    $("#forgot-pass-otp-div").hide()
    $("#forgot-password-div").show()

});

$(document).on("click", "#forgot-password-modal-get-otp-button", function (e) {

    verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
    let incorrect_otp_error = document.getElementById('forgot-incorrect-otp-error')
    for(let i = 0; i < verify_inputs.length; i++){
        verify_inputs[i].classList.remove('forgot-pass-otp-input-error')
        verify_inputs[i].classList.add('forgot-pass-otp-input-success')
    }
    username = document.getElementById("reset-password-username");
    tempusername = stripHTML(username.value).trim();
    if (tempusername == "") {
        document.getElementById("forgot-pass-back-username-error-text").style.display = "block";
        return;
    }
    if (validate_email(tempusername) == false) {
        document.getElementById("forgot-pass-back-username-error-text").style.display = "block";
        return;
    }
    document.getElementById("forgot-pass-back-username-error-text").style.display = "none";
    captcha = document.getElementById("forgot-password-catcha").value;
    if (captcha == "") {
        document.getElementById("forgot-pass-back-error-text").style.display = "block"
        refresh_forgot_password_captcha_image()
        return;
    }
    document.getElementById("forgot-pass-back-error-text").style.display = "none"
    captcha_image = document.getElementById("forgot_password_captcha_image").src.split("/");
    captcha_image = captcha_image[captcha_image.length - 1];


    var json_string = JSON.stringify({
        'user_name': tempusername,
        'captcha': captcha,
        'captcha_image': captcha_image
    })

    encrypted_json_string = EncryptVariable(json_string)

    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/check-user-exists/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);

            if (response["status"] == 200) {

                refresh_forgot_password_captcha_image()
                document.getElementById("forgot-password-catcha").value = "";
                $("#otp-modal-username").html(tempusername)
                $("#forgot-pass-back").modal('close')
                $("#forgot-pass-otp").modal('open')
                $("#forgot-pass-otp-div").show()
                $("#forgot-password-div").hide()
                incorrect_otp_error.style.display = "none"
                disable_resend_otp_button_for_thirty_seconds();
                verify_otp_token = response["otp_access_token"]

            } else if (response["status"] == 303) {
                refresh_forgot_password_captcha_image()
                document.getElementById("forgot-password-catcha").value = "";
                $("#otp-modal-username").html(tempusername)
                $("#forgot-pass-back").modal('close')
                $("#forgot-pass-otp").modal('open')
                $("#forgot-pass-otp-div").show()
                $("#forgot-password-div").hide()
                incorrect_otp_error.style.display = "none"
                disable_resend_otp_button_for_thirty_seconds();
                verify_otp_token = response["otp_access_token"]
            } else if (response["status"] == 304) {
                document.getElementById("forgot-password-catcha").value = "";
                document.getElementById("forgot-pass-back-error-text").style.display = "block"
                refresh_forgot_password_captcha_image();
                document.getElementById("forgot-password-catcha").value = "";
            } else if (response["status"] == 305) {
                document.getElementById("error-user-exists").innerText = "Note that you have exceed the number of reset password attempts, please try again after 24 hour.";
                document.getElementById("error-user-exists").style.display = "block";
                refresh_forgot_password_captcha_image();
                document.getElementById("forgot-password-catcha").value = "";
            }
        }
    }).responseJSON;

    response = custom_decrypt(response);
    response = JSON.parse(response);
    return response;
});

$(document).on("click", ".verify-code-btn", function (e) {

    username = document.getElementById("reset-password-username");

    verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
    var verification_code = ""
    for (var i = 0; i < verify_inputs.length; i++) {
        verification_code += verify_inputs[i].value
    }
    if (verification_code.length != 4) {
        alert("Please provide valid verification code")
        return
    }
    tempusername = stripHTML(username.value);
    var json_string = JSON.stringify({
        'user_name': tempusername,
        'verification_code': verification_code
    })
    document.getElementsByClassName("verify-code-btn")[0].style.display = "none";
    document.getElementById("easychat-reset-pass-loader-2").style.display = "block";
    encrypted_json_string = EncryptVariable(json_string)

    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/verify-reset-pass-code/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            document.getElementsByClassName("verify-code-btn")[0].style.display = "block";
            document.getElementById("easychat-reset-pass-loader-2").style.display = "none";
            if (response["status"] == 200) {
                document.getElementsByClassName("forgot-pass-step-2")[0].style.display = "none";
                document.getElementsByClassName("forgot-pass-step-3")[0].style.display = "block";
            } else if (response["status"] == 302) {
                document.getElementById("error-verify-code").innerText = "Wrong code!! Please try again." + response["attempts_remaining"] + " retry remaining";
                document.getElementById("error-verify-code").style.display = "block";
            } else if (response["status"] == 303) {
                document.getElementById("error-verify-code").innerText = "No retry remaining! Please try after some time";
                document.getElementById("error-verify-code").style.display = "block";
            }
        }
    }).responseJSON;

    return response;
});

$(document).on("click", "#save-password", function (e) {

    new_password = document.getElementById("new-password").value;
    retype_password = document.getElementById("retype-password").value;

    if (new_password.trim() == "") {
        alert("Password cannot be blank.")
        return
    }
    if (new_password != retype_password) {
        alert("Passwords are not matching. please check.")
        return
    }

    verify_inputs = document.getElementsByClassName("forgot-pass-otp-input")
    var verification_code = ""
    for (var i = 0; i < verify_inputs.length; i++) {
        verification_code += verify_inputs[i].value
    }

    username = document.getElementById("reset-password-username");
    tempusername = stripHTML(username.value);

    var json_string = JSON.stringify({
        'user_name': tempusername,
        'verification_code': verification_code,
        'new_password': new_password,
    })
    document.getElementById("save-password").style.display = "none";
    document.getElementById("easychat-reset-pass-loader-3").style.display = "block";
    encrypted_json_string = EncryptVariable(json_string)

    csrf_token = get_csrf_token();
    var response = $.ajax({
        url: '/chat/reset-pass/',
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: encrypted_json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            document.getElementById("save-password").style.display = "block";
            document.getElementById("easychat-reset-pass-loader-3").style.display = "none";
            if (response["status"] == 200) {
                M.toast({
                    'html': 'Password changed. Please sign in with new password.'
                }, 2000);
                document.getElementsByClassName("forgot-pass-step-3")[0].style.display = "none";
                document.getElementsByClassName("forgot-pass-back")[0].style.display = "none";
            } else if (response["status"] == 401) {
                M.toast({
                    'html': response["message"]
                }, 2000);
            } else {
                M.toast({
                    'html': 'Error: Unable to change password'
                }, 2000);

            }
        }
    }).responseJSON;

    return response;
});


function refreshCaptchaImage() {
    captcha_image = document.getElementById("captcha_image").src;
    encrypted_captcha_image = EncryptVariable(captcha_image)
    $.ajax({
        url: '/chat/get-captcha-image/',
        type: 'POST',
        async: false,
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            captcha_image: encrypted_captcha_image,
        },
        success: function (response) {

            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {
                host_name = window.location.host;
                host_name = host_name.toString();
                new_captcha_image = response["captcha_image"];
                old_captch_image = document.getElementById("captcha_image");
                old_captch_image.src = new_captcha_image;
            } else {
                M.toast({
                    'html': 'Unable to connect to server. Please try again later.'
                }, 2000);
            }
        },
        error: function (error) {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
        }
    });
}


function refresh_forgot_password_captcha_image() {
    captcha_image = document.getElementById("forgot_password_captcha_image").src;
    encrypted_captcha_image = EncryptVariable(captcha_image)
    $.ajax({
        url: '/chat/get-captcha-image/',
        type: 'POST',
        async: false,
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            captcha_image: encrypted_captcha_image,
        },
        success: function (response) {

            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {
                host_name = window.location.host;
                host_name = host_name.toString();
                new_captcha_image = response["captcha_image"];
                old_captch_image = document.getElementById("forgot_password_captcha_image");
                old_captch_image.src = new_captcha_image;
            } else {
                M.toast({
                    'html': 'Unable to connect to server. Please try again later.'
                }, 2000);
            }
        },
        error: function (error) {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
        }
    });
}


/////////////////////////////////////////////////////// Developer Authentication JS End

function renameTree(new_name, tree_pk, parent_pk) {
    var json_string = JSON.stringify({
        tree_name: new_name,
        tree_pk: tree_pk,
        parent_pk: parent_pk
    })

    json_string = EncryptVariable(json_string);

    $.ajax({
        url: '/chat/rename-tree/',
        type: 'POST',
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {
                M.toast({
                    'html': 'Tree renamed successfully!'
                }, 2000);
            } else {
                M.toast({
                    'html': 'Unable to connect to server. Please try again later.'
                }, 2000);
            }
        },
        error: function (error) {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
        }
    });
}

function deleteTree(tree_pk, intent_pk, parent_pk) {
    var json_string = JSON.stringify({
        tree_pk: tree_pk,
        intent_pk: intent_pk,
        parent_pk: parent_pk
    })

    json_string = EncryptVariable(json_string)

    var response = $.ajax({
        url: '/chat/delete-tree/',
        type: 'POST',
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            return response;
        },
        error: function (error) {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
            return error;
        }
    }).responseJSON;

    response = custom_decrypt(response)
    response = JSON.parse(response);
    return response;
}

function deleteTreeNode(tree_pk, intent_pk, parent_pk) {
    var json_string = JSON.stringify({
        tree_pk: tree_pk,
        intent_pk: intent_pk,
        parent_pk: parent_pk
    })

    json_string = EncryptVariable(json_string)

    var response = $.ajax({
        url: '/chat/delete-tree-node/',
        type: 'POST',
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            return response;
        },
        error: function (error) {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
            return error;
        }
    }).responseJSON;

    response = custom_decrypt(response)
    response = JSON.parse(response);
    return response;
}

function pasteTreeNode(tree_pk, intent_pk, parent_pk, copy_tree_id) {
    var json_string = JSON.stringify({
        tree_pk: tree_pk,
        intent_pk: intent_pk,
        parent_pk: parent_pk,
        copy_tree_id: copy_tree_id
    })

    json_string = EncryptVariable(json_string)

    var response = $.ajax({
        url: '/chat/paste-tree-node/',
        type: 'POST',
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            return response;
        },
        error: function (error) {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
            return error;
        }
    }).responseJSON;

    response = custom_decrypt(response)
    response = JSON.parse(response);
    return response;
}

function createChildTree(tree_pk, tree_name) {
    tree_name = stripHTML(tree_name)
    tree_name = tree_name.trim()
    if (tree_name == "") {
        $("#child_tree_name").val("")
        M.toast({
            'html': 'Child Tree name cannot be empty!'
        }, 2000);
        return false;
    }

    var json_string = JSON.stringify({
        tree_pk: tree_pk,
        tree_name: tree_name
    })

    json_string = EncryptVariable(json_string)

    $.ajax({
        url: '/chat/create-tree/',
        type: 'POST',
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {
                M.toast({
                    'html': 'Child Tree Created successfully!'
                }, 2000);
                setTimeout(function () {
                    window.location = "/chat/edit-intent/?intent_pk=" + global_select_intent_id + "&selected_language=en";
                }, 2000);
            } else {
                M.toast({
                    'html': 'Unable to connect to server. Please try again later.'
                }, 2000);
            }
        },
        error: function (error) {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
        }
    });
}

function insertChildTree(tree_pk, tree_name) {
    var json_string = JSON.stringify({
        tree_pk: tree_pk,
        tree_name: tree_name
    })

    json_string = EncryptVariable(json_string)

    $.ajax({
        url: '/chat/insert-tree/',
        type: 'POST',
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {
                M.toast({
                    'html': 'Child Tree Inserted successfully!'
                }, 2000);
                setTimeout(function () {
                    window.location = "/chat/edit-tree/?intent_pk=" + global_select_intent_id + "&parent_pk=" + tree_pk + "&tree_pk=" + response["child_tree_pk"];
                }, 2000);
            } else {
                M.toast({
                    'html': 'Unable to connect to server. Please try again later.'
                }, 2000);
            }
        },
        error: function (error) {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
        }
    });
}

window.addEventListener('scroll', function(e){
    $("#menu-div").hide();
}, true);
 

$(document).on("click", function (e) {
    $("#menu-div").hide();
    $("#api-menu-div").hide();
});

$(document).on("click", "#agree-create-tree", function (e) {
    if (global_select_tree_id != -1) {
        createChildTree(global_select_tree_id, $("#child_tree_name").val());
    }
});

$(document).on("click", "#agree-insert-tree", function (e) {
    if (global_select_tree_id != -1) {
        insertChildTree(global_select_tree_id, $("#insert_child_tree_name").val());
    }
});

$(document).on("click", "#agree-rename-tree", function (e) {
    if (global_select_tree_id != -1) {
        renameTree($("#modal_tree_name").val(), global_select_tree_id, global_select_parent_id);
    }

    e.preventDefault();
    if (global_select_intent_id != -1) {
        renderTreeStructureByIntentID(global_select_intent_id);
        window.location = '/chat/edit-intent/?intent_pk=' + global_select_intent_id;
    }
});

$(document).on("click", "#agree-delete-tree", function (e) {
    if (global_select_tree_id != -1 && global_select_intent_id != -1) {
        response = deleteTree(global_select_tree_id, global_select_intent_id, global_select_parent_id);
        if (response['status'] == 200) {
            if (response["is_root"] == true) {
                M.toast({
                    'html': 'You cannot perform this action'
                }, 2000);
                // setTimeout(function() {
                //     window.location = '/chat/intent/';
                // }, 2000);
            } else {
                M.toast({
                    'html': 'Tree deleted successfully!'
                }, 2000);
                renderTreeStructureByIntentID(global_select_intent_id);
                setTimeout(function () {
                    window.location = '/chat/edit-intent/?intent_pk=' + global_select_intent_id;
                }, 2000);
            }
        } else {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
            setTimeout(function () {
                window.location.reload();
            }, 2000);
        }
    }
});

$(document).on("click", "#create-tree-node", function (e) {
    $("#create-tree-modal").modal("open");
});

$(document).on("click", "#delete-tree-flow", function (e) {
    $("#delete-tree-modal-info").html("<li>Performing above task will delete selected Intent( " + global_select_tree_name + " )</li><li>All child intents of \"" + global_select_tree_name + "\" will be deleted.</li>")
    $("#delete-tree-modal").modal("open");
});

$(document).on("click", "#delete-tree-node", function (e) {
    $("#delete-node-modal-info").html("<li>Performing above task will delete selected Intent( " + global_select_tree_name + " )</li><li>All child intents of \"" + global_select_tree_name + "\"will be retained and will be connected to " + global_select_tree_name + "'s parent node.</li>");
    $("#delete-node-modal").modal("open");
});

$(document).on("click", "#insert-tree-node", function (e) {
    $("#insert-tree-modal-info").html("<li>Performing above task will create new node between \"" + global_select_tree_name + "\"and its childs</li>");
    $("#insert-tree-modal").modal("open");
});

$(document).on("click", "#copy-tree-node", function (e) {
    if (global_select_tree_id != -1 && global_select_intent_id != -1) {
        set_cookie("copy_tree_id", global_select_tree_id, "/chat/")
        M.toast({
            'html': 'Tree copied',
            'displayLength': 500
        });
        $("#paste-tree-node").removeClass("disbled-paste-btn")
    }
});

$(document).on("click", "#paste-tree-node", function (e) {
    if (global_select_tree_id != -1 && global_select_intent_id != -1 && get_cookie("copy_tree_id") != "") {
        copy_tree_id = get_cookie("copy_tree_id")
        response = pasteTreeNode(global_select_tree_id, global_select_intent_id, global_select_parent_id, copy_tree_id);
        // set_cookie("copy_tree_id", "", "/chat/")
        if (response['status'] == 200) {
            M.toast({
                'html': 'Tree pasted',
                'displayLength': 500
            });
            setTimeout(function () {
                window.location = '/chat/edit-intent/?intent_pk=' + global_select_intent_id;
            }, 1000);
        } else {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);
            // setTimeout(function(){window.location = '/chat/intent/';}, 2000);
        }
    }
});

$(document).on("click", "#agree-delete-node", function (e) {
    if (global_select_tree_id != -1 && global_select_intent_id != -1) {
        response = deleteTreeNode(global_select_tree_id, global_select_intent_id, global_select_parent_id);
        if (response['status'] == 200) {
            if (response["is_root_childs_present"] == true) {
                M.toast({
                    'html': 'Yoc cannot perform this action!'
                }, 2000);
            } else {
                M.toast({
                    'html': 'Tree Node deleted successfully!'
                }, 2000);

                copy_tree_id = get_cookie('copy_tree_id');

                if (copy_tree_id && copy_tree_id == global_select_tree_id) {
                    set_cookie('copy_tree_id', '', '/chat/');
                }

                renderTreeStructureByIntentID(global_select_intent_id);
                setTimeout(function () {
                    window.location = '/chat/edit-intent/?intent_pk=' + global_select_intent_id;
                }, 2000);
            }
        } else {
            M.toast({
                'html': 'Unable to connect to server. Please try again later.'
            }, 2000);

            setTimeout(function () {
                window.location = '/chat/intent/';
            }, 2000);
        }
    }
});

function fetchTreeInformationByID(tree_pk) {
    let intent_pk = null

    if (window.location.href.indexOf("intent_pk=") != -1) {

        let url_parameters = get_url_vars();
        intent_pk = url_parameters["intent_pk"];
    }

    var json_string = JSON.stringify({
        tree_pk: tree_pk,
        bot_id: SELECTED_BOT_OBJ_ID,
        intent_pk,
        selected_language: SELECTED_LANGUAGE,
    })

    json_string = EncryptVariable(json_string);

    var response = $.ajax({
        url: '/chat/fetch-tree-information/',
        type: 'POST',
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {

            return response;
        },
        error: function (error) {
            return {
                "status": 500
            };
        }
    }).responseJSON;

    response = custom_decrypt(response)
    response = JSON.parse(response);

    return response;
}


function loadTreeEditForm() {

    $(document).ready(function () {
        $('.modal').modal();
    });

    $(document).on("click", "#add-tree-card", function (e) {

        tree_card_title = $("#tree_card_title").val();
        tree_card_content = $("#tree_card_content").val();
        tree_card_link = $("#tree_card_link").val().trim();
        tree_card_img_url = $("#tree_card_img_url").val().trim();

        var format = /[`#%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;

        if (format.test(tree_card_title.trim())) {

            M.toast({
                "html": "Please provide valid intent card title"
            });
            return;
        }

        tree_card_title = stripHTML(tree_card_title.trim())
        tree_card_title = strip_unwanted_characters(tree_card_title)

        tree_card_content = stripHTML(tree_card_content.trim())
        tree_card_content = strip_unwanted_security_characters(tree_card_content)

        if (tree_card_title == "") {
            M.toast({
                "html": "Please provide valid tree card title."
            });
            return;
        }

        if (tree_card_content.trim() == "") {
            M.toast({
                "html": "Please provide valid tree card content."
            });
            return;
        }

        if (tree_card_link.trim() == "" || tree_card_img_url.trim() == "") {
            M.toast({
                "html": "Card Image or Card Link is empty."
            });
            return;
        }

        if (isValidURL(tree_card_link) == false) {
            M.toast({
                "html": "Please provide valid redirect card url"
            });
            return;
        }

        if (isValidURL(tree_card_img_url) == false) {
            M.toast({
                "html": "Please provide valid image card url"
            });
            return;
        }

        if (global_last_edit_card_id != null) {
            if (!adding_new_tree_card) {
                e.preventDefault();
                element = "#" + global_last_edit_card_id;
                $(element).remove();
            }
            global_last_edit_card_id = null;
        }

        addTreeResponseCardIntoCollection(tree_card_title, tree_card_content, tree_card_link, tree_card_img_url)
    });

    $(document).on("click", "#upload-tree-image", function (e) {
        e.preventDefault();
        var input_upload_image = ($("#input_upload_image_tree"))[0].files[0]

        if (input_upload_image == null || input_upload_image == undefined) {
            M.toast({
                "html": "Please select a file."
            }, 2000);

            setTimeout(function () {
                $('#modal-upload-image-tree').modal('open');
            }, 200);
            return false;
        }

        if (check_malicious_file(input_upload_image.name) == true) {
            setTimeout(function () {
                $('#modal-upload-image-tree').modal('open');
            }, 200);
            return false;
        }

        var reader = new FileReader();
        reader.readAsDataURL(input_upload_image);
        reader.onload = function () {

            base64_str = reader.result.split(",")[1];

            uploaded_file = [];
            uploaded_file.push({
                "filename": input_upload_image.name,
                "base64_file": base64_str,
            });

            upload_tree_image();
        };

        reader.onerror = function (error) {
            console.log('Error: ', error);
        };
    });

    async function upload_tree_image() {
        var response = await upload_image();

        if (response && response.status == 200) {
            addTreeResponseImageIntoCollection(window.location.origin + response["src"]);
            M.toast({
                "html": "Image Uploaded Successfully."
            }, 2000)
        }
    }

    $(document).on("click", "#upload-tree-image-card", function (e) {
        e.preventDefault();
        var input_upload_image = ($("#input_upload_image_tree_card"))[0].files[0]

        if (input_upload_image == null || input_upload_image == undefined) {
            M.toast({
                "html": "Please select a file."
            }, 2000);

            setTimeout(function () {
                $('#modal-tree-card').modal('open');
            }, 200);
            return false;
        }

        if (check_malicious_file(input_upload_image.name) == true) {
            setTimeout(function () {
                $("#modal-tree-card").modal("open");
            }, 200);
            return false;
        }

        var reader = new FileReader();
        reader.readAsDataURL(input_upload_image);
        reader.onload = function () {

            base64_str = reader.result.split(",")[1];

            uploaded_file = [];
            uploaded_file.push({
                "filename": input_upload_image.name,
                "base64_file": base64_str,
            });

            upload_tree_image_card();
        };

        reader.onerror = function (error) {
            console.log('Error: ', error);
        };

    });

    async function upload_tree_image_card() {
        var response = await upload_image();

        if (response && response.status == 200) {
            src = window.location.origin + response["src"];
            $("#tree_card_img_url").val(src);
            document.getElementById('input_upload_image_tree_card2').value = "";
            M.toast({
                "html": "Image Uploaded Successfully."
            }, 2000);
        }

        $("#modal-tree-card").modal("open");
    }

    $(document).on("click", "#upload-tree-file-card", function (e) {
        e.preventDefault();
        var input_upload_file = ($("#input_upload_file_tree_card"))[0].files[0]

        if (input_upload_file == null || input_upload_file == undefined) {
            M.toast({
                "html": "Please select a file."
            }, 2000);

            setTimeout(function () {
                $('#modal-tree-card').modal('open');
            }, 200);
            return false;
        }

        if (check_malicious_file(input_upload_file.name) == true) {
            setTimeout(function () {
                $("#modal-tree-card").modal("open");
            }, 200);
            return false;
        }

        var reader = new FileReader();
        reader.readAsDataURL(input_upload_file);
        reader.onload = function () {

            base64_str = reader.result.split(",")[1];

            uploaded_file = [];
            uploaded_file.push({
                "filename": input_upload_file.name,
                "base64_file": base64_str,
            });

            upload_tree_file_card();
        };

        reader.onerror = function (error) {
            console.log('Error: ', error);
        };

    });

    async function upload_tree_file_card() {
        let response = await upload_file_card();

        if (response && response.status == 200) {
            src = window.location.origin + response["src"];
            document.getElementById('input_upload_file_tree_card2').value = "";
            $("#tree_card_link").val(src);
            M.toast({
                "html": "File Uploaded Successfully."
            }, 2000);
        }

        $("#modal-tree-card").modal("open");
    }
    
    $("#add_enter_tree_image_url_data").keypress(function (e) {
        var keycode = (e.keyCode ? e.keyCode : e.which);
        if (keycode == '13') {
            value = $("#add_enter_tree_image_url_data").val();
            addTreeResponseImageIntoCollection(value, "");
            $("#add_enter_tree_image_url_data").val("");
        }
    });

    $("#add_enter_tree_video_url_data").keypress(function (e) {
        var keycode = (e.keyCode ? e.keyCode : e.which);
        if (keycode == '13') {
            value = $("#add_enter_tree_video_url_data").val();
            addTreeResponseVideoIntoCollection(value, "");
            $("#add_enter_tree_video_url_data").val("");
        }
    });

}

var tree_image_url_count = 0;

function addTreeResponseImageIntoCollection(url) {

    if (url.startsWith("/files/")) {
        url = window.location.protocol + "//" + window.location.host + url;
    }

    if (isValidURL(url) == false) {
        M.toast({
            "html": "Please provide valid image url"
        }, 2000);
        return;
    }

    var id = "tree_image_url_" + tree_image_url_count.toString();
    var str_id = "tree_image_url_" + tree_image_url_count.toString();

    var html = `
    <li class="collection-item" id="` + id + `">
      <div class="row">
        <div style="display:none;">
        <input placeholder="Image url" id="imageurl_` + str_id + `" type="text" data-length="100" value="` + url + `" style="width: 80%" required>
        <label for="` + str_id + `"></label>
        </div>
        <img class="responsive-img" src="` + url + `">
        <div class="secondary-content">
        <a href="" class="delete-button-tree-image-url" id="` + id + `">
          <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>
        </div>
      </div>
    </li>`;

    $(html).appendTo($("#tree-image-url-collection"));
    tree_image_url_count += 1;
}

var tree_video_url_count = 0;

function addTreeResponseVideoIntoCollection(url) {

    if (isValidURL(url) == false) {
        M.toast({
            "html": "Please provide valid video url"
        }, 2000);
        return;
    }

    var embed_url = getEmbedVideoURL(url);

    var id = "tree_video_url_" + tree_video_url_count.toString();
    var str_id = "tree_video_url_" + tree_video_url_count.toString();

    var html = `
    <li class="collection-item" id="` + id + `">
      <div class="row">
        <div style="display:none;">
        <input placeholder="Video url" id="videourl_` + str_id + `" type="text" data-length="100" value="` + embed_url + `" style="width: 80%" required>
        <label for="` + str_id + `"></label>
        </div>`;

    if (embed_url == url) {
        html += `
        <video width="320" height="240" controls>
          <source src="` + embed_url + `" type="video/mp4">
        </video>`;
    } else {
        html += `
        <div class="video-container">
          <iframe src="` + embed_url + `" frameborder="0" allowfullscreen></iframe>
        </div>`;
    }

    html += `<br>
        <div class="secondary-content">
        <a href="" class="delete-button-tree-video-url" id="` + id + `">
          <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>
        </div>
      </div>
    </li>`;

    $(html).appendTo($("#tree-video-url-collection"));
    tree_video_url_count += 1;
}

var tree_card_count = 0;
function get_selected_language_from_url() {
    let selected_language = get_url_vars()["selected_language"]
    if (!selected_language) {
        selected_language = "en";
    }
    return selected_language
}
function addTreeResponseCardIntoCollection(title, content, link, img_url) {

    if (link != null && link != undefined && link.startsWith("/files/")) {
        link = window.location.protocol + "//" + window.location.host + link;
    }

    if (img_url != null && img_url != undefined && img_url.startsWith("/files/")) {
        img_url = window.location.protocol + "//" + window.location.host + img_url;
    }

    var id = "tree_card_" + tree_card_count.toString();
    var str_id = "tree_card_" + tree_card_count.toString();
    let selected_language = get_selected_language_from_url();
    var html = `
    <li class="collection-item" id="` + id + `">
    <div class="row">
      <div class="col s5">
        <div class="card">
        <div class="card-image waves-effect waves-block waves-light">`
    if (img_url) {
        html += `<img class="activator responsive-img" src="` + img_url + `" id="img_url_` + str_id + `">`
    }
    html += `
          <span class="card-title" id="title_` + str_id + `" style="display:none;">` + title + `</span>
        </div>
        <div class="card-content">
          <span class="card-title activator grey-text text-darken-4" style="word-break:break-word;">` + title + `<i class="material-icons right">more_vert</i></span>
          <p><a href="` + link + `" id="link_` + str_id + `" target="_blank">Please click here</a></p>
        </div>
        <div class="card-reveal">
          <span class="card-title grey-text text-darken-4">` + title + `<i class="material-icons right">close</i></span>
          <p id="content_` + str_id + `">` + content + `</p>
        </div>
        </div>
      </div>
      <div class="secondary-content row">
        <a href="" class="edit-button-tree-intent-card-detail col" id="` + id + `">
            <i class="inline-icon material-icons green-text text-darken-2">edit</i>
        </a>`
    if (selected_language == "en") {

        html += `<a href="" class="delete-button-intent-card-detail col" id="` + id + `">
            <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>`
    }
    html += `</div>
        </div>
    </li>`;
    $(html).appendTo($("#tree-card-collection"));
    tree_card_count += 1;
}

// Remove element with element id with click
$(document).on("click", ".delete-button-tree-card-detail", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});


// // Remove element with element id with click
// $(document).on("click", ".delete-button-tree-response-data", function(e){
//   e.preventDefault();
//   element = "#"+this.id;
//   $(element).remove();
// });

$(document).on("click", ".delete-button-tree-image-url", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});

$(document).on("click", ".delete-button-tree-video-url", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});

// Remove element with element id with click
$(document).on("click", ".delete-button-tree-data", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});


function addTreeResponseSentencesIntoCollection(text, speech) {
    id = "tree_response_" + tree_response_sentence_count.toString();
    str_id = "tree_response_" + tree_response_sentence_count.toString();

    html = `
    <li class="collection-item" id="` + id + `">
      <div class="row">
        <input placeholder="text-response" id="text_` + str_id + `" type="text" data-length="100" value="` + text + `" style="width: 80%" required>
        <input placeholder="speech-response" id="speech_` + str_id + `" type="text" data-length="100" value="` + speech + `" style="width: 80%" required>
        <label for="` + str_id + `"></label>
        <div class="secondary-content">
        <a class="delete-button-tree-data" id="` + id + `">
          <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>
        </div>
      </div>
    </li>`;

    $(html).appendTo($("#tree-response-collection"));
    tree_response_sentence_count += 1;
}

$(document).on("click", "#add-tree-response-sentences", function (e) {
    addTreeResponseSentencesIntoCollection("", "");
});

$(document).on("change", "#checkbox-child-intent-attachment", function (e) {
    if (document.getElementById('checkbox-child-intent-attachment').checked) {

        $("#choosen_file_type_child_div").show()
    } else {

        $("#choosen_file_type_child_div").hide()
    }
});

$(document).on("click", "#save-tree, #save-tree-buttom", function (e) {
    value = $("#add_enter_tree_response_data").val();
    if (value != "") {
        addTreeResponseSentencesIntoCollection(value, "");
        $("#add_enter_tree_response_data").val("");
    }

    active_url = window.location.href.replace("#", "");
    active_url = active_url.replace("!", "");
    // intent_pk = active_url.substring(active_url.indexOf("intent_pk=") + "intent_pk=".length, active_url.indexOf('&parent_pk'));
    // parent_pk = active_url.substring(active_url.indexOf("parent_pk=") + "parent_pk=".length, active_url.indexOf('&tree_pk'));
    // tree_pk = active_url.substring(active_url.indexOf("tree_pk=") + "tree_pk=".length, );
    var url_parameters = get_url_vars()

    intent_pk = url_parameters["intent_pk"];
    parent_pk = url_parameters["parent_pk"];
    tree_pk = url_parameters["tree_pk"];

    global_select_tree_id = tree_pk;
    global_select_intent_id = intent_pk;
    global_select_parent_id = parent_pk;

    tree_name = $("#tree_name").val();
    tree_name = stripHTML(tree_name);
    tree_name = tree_name.trim();
    multilingual_tree_name = "";
    multilingual_tree_elm = document.getElementById("multilingual_tree_name")
    multilingual_tree_name = ""
    if (multilingual_tree_elm != null && multilingual_tree_elm != undefined) {
        multilingual_tree_name = multilingual_tree_elm.value
    }

    accept_keywords = $("#tree_keyword").val();
    post_processor_function = $("#tree_post_processor_function").val();
    post_processor_name = $("#tree_post_processor_name").val();
    choice_list = $("#tree-response-choice-list").val();
    validator_id = $("#select-user-validator").val();
    if (tree_name == "") {
        tree_name = $("#tree_name").val("");
        M.toast({
            "html": "Child Intent Name cannot be empty."
        }, 2000);
        return;
    }

    // tree_bot_response_text_text = $("#tree_bot_response_text_text").val();
    // tree_bot_response_text_speech = $("#tree_bot_response_text_speech").val();
    // tree_bot_response_text_hinglish = $("#tree_bot_response_text_hinglish").val();
    // tree_bot_response_reprompt = $("#tree_bot_response_reprompt").val();

    tree_bot_response_text_text = $("#tree_bot_response_text_text").trumbowyg('html')
    tree_bot_response_text_speech = $("#tree_bot_response_text_speech").trumbowyg('html')
    tree_bot_response_reprompt = $("#tree_bot_response_reprompt").trumbowyg('html')
    tree_bot_response_ssml = $('#tree_bot_response_ssml').val().trim()

    if (tree_bot_response_text_text.trim() != "" && tree_bot_response_text_speech.trim() == "") {
        tree_bot_response_text_speech = tree_bot_response_text_text
    }

    if (tree_bot_response_text_text == "") {
        M.toast({
            "html": "At least one text response required."
        }, 2000);
        return;
    }

    let response_present = ['text'];

    recommended_intent_list = $("#multiple-select-intent-choice-list").val();
    var child_choices = $("#multiple-select-tree-child-choices").val();

    var is_tree_go_back_checked = false;
    if (document.getElementById('checkbox-tree-go-back-enabled')) {
        is_tree_go_back_checked = document.getElementById('checkbox-tree-go-back-enabled').checked;
    }

    if (recommended_intent_list.length > 0 || is_tree_go_back_checked == true) {
        response_present.push('quick_recommendations');
    }

    tree_response_list = [{
        "text_response": tree_bot_response_text_text,
        "speech_response": tree_bot_response_text_speech,
        "hinglish_response": "",
        "reprompt_response": tree_bot_response_reprompt,
        "ssml_response": tree_bot_response_ssml,
    }]

    if (tree_response_list.length == 0) {
        M.toast({
            'html': 'Text response cannot be empty.'
        }, 2000);
        return;
    }

    image_list = []
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf("imageurl_tree_image_url_") == 0) {
            data_id = inputs[i].id;
            token_id = data_id.split("_")[4];
            image_url = $("#imageurl_tree_image_url_" + token_id).val();
            image_list.push(image_url);
        }
    }

    if (image_list.length > 0) {
        response_present.push('image');
    }

    video_list = []
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf("videourl_tree_video_url_") == 0) {
            data_id = inputs[i].id;
            token_id = data_id.split("_")[4];
            video_url = $("#videourl_tree_video_url_" + token_id).val();
            video_list.push(video_url);
        }
    }

    if (video_list.length > 0) {
        response_present.push('video');
    }

    card_list = []
    var spans = document.getElementsByTagName("span");
    for (var i = 0; i < spans.length; i++) {
        if (spans[i].id.indexOf("title_tree_card_") == 0) {
            data_id = spans[i].id;
            token_id = data_id.split("_")[3];
            check_img = $("img_url_tree_card_" + token_id);
            card_img_url = '';
            if (check_img) {
                card_img_url = $("#img_url_tree_card_" + token_id).attr("src");
            }
            card_title = document.getElementById("title_tree_card_" + token_id).innerText;
            card_content = $("#content_tree_card_" + token_id).html();
            card_url = $("#link_tree_card_" + token_id).attr("href");
            card_list.push({
                "title": card_title,
                "content": card_content,
                "link": card_url,
                "img_url": card_img_url
            });
        }
    }

    if (card_list.length > 0) {
        response_present.push('link_cards');
    }

    recommended_intent_list = $("#multiple-select-intent-choice-list").val();


    var is_attachment_required = false
    if (selected_widget == 'div-file-attach-widget')
        is_attachment_required = true
    var is_save_attachment_required = document.getElementById('checkbox-intent-save-attachment').checked;
    var choosen_file_type = document.getElementById('choosen_file_type').value;

    if (is_attachment_required && choosen_file_type == "") {

        M.toast({
            "html": "Please select file type."
        }, 2000);
        return;
    }

    if (is_attachment_required) {
        response_present.push('file_attach');
    }

    rows = document.getElementById('tree-hidden-numbers-rows').innerHTML;
    if (document.getElementById('tree-number-of-rows-table').value != "") {
        rows = document.getElementById('tree-number-of-rows-table').value
    }

    table_input_list_of_list = ""
    if (rows != 0) {
        table_input_list_of_list = check_table_filled()
        if (table_input_list_of_list == false) {
            alert("Table cannot have empty cells");
            return;
        } else {
            response_present.push('table');
        }
    }

    function check_table_filled() {
        rows = document.getElementById('tree-hidden-numbers-rows').innerHTML;
        columns = document.getElementById('tree-hidden-numbers-columns').innerHTML;
        if (document.getElementById('tree-number-of-rows-table').value != "") {
            rows = document.getElementById('tree-number-of-rows-table').value
        }
        if (document.getElementById('tree-number-of-columns-table').value != "") {
            columns = document.getElementById('tree-number-of-columns-table').value
        }
        table_input_list_of_list = []
        for (i = 0; i < rows; i++) {
            row_list = []
            for (j = 0; j < columns; j++) {
                cell_value = document.getElementById('cell-id-' + i.toString() + j.toString()).innerHTML;
                if (cell_value != "") {
                    if (un_entity(cell_value).trim() == "<br>" || un_entity(cell_value).trim() == "")
                        return false
                    else
                        row_list.push(un_entity(cell_value));
                } else {
                    return false
                };

            };
            table_input_list_of_list.push(row_list)
        };
        return table_input_list_of_list
    };

    var is_child_tree_visible = "None";
    element_checkbox_child_tree_visible = document.getElementById("checkbox-child-tree-options-visible");
    if (element_checkbox_child_tree_visible != null && element_checkbox_child_tree_visible != undefined) {
        is_child_tree_visible = element_checkbox_child_tree_visible.checked;
    }
    var is_automate_recursion_enabled = false;
    element_checkbox_automate_recursion = document.getElementById("checkbox-automate-recursion");
    if (element_checkbox_automate_recursion != null && element_checkbox_automate_recursion != undefined) {
        is_automate_recursion_enabled = element_checkbox_automate_recursion.checked;
    }
    /* Widgets 
        1. Date Picker
        2. Time Picker
        3. Range Slider
        4. Radio Button
        5. Checkbox
        6. Drop Down
        7. Video Recorder
        8. Form
    */

    //Date Picker
    var is_date_picker_allowed = false
    if (selected_widget == "div-date-picker-widget")
        is_date_picker_allowed = true
    var is_single_date_picker_allowed = document.getElementById('checkbox-intent-single-date-picker').checked;
    var is_multi_date_picker_allowed = document.getElementById('checkbox-intent-multi-date-picker').checked;

    if (is_date_picker_allowed) {
        if (is_single_date_picker_allowed == false && is_multi_date_picker_allowed == false) {
            M.toast({
                'html': 'Please select atleast one option.'
            }, 2000);
            return;
        } else {
            response_present.push('date_picker');
        }
    }

    //Time Picker
    var is_time_picker_allowed = false
    if (selected_widget == "div-time-picker-widget")
        is_time_picker_allowed = true
    var is_single_time_picker_allowed = document.getElementById('checkbox-intent-single-time-picker').checked;
    var is_multi_time_picker_allowed = document.getElementById('checkbox-intent-multi-time-picker').checked;
    if (is_time_picker_allowed) {
        if (is_single_time_picker_allowed == false && is_multi_time_picker_allowed == false) {
            M.toast({
                'html': 'Please select atleast one option.'
            }, 2000);
            return;
        } else {
            response_present.push('time_picker');
        }
    }

    // Range Slider
    var is_range_slider_required = false;
    var minimum_range = ""
    var maximum_range = ""
    var range_slider_type = ""
    if (selected_widget == "div-range-slider-widget") {
        is_range_slider_required = true;
        if (document.getElementById('single-range-slider').checked)
            range_slider_type = "single-range-slider";
        else if (document.getElementById('multi-range-slider').checked)
            range_slider_type = "multi-range-slider";
        minimum_range = document.getElementById("range-slider-min-range").value;
        maximum_range = document.getElementById("range-slider-max-range").value;
        if (range_slider_type == "" || range_slider_type == null || range_slider_type == undefined) {
            M.toast({
                'html': 'Please select a range slider option.'
            }, 2000);
            return;
        }
        if (/^\d+$/.test(minimum_range) == false || /^\d+$/.test(maximum_range) == false) {
            M.toast({
                'html': 'Please enter a valid range.'
            }, 2000);
            return;
        }
        if (parseInt(minimum_range) >= parseInt(maximum_range)) {
            M.toast({
                'html': 'Minimum range should be less than maximum.'
            }, 2000);
            return;
        }
        if (parseInt(minimum_range) >= 9999999999 || parseInt(maximum_range) >= 9999999999) {
            M.toast({
                'html': 'Range values should be less than 10 digits'
            }, 2000);
            return;
        }

        response_present.push('range_slider');
    }

    //Radio Button

    var is_radio_button_allowed = false
    radio_choices_list = []
    if (selected_widget == "div-radio-button-widget") {
        is_radio_button_allowed = true
        var inputs = document.getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].id.indexOf('radio_button_data_str') == 0) {
                data_id = "#" + inputs[i].id;
                radio_choices = $(data_id).val();
                if (radio_choices != "") {
                    radio_choices_list.push(radio_choices);
                }
            }
        }
        if (radio_choices_list.length == 0) {
            M.toast({
                "html": "At least one choice is required."
            }, 2000);
            return;
        }

        response_present.push('radio_button');

    }

    var explanation = "";

    try {
        explanation = document.getElementById("explanation").value;
    } catch { }

    var post_processor_variable = "";
    try {
        post_processor_variable = document.getElementById('post_processor_variable').value
    } catch { }

    //Checkbox
    var is_check_box_allowed = false
    checkbox_choices_list = []
    if (selected_widget == "div-check-box-widget") {
        is_check_box_allowed = true
        var inputs = document.getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].id.indexOf('check_box_data_str') == 0) {
                data_id = "#" + inputs[i].id;
                checkbox_choices = $(data_id).val();
                if (checkbox_choices != "") {
                    checkbox_choices_list.push(checkbox_choices);
                }
            }
        }
        if (checkbox_choices_list.length == 0) {
            M.toast({
                "html": "At least one choice is required."
            }, 2000);
            return;
        }
        response_present.push('checkbox');
    }
    //Dropdown
    var is_drop_down_allowed = false
    dropdown_choices_list = []
    if (selected_widget == "div-drop-down-widget") {
        is_drop_down_allowed = true
        var inputs = document.getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].id.indexOf('drop_down_data_str') == 0) {
                data_id = "#" + inputs[i].id;
                dropdown_choices = $(data_id).val();
                if (dropdown_choices != "") {
                    dropdown_choices_list.push(dropdown_choices);
                }
            }
        }
        if (dropdown_choices_list.length == 0) {
            M.toast({
                "html": "At least one choice is required."
            }, 2000);
            return;
        }
        response_present.push('drop_down');
    }


    // Video Recorder
    var is_video_recorder_allowed = false
    if (selected_widget == "div-video-recorder-widget")
        is_video_recorder_allowed = true
    if (is_video_recorder_allowed) {
        response_present.push('video_record')
    }
    var is_save_video_attachment_required = document.getElementById('checkbox-intent-save-video-attachment').checked;

    var is_go_back_enabled = false;
    if (document.getElementById('checkbox-tree-go-back-enabled')) {
        is_go_back_enabled = document.getElementById('checkbox-tree-go-back-enabled').checked;
    }

    var is_confirmation_and_reset_enabled = document.getElementById('checkbox-confirmation-and-reset-enabled').checked;
    var is_recommendation_menu = document.getElementById('checkbox-intent-recommendation-menu').checked;
    let is_catalogue_added = document.getElementById('add_catalogue_checkbox').checked;
    try {
        var category_response_allowed = document.getElementById("checkbox-cateogry-tree").checked;
        var flow_analytics_variable = document.getElementById('flow_analytics_variable').value
    } catch (err) { }

    //Phone Widget

    var is_phone_widget_enabled = false
    var country_code = "in"
    if (selected_widget == "div-phone-number-widget") {
        is_phone_widget_enabled = true
        var country_code = $("#phone").intlTelInput("getSelectedCountryData")

        country_code = country_code.iso2
        response_present.push('phone_number');      

    }

    //Form
    var is_create_form_allowed = false
    if (selected_widget == 'div-create-form-widget')
        is_create_form_allowed = true
    var form_name = ""
    form_fields_list = [];
    if (is_create_form_allowed) {
        form_name = document.getElementById('form_name').value;
        form_name = strip_unwanted_characters(stripHTML(form_name));
        form_name = form_name.trim();
        if (form_name == '') {
            M.toast({
                "html": "Please enter a valid form name"
            }, 2000);
            return;
        }

        let fields_present = document.getElementsByClassName('create-form-field');
        if (fields_present.length == 0) {
            M.toast({
                "html": "Please add atleast one form section"
            }, 2000);
            return;
        }
        for (let i = 0; i < fields_present.length; ++i) {
            let field_id = fields_present[i].id;
            let field_div = document.getElementById(field_id);
            let field_id_num = field_id.split('-')[1]
            let label_name, input_type, placeholder_or_options_elem1, placeholder_or_options_elem2, validator, attachment_type, range_type, dependent, dependent_on, dependent_on_label_name;
            placeholder_or_options_elem2 = ""

            label_name = document.getElementById('input_name_' + field_id_num + '_1').value;
            label_name = strip_unwanted_characters(stripHTML(label_name));

            input_type = document.getElementById('input_type_' + field_id_num).value
            // input_type = input_name_mapping(input_type)

            placeholder_or_options_elem1 = document.getElementById('input_selected_type_' + field_id_num + '_3').value;
            validator = document.getElementById('validator_' + field_id_num).value;

            // validator = validator_mapping(validator);

            attachment_type = document.getElementById('file_attach_type_' + field_id_num).value;

            range_type = document.getElementById('range_selector_' + field_id_num).value;

            calendar_type = document.getElementById('calendar_selector_type_' + field_id_num).value;

            optional = document.getElementById('optional-toggle-field-' + field_id_num).checked;

            dependent = document.getElementById('dependent-field-' + field_id_num);
            
            country_code = $("#phone_number_selector_type_" + field_id_num).intlTelInput("getSelectedCountryData").iso2

            if (dependent) {
                dependent = dependent.checked;
            } else {
                dependent = false;
            }
            dependent_on = ''
            dependent_on_label_name = ''
            if (dependent) {
                dependent_on = document.getElementById('dependent_field_dropdown_' + field_id_num).value;
                dependent_on_label_name = document.getElementById('input_name_' + dependent_on + '_1').value
            }

            if (dependent_on == 'Select Dependency') {
                M.toast({
                    "html": "Please select a valid dependency"
                }, 2000);
                return;
            }

            let dependent_fields = document.querySelectorAll('.dependent-dropdown');
            let dependent_ids = []
            for (let j = 0; j < dependent_fields.length; j++) {
                if (dependent_fields[j].value == field_id_num) {
                    dependent_ids.push(dependent_fields[j].id.split('_')[3])
                }
            }
            dependent_ids = dependent_ids.join('$$$')

            label_name = label_name.trim();
            if (label_name == "") {
                M.toast({
                    "html": "Please enter a valid label name"
                }, 2000);
                return;
            }

            if (input_type == "") {
                M.toast({
                    "html": "Please enter an input type"
                }, 2000);
                return;
            }

            let placeholder_or_options = placeholder_or_options_elem1;

            if (input_type == 'file_attach') {
                placeholder_or_options = attachment_type;
            } else {
                // placeholder_or_options = stripHTML(placeholder_or_options);
                // placeholder_or_options = placeholder_or_options.trim();

                // var values = placeholder_or_options.toLowerCase().split('$$$');
                // var values_set = new Set(values);
                // if (values_set.size != values.length) {
                //     M.toast({
                //         "html": "Please enter unique values for choices in form widget."
                //     }, 2000);
                //     return;
                // }
                if (input_type == "radio") {

                    placeholder_or_options = form_get_radio_button_list(field_id.split("-")[1])
                    placeholder_or_options = placeholder_or_options.join('$$$')

                } else if (input_type == "checkbox") {
                    placeholder_or_options = form_get_check_box_list(field_id.split("-")[1])
                    placeholder_or_options = placeholder_or_options.join('$$$')

                } else if (input_type == "dropdown_list") {
                    placeholder_or_options = form_get_dropdown_list(field_id.split("-")[1])
                    placeholder_or_options = placeholder_or_options.join('$$$')
                } else if (input_type == "range") {
                    var form_range_slider_min_value = document.getElementById("form-range-slider-min-range-" + field_id.split("-")[1]).value;
                    var form_range_slider_max_value = document.getElementById("form-range-slider-max-range-" + field_id.split("-")[1]).value;
                    placeholder_or_options = form_range_slider_min_value + "-" + form_range_slider_max_value;
                }
            }

            if (input_type == "text_field" || input_type == "phone_number") {
                if (placeholder_or_options == "") {
                    M.toast({
                        "html": "Please enter placeholder value"
                    }, 2000);
                    return;
                }
            } else if (!api_integrated_fields.includes(field_id_num) && input_type == "dropdown_list" && placeholder_or_options == "") {
                M.toast({
                    "html": "Please enter at least one and valid dropdown option"
                }, 2000);
                return;
            } else if (!api_integrated_fields.includes(field_id_num) && input_type == "checkbox" && placeholder_or_options == "") {
                M.toast({
                    "html": "Please enter at least one and valid checkbox option"
                }, 2000);
                return;
            } else if (!api_integrated_fields.includes(field_id_num) && input_type == "radio" && placeholder_or_options == "") {
                M.toast({
                    "html": "Please enter at least one and valid radio button option"
                }, 2000);
                return;
            } else if (input_type == "range") {
                if (placeholder_or_options.split('-')[0] == "" || placeholder_or_options.split('-')[1] == "") {
                    M.toast({
                        "html": "Please enter a range"
                    }, 2000);
                    return;
                } else if (placeholder_or_options.split('-').length != 2 || (isNaN(placeholder_or_options.split('-')[0]) || isNaN(placeholder_or_options.split('-')[1]))) {
                    M.toast({
                        "html": "Please enter a valid range"
                    }, 2000);
                    return;
                } else if (parseInt(placeholder_or_options.split('-')[0]) >= parseInt(placeholder_or_options.split('-')[1])) {
                    M.toast({
                        'html': 'Minimum range should be less than maximum.'
                    }, 2000);
                    return;
                }
            } else if (input_type == "file_attach" && (placeholder_or_options == undefined || placeholder_or_options == "")) {
                M.toast({
                    "html": "Please select file type"
                }, 2000);
                return;
            }

            form_fields_list.push({
                label_name: label_name,
                input_type: input_type,
                validator: validator,
                placeholder_or_options: placeholder_or_options,
                optional: optional.toString(),
                range_type: range_type,
                calendar_type: calendar_type,
                field_id_num: field_id_num,
                is_dependent: dependent.toString(),
                dependent_on: dependent_on.toString(),
                dependent_on_label_name: dependent_on_label_name,
                dependent_field_ids: dependent_ids,
                country_code: country_code,

            })
        }

        response_present.push('form');

    }


    //Calender
    //Calender
    var is_calender_picker_allowed = false
    if (selected_widget == "div-calender-picker-widget")
        is_calender_picker_allowed = true
    var is_single_calender_date_picker_allowed = document.getElementById('single-date-picker-radio').checked;
    var is_multi_calender_date_picker_allowed = document.getElementById('custom-date-picker-radio').checked;
    var is_single_calender_time_picker_allowed = document.getElementById('single-time-picker-radio').checked;
    var is_multi_calender_time_picker_allowed = document.getElementById('custom-time-picker-radio').checked;

    var is_calender_date_picker_enabled = document.getElementById('enabledatepicker_switch1').checked
    var is_calender_time_picker_enabled = document.getElementById('enabletimepicker_switch2').checked

    if (is_calender_picker_allowed) {

        if (is_calender_date_picker_enabled) {
            if ((is_single_calender_date_picker_allowed == false && is_multi_calender_date_picker_allowed == false)) {
                M.toast({
                    'html': 'Please select atleast one option in date picker.'
                }, 2000);
                return;
            }
        }

        if (is_calender_time_picker_enabled) {
            if ((is_single_calender_time_picker_allowed == false && is_multi_calender_time_picker_allowed == false)) {
                M.toast({
                    'html': 'Please select atleast one option in time picker.'
                }, 2000);
                return;
            }
        }

        response_present.push('calendar_picker');
    }

    //Order of Response
    var order_of_response_result = check_order_of_response(response_present);

    var is_last_tree = false
    try {
        is_last_tree = document.getElementById("checkbox-last-tree").checked
    } catch (err) { }

    var is_exit_tree = false
    try {
        is_exit_tree = document.getElementById("checkbox-exit-tree").checked
    } catch (err) { }

    var is_transfer_tree = false
    try {
        is_transfer_tree = document.getElementById("checkbox-transfer-tree").checked
    } catch (err) {}

    var whatsapp_list_message_header = document.getElementById("whatsapp-list-message-header").value;
    if (whatsapp_list_message_header == "" && is_whatsapp_channel_selected) {
        M.toast({
            'html': 'Please enter whatsapp list message header.'
        }, 2000);
        return;
    } else if (whatsapp_list_message_header.length > 20) {
        M.toast({
            'html': 'Whatsapp list message header cannot be greater than 20 characters. Please enter a valid list message header.'
        }, 2000);
        return;
    }

    var allow_barge = document.getElementById("checkbox-allow-barge").checked;
    var disposition_code = document.getElementById("disposition_code").value.trim();

    if (disposition_code.length > 25) {
        M.toast({
            "html": "Disposition code cannot be more than 25 characters."
        }, 2000);
        return;
    }

    tree_short_name = document.getElementById("tree_short_name").value
    tree_short_name = tree_short_name.trim()
    if(tree_short_name.length > 25){
        M.toast({
            "html": "Tree short name cannot be more than 25 characters."
        }, 2000);
        return;
    }

    var whatsapp_short_name = null;
    if (document.getElementById("whatsapp-short-name-input")) {
        whatsapp_short_name = document.getElementById("whatsapp-short-name-input").value;

        if (!whatsapp_short_name) {
            M.toast({
                "html": "Whatsapp button title connot be empty."
            }, 2000);
            return;
        }
    }

    var whatsapp_description = null;
    if (document.getElementById("whatsapp-description-input")) {
        whatsapp_description = document.getElementById("whatsapp-description-input").value;

        if (!whatsapp_description) {
            M.toast({
                "html": "Whatsapp description connot be empty."
            }, 2000);
            return;
        }
    }

    var enable_whatsapp_menu_format = false;
    if (document.getElementById("enable_whatsapp_menu_format")) {
        enable_whatsapp_menu_format = document.getElementById("enable_whatsapp_menu_format").checked;

        if (enable_whatsapp_menu_format) {
            var whatsapp_menu_section_cards = document.getElementsByClassName("easychat-whatsapp-menu-item-wrapper");
            if (!whatsapp_menu_section_cards.length) {
                M.toast({
                    "html": "Please add at least one section in menu format"
                }, 2000);
                return;
            }

            var total_options_selected = document.querySelectorAll(".child-tree").length + document.querySelectorAll(".main-intent").length;
            if (total_options_selected < 4) {
                M.toast({
                    "html": "Total quick recommendations and child intents selected in whatsapp chatbot menu should be greater than 3."
                }, 2000);
                return;
            } else if (total_options_selected > 10) {
                M.toast({
                    "html": "Total quick recommendations and child intents selected in whatsapp chatbot menu should be less than 11."
                }, 2000);
                return;
            }
        }
    }

    disable_save_tree_buttons();

    json_string = JSON.stringify({
        intent_pk: intent_pk,
        tree_pk: tree_pk,
        parent_pk: parent_pk,
        tree_name: tree_name,
        tree_short_name: tree_short_name,
        multilingual_name: multilingual_tree_name,
        accept_keywords: accept_keywords,
        is_attachment_required: is_attachment_required,
        choosen_file_type: choosen_file_type,
        post_processor_name: post_processor_name,
        post_processor_function: post_processor_function,
        response_choice_list: choice_list,
        is_child_tree_visible: is_child_tree_visible,
        response_sentence_list: tree_response_list,
        response_image_list: image_list,
        response_video_list: video_list,
        recommended_intent_list: recommended_intent_list,
        card_list: card_list,
        validator_id: validator_id,
        table_input_list_of_list: table_input_list_of_list,
        is_automate_recursion_enabled: is_automate_recursion_enabled,
        explanation: explanation,
        is_date_picker_allowed: is_date_picker_allowed,
        is_time_picker_allowed: is_time_picker_allowed,
        is_single_date_picker_allowed: is_single_date_picker_allowed,
        is_multi_date_picker_allowed: is_multi_date_picker_allowed,
        is_single_time_picker_allowed: is_single_time_picker_allowed,
        is_multi_time_picker_allowed: is_multi_time_picker_allowed,
        is_calender_picker_allowed: is_calender_picker_allowed,
        is_single_calender_date_picker_allowed: is_single_calender_date_picker_allowed,
        is_multi_calender_date_picker_allowed: is_multi_calender_date_picker_allowed,
        is_single_calender_time_picker_allowed: is_single_calender_time_picker_allowed,
        is_multi_calender_time_picker_allowed: is_multi_calender_time_picker_allowed,
        is_range_slider_required: is_range_slider_required,
        range_slider_type: range_slider_type,
        minimum_range: minimum_range,
        maximum_range: maximum_range,
        is_radio_button_allowed: is_radio_button_allowed,
        radio_button_choices: radio_choices_list,
        post_processor_variable: post_processor_variable,
        is_save_attachment_required: is_save_attachment_required,
        is_check_box_allowed: is_check_box_allowed,
        checkbox_choices_list: checkbox_choices_list,
        is_drop_down_allowed: is_drop_down_allowed,
        dropdown_choices_list: dropdown_choices_list,
        is_video_recorder_allowed: is_video_recorder_allowed,
        is_save_video_attachment_required: is_save_video_attachment_required,
        is_phone_widget_enabled: is_phone_widget_enabled,
        country_code: country_code,
        is_create_form_allowed: is_create_form_allowed,
        form_name: form_name,
        form_fields_list: form_fields_list,
        is_go_back_enabled: is_go_back_enabled,
        is_confirmation_and_reset_enabled: is_confirmation_and_reset_enabled,
        is_recommendation_menu: is_recommendation_menu,
        is_catalogue_added: is_catalogue_added,
        child_choices: child_choices,
        flow_analytics_variable: flow_analytics_variable,
        category_response_allowed: category_response_allowed,
        is_custom_order_selected: order_of_response_result.is_custom_order_selected,
        order_of_response: order_of_response_result.final_order_of_response,
        is_last_tree: is_last_tree,
        is_exit_tree: is_exit_tree,
        is_transfer_tree: is_transfer_tree,
        whatsapp_list_message_header: whatsapp_list_message_header,
        allow_barge: allow_barge,
        disposition_code: disposition_code,
        whatsapp_short_name: whatsapp_short_name,
        whatsapp_description: whatsapp_description,
        enable_whatsapp_menu_format: enable_whatsapp_menu_format,
    });

    json_string = EncryptVariable(json_string);

    var response = $.ajax({
        url: '/chat/save-tree/',
        type: 'POST',
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {

            response = custom_decrypt(response)
            response = JSON.parse(response);
            console.log(response)
            if (response["status"] == 200) {
                M.toast({
                    'html': 'Tree saved successfully!'
                }, 2000);
                setTimeout(function (e) {
                    window.location.reload();
                }, 2000);
            } else if (response["status"] == 300) {
                M.toast({
                    'html': response['status_message']
                }, 2000);
                enable_save_tree_buttons()
                return
            } else if (response["status"] == 401) {
                M.toast({
                    'html': "Kindly select all the children in child order"
                }, 2000);
                enable_save_tree_buttons()
            } else {
                M.toast({
                    'html': 'Internal Server Error'
                }, 2000);
                enable_save_tree_buttons()
            }
        },
        error: function (error) {
            M.toast({
                'html': 'Unable to connect to server. Please try again later'
            }, 2000);
        }
    }).responseJSON;


});

function disable_save_tree_buttons() {
    document.getElementById('save-tree').style.opacity = '0.5'
    document.getElementById('save-tree').style.pointerEvents = 'none'
    document.getElementById('save-tree-buttom').style.opacity = '0.5'
    document.getElementById('save-tree-buttom').style.pointerEvents = 'none'
}

function enable_save_tree_buttons() {
    document.getElementById('save-tree').style.opacity = '1'
    document.getElementById('save-tree').style.pointerEvents = 'auto'
    document.getElementById('save-tree-buttom').style.opacity = '1'
    document.getElementById('save-tree-buttom').style.pointerEvents = 'auto'
}

function fetch_all_choice_list() {

    var response = $.ajax({
        url: '/chat/fetch-choices/',
        type: 'GET',
        async: false,
        data: {

        },
        success: function (response) {

            return response;
        },
        error: function (error) {
            return {
                "status": 500
            };
        }
    }).responseJSON;
    response = custom_decrypt(response)
    response = JSON.parse(response);

    return response;
}

function add_new_choice(display, value) {
    var json_string = JSON.stringify({
        display: display,
        value: value
    })

    json_string = EncryptVariable(json_string);

    var response = $.ajax({
        url: '/chat/add-new-choice/',
        type: 'POST',
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            return response;
        },
        error: function (error) {
            return {
                "status": 500
            };
        }
    }).responseJSON;
    response = custom_decrypt(response)
    response = JSON.parse(response);

    return response;
}

$(document).on("click", "#save-new-choice", function (e) {
    display = $("#tree_choice_display_value").val();
    value = $("#tree_choice_value_value").val();
    add_new_choice(display, value);
    location.reload(true);
});


function renderTreeInformation(tree_pk) {

    tree_information = fetchTreeInformationByID(tree_pk);
    order_of_response = tree_information['order_of_response'];
    default_order_of_response = tree_information['default_order_of_response'];
    // console.log(tree_information)
    modes = JSON.parse(tree_information["modes"]);
    if ('is_attachment_required' in modes && modes["is_attachment_required"] == "true") {
        $("#choosen_file_type_child_div").show()
    } else {
        $("#choosen_file_type_child_div").hide()
    }
    response_pk = tree_information["response_pk"];
    master_choice_list = fetch_all_choice_list()["choice_list"];
    loadTreeEditForm();

    sentence_list = []
    choice_list = []
    image_list = []
    video_list = []
    card_list = []

    if (response_pk != null) {
        // Bot response parameters
        response_information = fetchBotResponseDetailsByID(response_pk);
        sentence_list = response_information["response_list"]
        choice_list = response_information["choice_list"]
        image_list = response_information["image_list"]
        video_list = response_information["video_list"]
        card_list = response_information["card_list"]
    }

    //tree_name = tree_information["tree_name"];
    //accept_keywords = tree_information["accept_keywords"];

    post_processor_name = tree_information["post_processor_name"];
    post_processor_function = tree_information["post_processor_function"];

    choice_display_list = []
    for (i = 0; i < choice_list.length; i++) {
        choice_display_list.push(choice_list[i]["display"].toLowerCase());
    }

    master_display_list = []
    for (i = 0; i < master_choice_list.length; i++) {
        master_display_list.push(master_choice_list[i]["display"].toLowerCase());
    }

    if (sentence_list.length > 0) {
        text_response = sentence_list[0]["text_response"];
        speech_response = sentence_list[0]["speech_response"];
        hinglish_response = ""

        if ("hinglish_response" in sentence_list[0]) {
            hinglish_response = sentence_list[0]["hinglish_response"];
        }

        reprompt_response = ""
        if ("text_reprompt_response" in sentence_list[0]) {
            reprompt_response = sentence_list[0]["text_reprompt_response"]
        }

        ssml_response = ""
        if("ssml_response" in sentence_list[0]) {
            ssml_response = sentence_list[0]["ssml_response"]
        }

        $("#tree_bot_response_text_text").val(text_response);
        $("#tree_bot_response_text_speech").val(speech_response);
        $("#tree_bot_response_text_hinglish").val(hinglish_response);
        $("#tree_bot_response_reprompt").val(reprompt_response);
        // addTreeResponseSentencesIntoCollection(text_response, speech_response)
    }

    for (var i = 0; i < image_list.length; i++) {
        image_url = image_list[i]
        addTreeResponseImageIntoCollection(image_url)
    }

    for (var i = 0; i < video_list.length; i++) {
        video_url = video_list[i]
        addTreeResponseVideoIntoCollection(video_url)
    }

    for (var i = 0; i < card_list.length; i++) {
        card_title = card_list[i]["title"];
        card_content = card_list[i]["content"];
        card_img_url = card_list[i]["img_url"];
        card_link = card_list[i]["link"];
        addTreeResponseCardIntoCollection(card_title, card_content, card_link, card_img_url);
    }

    choice_html = `
        <div class="col s6">
            <div class="input-field">
                <select multiple id="tree-response-choice-list">
                    <option value="" disabled>Choose your option</option>`

    for (i = 0; i < master_display_list.length; i++) {
        if (choice_display_list.indexOf(master_display_list[i]) >= 0) {
            choice_html += `<option value="` + master_choice_list[i]["value"] + `" selected>` + master_choice_list[i]["display"] + `</option>`;
        } else {
            choice_html += `<option value="` + master_choice_list[i]["value"] + `">` + master_choice_list[i]["display"] + `</option>`;
        }
    }

    choice_html += `</select>
              <label>Choices</label>
          </div>
      </div>`

    //$("#tree_name").val(tree_name);
    //$("#tree_keyword").val(accept_keywords);
    $("#tree_post_processor_function").val(post_processor_function);
    $("#tree_post_processor_name").val(post_processor_name);
    $("#tree_response_choice_list").html(choice_html);
    // $("#tree_keyword_chip_list").html(chip_html);
}

if (window.location.pathname == '/chat/edit-tree/') {
    if (window.location.href.indexOf("tree_pk=") != -1) {
        let is_custom_order_selected = document.getElementById('custom-order').checked;
        $('#easychat_order_of_responses').sortable({
            containment: "parent",
        });
        if (is_custom_order_selected) {
            let elem = document.getElementById('easychat_order_of_responses');
            elem.classList.remove('response-order-disabled');
        } else {
            $('#easychat_order_of_responses').sortable('disable');
        }

        // active_url = window.location.href.replace("#", "");
        // active_url = active_url.replace("!", "");
        // intent_pk = active_url.substring(active_url.indexOf("intent_pk=") + "intent_pk=".length, active_url.indexOf('&parent_pk'));
        // parent_pk = active_url.substring(active_url.indexOf("parent_pk=") + "parent_pk=".length, active_url.indexOf('&tree_pk'));
        var url_parameters = get_url_vars()

        intent_pk = url_parameters["intent_pk"];
        parent_pk = url_parameters["parent_pk"];
        tree_pk = url_parameters["tree_pk"];
        if (parent_pk == -1) {
            window.location = '/chat/edit-intent/?intent_pk=' + intent_pk + "&selected_language=en";
        }
        // tree_pk = active_url.substring(active_url.indexOf("tree_pk=") + "tree_pk=".length, );

        global_select_tree_id = tree_pk;
        global_select_intent_id = intent_pk;
        global_select_parent_id = parent_pk;
        renderTreeStructureByIntentID(intent_pk);
        renderTreeInformation(tree_pk);
        renderRequiredModalsIntoHTML(intent_pk);
        copy_tree_id = get_cookie("copy_tree_id")
        if (copy_tree_id != "") {
            $("#paste-tree-node").removeClass("disbled-paste-btn")
        }
        $(document).ready(function () {
            tree_generate_table();

            $(".create-form-select-field").select2({
                width: "95%",
                placeholder: "Select from drop down",
                allowClear: true,
                dropdownParent: $("#modal-create-form"),
            })

            $(".file-type-select-field").select2({
                width: "95%",
                placeholder: "Select file type",
                allowClear: true,
                dropdownParent: $("#modal-create-form"),
            })
        });

        var checked_val = document.getElementById("checkbox-intent-attachment").checked
        if (checked_val) {
            document.getElementById("easychat-attachment-dropdown").style.display = "table-row";
            document.getElementById("easychat-save-attachment-server").style.display = "table-row";
            select_widget('div-file-attach-widget')
        } else {
            document.getElementById("easychat-attachment-dropdown").style.display = "none";
            document.getElementById("easychat-save-attachment-server").style.display = "none";
        }

        var video_attachment_val = document.getElementById("checkbox-intent-video-recorder").checked
        if (video_attachment_val) {
            document.getElementById("easychat-save-video-attachment-server").style.display = "table-row";
            select_widget('div-video-recorder-widget')
        } else {
            document.getElementById("easychat-save-video-attachment-server").style.display = "none";
        }


        var date_checked_val = document.getElementById("checkbox-intent-date-picker").checked
        if (date_checked_val) {
            document.getElementById("intent-single-date-picker").style.display = "block";
            document.getElementById("intent-multi-date-picker").style.display = "block";
            select_widget('div-date-picker-widget')
        } else {
            document.getElementById("intent-single-date-picker").style.display = "none";
            document.getElementById("intent-multi-date-picker").style.display = "none";
        }

        var time_checked_val = document.getElementById("checkbox-intent-time-picker").checked
        if (time_checked_val) {
            document.getElementById("intent-single-time-picker").style.display = "block";
            document.getElementById("intent-multi-time-picker").style.display = "block";
            select_widget('div-time-picker-widget')
        } else {
            document.getElementById("intent-single-time-picker").style.display = "none";
            document.getElementById("intent-multi-time-picker").style.display = "none";
        }
        var calender_checked_val = window.is_calender_picker_allowed
        if (calender_checked_val == "True") {
            calendar_initializations()
            select_widget('div-calender-picker-widget')
        }

        var range_checked_val = window.is_range_slider_required;
        if (range_checked_val == 'True') {
            select_widget('div-range-slider-widget')
            document.getElementById('range-slider-min-max-value-input-div').style.display = "flex";
        } else {
            document.getElementById('range-slider-min-max-value-input-div').style.display = "none";
        }

        var radio_button_val = window.is_radio_btn_allowed
        if (radio_button_val == "True") {
            select_widget('div-radio-button-widget')
            var values = window.radio_button_choices_values.split("_")
            if (values != []) {
                for (var i = 0; i < values.length; i++) {
                    value = values[i];
                    add_radio_button_choices_collection(value)
                }
            }
        }
        var check_box_val = window.is_check_box_allowed
        if (check_box_val == "True") {
            select_widget('div-check-box-widget')
            var values = window.check_box_choices_values.split("_")
            if (values != []) {
                for (var i = 0; i < values.length; i++) {
                    value = values[i];
                    add_check_box_choices_collection(value)
                }
            }
        }

        var drop_down_val = window.is_drop_down_allowed
        if (drop_down_val == "True") {
            select_widget('div-drop-down-widget')
            var values = window.drop_down_choices_values.split("_")
            if (values != []) {
                for (var i = 0; i < values.length; i++) {
                    value = values[i];
                    add_drop_down_choices_collection(value)
                }
            }
        }

        var is_phone_widget_enabled = window.is_phone_widget_enabled
        if (is_phone_widget_enabled == 'True') {
            select_widget('div-phone-number-widget')
            
        }

        var create_form_val = window.is_create_form_allowed;
        if (create_form_val == 'True') {
            select_widget('div-create-form-widget')
            let tmp = document.createElement("DIV");
            tmp.innerHTML = window.initial_form_fields;
            var json_string = tmp.textContent || tmp.innerText || ""
            json_string = json_string.replaceAll(`'`, `"`)
            add_initial_form_sections(JSON.parse(json_string))
            tmp.remove()
            document.getElementById('intent-create-form-fields').style.display = "block";
        } else {

            add_section_in_create_form_modal()

        }

        load_order_of_responses();
    }
}


if (window.location.pathname == "/chat/settings/") {

    response = $.ajax({
        url: "/chat/get-config-params/",
        type: "POST",
        async: false,
        data: {},
        success: function (response) {

            return response;
        },
        error: function (xhr, textstatus, errorthrown) {
            // console.log("Please report this error: "+errorthrown+xhr.status+xhr.responseText);
        }
    }).responseJSON;
    response = custom_decrypt(response)
    response = JSON.parse(response);

    is_feedback_required = response['is_feedback_required'];
    allow_bot_switch = response['allow_bot_switch'];
    document.getElementById("is-feedback-required-checkbox").checked = is_feedback_required;
    document.getElementById("is-bot-switch-checkbox").checked = allow_bot_switch;

    $("#save-settings").click(function (e) {
        is_feedback_required = document.getElementById("is-feedback-required-checkbox").checked;
        allow_bot_switch = document.getElementById("is-bot-switch-checkbox").checked;
        var json_string = JSON.stringify({
            is_feedback_required: is_feedback_required,
            allow_bot_switch: allow_bot_switch
        })

        json_string = EncryptVariable(json_string);

        $.ajax({
            url: "/chat/set-config-params/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Details updated successfully."
                    }, 2000);
                } else {
                    M.toast({
                        "html": "Unable to update the details. Please try again later."
                    }, 2000);
                }
            }
        });
    });
}

// if (window.location.pathname.indexOf("/chat/create-intent/") != -1) {
//     var url_string = window.location.href
//     var url = new URL(url_string);
//     var c = url.searchParams.get("val");
//     if (c != null) {
//         sentence_list = c.split(',')

//         for (var i = 0; i < sentence_list.length; i++) {
//             value = sentence_list[i]
//             addIntentTrainingDataIntoCollection(value);
//             $("#add_enter_intent_training_data").val("");
//         }
//         $("#intent_name").val(sentence_list[0])
//         $("#training_sentence_li").addClass('active')
//     }


//     get_url_bot_pk = url.searchParams.get("bot_pk");
//     if (get_url_bot_pk != null) {

//         $("#multiple-select-bot-choice-pk-list").val(get_url_bot_pk)
//     }

//     open_close_language_dropdown_event()
//     select_option_for_form_widgets()
//     add_language_dropdown_search_event()
//     language_dropdown_close_onclicking_outside_event()

//     add_section_in_create_form_modal()
// }

function create_intent_modal_close(no_of_groups) {

    var checkboxes = document.getElementsByClassName("modify-intent-checkbox")

    for (var count = 0; count < checkboxes.length; count++) {
        checkboxes[count].checked = false
    }

    $("#modal" + no_of_groups).modal('close')

}

function create_intent_sentence_btn(no_of_groups, elem) {
    modal_id = $(elem).parent().parent().attr("id")
    // console.log($(this).parent().parent().attr("id"))
    var selected = [];
    $('#' + modal_id + ' #checkboxes-' + no_of_groups + ' input:checked').each(function () {
        selected.push($(this).attr('name'));
    });

    if (selected.length == 0) {
        M.toast({
            "html": "Please select atleast one training sentence."
        }, 2000);
        return;
    }

    if (last_selected_bot_for_self_learning != null) {
        window.open("/chat/create-intent/?val=" + selected + "&bot_pk=" + last_selected_bot_for_self_learning, '_blank');
    } else {
        window.open("/chat/create-intent/?val=" + selected, '_blank');
    }

    create_intent_modal_close(no_of_groups)

}

function add_training_modal_close(no_of_groups) {
    var checkboxes = document.getElementsByClassName("modify-intent-checkbox")

    for (var count = 0; count < checkboxes.length; count++) {
        checkboxes[count].checked = false
    }

    $("#modal_add_to_intent" + no_of_groups).modal('close')

    $('#modal_add_to_intent' + no_of_groups + ' .easychat-dropdown-select-custom .easychat-console-language-option').closest('.list').find('.easychat-lang-selected').removeClass('easychat-lang-selected');
    $("#easychat-dropdown-select-custom-0" + "-" + no_of_groups + " ul li:eq('0')").addClass('easychat-lang-selected');
    $("#modal_add_to_intent" + no_of_groups + ' #current-0' + '-' + no_of_groups).html("choose from dropdown");

}

function add_training_sentence_self_learning(no_of_groups) {
    selected_intent = $("#modal_add_to_intent" + no_of_groups + " .easychat-lang-selected");
    selected_intent = selected_intent[0].dataset.value
    selected_bot_id = get_url_vars()["bot_pk"];
    if (selected_intent == null || selected_intent == undefined || selected_intent == "" || selected_intent == "choose from dropdown") {
        M.toast({
            "html": "Please select Intent."
        }, 2000);
        return;
    }
    var selected = [];
    $('#modal_add_to_intent' + no_of_groups + ' #checkboxes-' + no_of_groups + ' input:checked').each(function () {
        selected.push($(this).attr('name'));
    });

    if (selected.length == 0) {
        M.toast({
            "html": "Please select atleast one training sentence."
        }, 2000);
        return;
    }

    var json_string = JSON.stringify({
        training_questions: selected,
        intent_pk: selected_intent,
        bot_id: selected_bot_id
    })

    json_string = EncryptVariable(json_string);

    response = $.ajax({
        url: "/chat/add-training-questions/",
        type: "POST",
        // async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response.status == 200) {
                if (selected.length < 2) {
                    M.toast({
                        "html": "Training sentence added successfully"
                    }, 2000);
                } else {
                    M.toast({
                        "html": "Training sentences added successfully"
                    }, 2000);

                }

                if (document.getElementById('easychat-build-bot-toast-div').style.display != 'flex') {
                    document.getElementById('easychat-build-bot-toast-div').style.display = 'flex';
                    document.getElementById("easychat-content-wrapper").style.maxHeight = '85vh';
                    var side_nav = document.getElementById('main-console-sidenav');
                    if (side_nav) {
                        side_nav.style.marginTop = '6.5%';
                    }
                }

                add_training_modal_close(no_of_groups)

            } else if (response.status == 300) {
                M.toast({
                    "html": "Training sentence already exists"
                }, 3000);

            } else if (response.status == 500) {
                M.toast({
                    "html": "Can't add training sentence"
                }, 3000);
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            // console.log("Please report this error: "+errorthrown+xhr.status+xhr.responseText);
            $("#preloader_self_learning_div").hide()
            return {
                "status": 500
            };
        }
    }).responseJSON;

}

$(document).on("click", ".create_intent_from_cluster_btn", function (e) {

    button_id = this.id
    sentence_list_id = button_id.split('___')[1]
    sentence_list = $('#sentences_list_' + sentence_list_id).html()
});

$(document).on("change", "#cluster_start_date, #cluster_end_date, #selected-bot-id", function (e) {
    startdate = $('#cluster_start_date').val();
    enddate = $('#cluster_end_date').val();
    var todaydate = new Date();
    var s_date = new Date(startdate)
    var e_date = new Date(enddate)
    if (s_date.getTime() > todaydate.getTime()){
        M.toast({
            "html": "Start date cannot be greater than today's date."
        }, 2000);
        return;
    }
    if (e_date.getTime() > todaydate.getTime()){
        M.toast({
            "html": "End date cannot be greater than today's date."
        }, 2000);
        return;
    }
    M.toast({
        "html": "Getting maximum number of classes allowed for the given date range."
    }, 2000);
    $("#preloader_self_learning_div").show()
    number_of_clusters = $('#number_of_clusters').val();
    document.getElementById("number_of_clusters").disabled = true;
    selected_bot_id = get_url_vars()["bot_pk"];

    if (selected_bot_id == null || selected_bot_id == undefined || selected_bot_id == "") {
        M.toast({
            "html": "Please select atleast one bot."
        }, 2000);
        return;
    }

    var json_string = JSON.stringify({
        start_date: startdate,
        end_date: enddate,
        number_of_clusters: number_of_clusters,
        bot_id: selected_bot_id
    })

    json_string = EncryptVariable(json_string);

    response = $.ajax({
        url: "/chat/get-cluster-details/",
        type: "POST",
        // async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            M.Toast.dismissAll();
            $("#preloader_self_learning_div").hide()
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response.status == 200) {
                document.getElementById("maximum_classes").innerHTML = response["maximum_clusters"];
                document.getElementById("number_of_clusters").disabled = false;
            } else if (response.status == 101) {
                M.toast({
                    "html": response.message
                }, 3000);
                document.getElementById("number_of_clusters").disabled = false;
            } else {
                document.getElementById("maximum_classes").innerHTML = response["maximum_clusters"];
                document.getElementById("number_of_clusters").disabled = false;
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            // console.log("Please report this error: "+errorthrown+xhr.status+xhr.responseText);
            $("#preloader_self_learning_div").hide()
            return {
                "status": 500
            };
        }
    }).responseJSON;
});

$(document).on("click", "#generate_cluster_btn", function (e) {
    startdate = $('#cluster_start_date').val();
    enddate = $('#cluster_end_date').val();

    excel_from_date = startdate.split('-')[2] + "-" + startdate.split('-')[1] + "-" + startdate.split('-')[0]
    excel_to_date = enddate.split('-')[2] + "-" + enddate.split('-')[1] + "-" + enddate.split('-')[0]
    $('#cluster-download-as-excel').attr("href", "/files/SelfLearning-Clusters_from_" + excel_from_date + "_to_" + excel_to_date + ".xlsx")
    number_of_clusters = $('#number_of_clusters').val();
    selected_bot_id = get_url_vars()["bot_pk"];
    maximum_number_of_clusters_allowed = $('#maximum_classes').text();

    if (number_of_clusters == '' || number_of_clusters == null || number_of_clusters == undefined || number_of_clusters <= 0) {
        M.toast({
            "html": "Please enter valid number of clusters."
        }, 2000);
        return;
    }

    if (parseInt(number_of_clusters) > parseInt(maximum_number_of_clusters_allowed)) {
        M.toast({
            "html": "Max classes allowed is " + maximum_number_of_clusters_allowed
        }, 2000);
        return;
    }

    if (selected_bot_id == null || selected_bot_id == undefined || selected_bot_id == "") {
        M.toast({
            "html": "Please select atleast one bot."
        }, 2000);
        return;
    }

    if (startdate == "" || enddate == "" || startdate == null || enddate == null) {
        M.toast({
            "html": "Start date or end date cannot be empty."
        }, 2000);
        return;
    }

    var json_string = JSON.stringify({
        start_date: startdate,
        end_date: enddate,
        number_of_clusters: number_of_clusters,
        bot_id: selected_bot_id
    });
    $("#preloader_self_learning_div").show()

    last_selected_bot_for_self_learning = selected_bot_id;
    json_string = EncryptVariable(json_string);

    response = $.ajax({
        url: "/chat/get-cluster-details/",
        type: "POST",
        // async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            $("#preloader_self_learning_div").hide()
            response = custom_decrypt(response)
            response = JSON.parse(response);

            if (response.status == 200 && !isDictEmpty(response["cluster_dict"])) {
                document.getElementById("cluster-download-as-excel").style.display = "block";

                cluster_dict = response["cluster_dict"]

                intent_details_list = getIntentDetails([selected_bot_id], []);

                intent_name_list = intent_details_list["intent_name"];

                intent_pk_list = intent_details_list["intent_pk"];

                html_content = `<div class="row" style="padding:1em; data-select2-id="select2-data-56-xano""><div class="col s12"><div class="col s12" style="margin-bottom: 2.5rem;">
                                                <div class="self-learning-clustering-text-div">Clustering Result</div>
                                                <div class="self-learning-clustering-text-subheading">(Grouping a set of intents in such a way that intents in the same group are more similar to each other than to those in other groups. )
                                                </div>
                                            </div></div>`;

                var no_of_groups = 0;

                for (var key in cluster_dict) {
                    sentence_list = cluster_dict[key]
                    sentence_visible = "";
                    sentence_hidden = "";
                    sentence_visible_length = 0;
                    sentence_hidden_length = 0;
                    html_content += `<div class="col s12 m4">
                                                <div class="card small" style="height: 270px;">
                                                    <div class="card-content dont-break-out scroll-card self-learning-scrollcard-div" style="padding: 1.2rem 1.6rem 1rem !important;">
                                                    <span id="sentences_list_` + key + `"  style="display:none;">
                                                    ` + sentence_list + `
                                                    </span>
                                                        <span class="card-title">` + sentence_list[0] + `</span>`;
                    for (var i = 0; i < sentence_list.length; i++) {
                        if (i < 3) {
                            sentence_visible_length += 1
                            sentence_visible += "<p>" + sentence_list[i] + "</p>"
                        } else {
                            sentence_hidden += "<p>" + sentence_list[i] + "</p>"
                            sentence_hidden_length += 1
                        }
                    }

                    while (sentence_visible_length < 3) {
                        sentence_visible += "<br>"
                        sentence_visible_length += 1
                    }

                    html_content += `<p>` + sentence_visible + `</p>`

                    if (sentence_hidden_length > 1) {
                        html_content += ` <p><a href="#modal` + key + `" class="modal-trigger" id="see_intent_list___` + key + `"><b> and ` + sentence_hidden_length + ` more sentences</b></a></p>`
                    } else if (sentence_hidden_length == 1) {
                        html_content += ` <p><a href="#modal` + key + `" class="modal-trigger" id="see_intent_list___` + key + `"><b> and ` + sentence_hidden_length + ` more sentence</b></a></p>`
                    } else {
                        html_content += `<br>`
                    }


                    html_content += `</div>
                        <div class="card-action" style="padding: 16px 8px;">
                            <div class="self-learning-create-add-btns">
                                <a href="#modal` + key + `" class="btn easychat-button modal-trigger">Create New Intent</a>
                                <a href="#modal_add_to_intent` + key + `" class="btn easychat-button modal-trigger">Add to Existing Intent</a>
                            </div>
                        </div>
                    </div>
                </div>` ;



                    html_content += `  <div id="modal` + key + `" class="modal modal-fixed-footer self-learning-create-add-intent-modal" style="overflow-x: hidden; z-index: 1003; display: none; opacity: 0; top: 4%; transform: scaleX(0.8) scaleY(0.8);" tabindex="0">
                                                <div class="modal-content">
                                                    <h5>Select Training Questions for the intent</h5>
                                                    <div class="self-learning-modal-intent-list-div" id="checkboxes-`+ key + `">`
                    for (var i = 0; i < sentence_list.length; i++) {
                        html_content += `<p>
                                                        <label>
                                                          <input name="` + sentence_list[i] + `" class="modify-intent-checkbox filled-in" type="checkbox" />
                                                          <span class="self-learning-span">` + sentence_list[i] + `</span>
                                                        </label>
                                                        </p>`
                    }


                    html_content += `</div>
                                                </div>
                                                <div class="modal-footer">
                                                    <a href="javascript:void(0)" class="btn transparent-btn black-text" onclick="create_intent_modal_close(` + no_of_groups + `)">Cancel</a>
                                                    <a href="javascript:void(0)" class="btn green lighten-2 black-text" id="submit_training_sentences_btn" onclick="create_intent_sentence_btn(` + no_of_groups + `,this)" style="margin-left:1%">Create Intent</a>
                                                </div>
                                            </div>`


                    html_content += `<div id="modal_add_to_intent` + key + `" class="modal modal-fixed-footer self-learning-create-add-intent-modal" 
            style="overflow-x: hidden; z-index: 1003; display: none; opacity: 0; top: 4%; transform: scaleX(0.8) scaleY(0.8);" 
            tabindex="0" data-select2-id="select2-data-modal_add_to_intent` + key + `" >`

                    html_content += `<div class="modal-content" id="self-learning-intent-div-` + no_of_groups + `" style="overflow-y:scroll" 
           data-select2-id="select2-data-self-learning-intent-div-` + no_of_groups + `">
                                                    <h5>Select Training Questions to add in to existing intent</h5>`

                    html_content += `<div class="easychat-console-custom-dropdown easychat-self-learning-dropdown">
            <div class="easychat-console-select-drop" style="display: none;">
            <span data-value="choose from dropdown">choose from dropdown</span>`


                    for (var i = intent_name_list.length - 1; i >= 0; i--) {
                        html_content += `<span data-value="` + intent_pk_list[i] + `">` + intent_name_list[i] + `</span>`
                    }


                    html_content += `</div>
                            </div>`

                    html_content += `<div class="self-learning-modal-intent-list-div" id="checkboxes-` + key + `">`


                    for (var i = 0; i < sentence_list.length; i++) {

                        html_content += `<p>
                                <label>
                                    <input name="` + sentence_list[i] + `" class="modify-intent-checkbox filled-in" type="checkbox" >
                                    <span class="self-learning-span">` + sentence_list[i] + `</span>
                                </label>
                            </p>`
                    }

                    html_content += `</div>
                             </div>`

                    html_content += `<div class="modal-footer">
                                            <a href="javascript:void(0)" class="btn transparent-btn black-text" onclick="add_training_modal_close(` + no_of_groups + `)">Cancel</a>&nbsp;&nbsp;&nbsp;
                                            <a href="javascript:void(0)" class="btn green lighten-2 black-text" onclick="add_training_sentence_self_learning(` + no_of_groups + `)">Add to Intent</a>
                                        </div>
                                        </div>`
                    no_of_groups += 1;
                }


                html_content += `</div>`;

                $(document).ready(function () {
                    $('.modal').modal();
                    $('select:not(.non-select2)').select2({
                        width: "100%"
                    });

                });

                var search_script = ''

                for (var i = 0; i < no_of_groups; i++) {
                    search_script += `<script>
                        $(document).ready(function() {
                            $('#select-add-to-intent-self-learning-` + i + `').select2({
                                width: "100%",
                                dropdownParent: $("#self-learning-intent-div-` + i + `"),
                            })
                            });</script>`
                }

                $("#div-self-learning-console").html(html_content + search_script);

                for (var count = 0; count < no_of_groups; count++) {
                    create_custom_dropdown_for_selflearning(count)
                    select_option_for_selflearning(count)
                }

                open_close_language_dropdown_event()
                add_language_dropdown_search_event()
                language_dropdown_close_onclicking_outside_event()
            } else if (response.status == 101) {
                M.toast({
                    "html": response.message
                }, 3000);
            } else {
                $("#div-self-learning-console").html("")
                $(".modal").modal();
                $("#modal-no-cluster-available").modal('open');
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            // console.log("Please report this error: "+errorthrown+xhr.status+xhr.responseText);
            $("#preloader_self_learning_div").hide()
            return {
                "status": 500
            };
        }
    }).responseJSON;
});

function renderWordMapper() {
    $.ajax({
        url: '/chat/get-word-mappers/',
        type: 'GET',
        data: {

        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);

            if (response["status"] != 200) {
                console.log("Report this error: word mapper is not rendering",)
                return;
            }

            word_mapper_list = response['word_mapper_list']

            var html_table = `

            <table id="word-mappers-info-table" class="striped highlight responsive-table white" style="margin-top:2%;">
                <thead>
                    <tr>
                        <th>Similar Word</th>
                        <th>Keyword</th>
                    </tr>
                </thead>
                <tbody>`;

            for (var i = 0; i < word_mapper_list.length; i++) {
                keyword = word_mapper_list[i]["keyword"];
                similar_words = word_mapper_list[i]["similar_words"];
                pk = word_mapper_list[i]["pk"];

                html_table += `<tr>
                        <td>` + similar_words + `</td>
                        <td>
                          <div class="row">
                              <div class="col s6">
                                ` + keyword + `&nbsp;&nbsp;
                              </div>
                              <div class="col s6">
                                <div class="right">
                                  <!-- <a class="btn-floating btn-medium waves-effect waves-light purple darken-3"><i class="material-icons">edit</i></a>&nbsp;&nbsp;&nbsp; -->
                                  <a href="#word_mapper_modal_` + i + `" class="modal-trigger btn-floating btn-medium waves-effect waves-light purple darken-3"><i class="material-icons">delete</i></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                </div>
                              </div>
                          </div>
                        </td>
                    </tr>

                    <!-- Modal Structure -->
                    <div id="word_mapper_modal_` + i + `" class="modal">
                      <div class="modal-content">
                        <h4>Are you sure?</h4>
                        <p>Selected word mapper will be deleted permanently?</p>
                      </div>
                      <div class="modal-footer">
                        <a href="/chat/delete-word-mapper/` + pk + `" class="modal-close waves-effect waves-green btn-flat red darken-3 white-text">Agree</a>
                      </div>
                    </div>`;
            }

            html_table += `</tbody>bot
            </table>`;

            $("#word-mappers-table-container").html(html_table);
        },
        error: function (e) {

        }
    })
}

function alphanumeric(inputtxt) {
    var letters = /^[0-9a-zA-Z &@-]+$/;
    if (inputtxt.match(letters)) {
        return true;
    } else {
        return false;
    }
}


function save_edit_word_mapper(word_mapper_pk) {
    var wordtomap_str = "";
    var wordintomap_str = $("#wordintomap-" + word_mapper_pk).val().trim();
    wordtomap_list = M.Chips.getInstance($('#wordtomap-' + word_mapper_pk)).chipsData;

    if (wordtomap_list.length == 0) {
        M.toast({
            "html": "Input single words cannot be empty."
        }, 2000);
        return;
    }

    for (var i = 0; i < wordtomap_list.length; i++) {
        if (wordtomap_list[i]["tag"].trim().length == 0) {
            M.toast({
                "html": "Word cannot be empty."
            }, 2000);
            return;
        }

        if (alphanumeric(wordtomap_list[i]["tag"]) == false) {
            M.toast({
                "html": "Kindly enter alphanumeric text only."
            }, 2000);
            return;
        }
        wordtomap_str += wordtomap_list[i]["tag"].trim() + ",";
    }

    if (wordintomap_str.trim().length == 0) {
        M.toast({
            "html": "Keyword cannot be empty."
        }, 2000);
        return;
    }

    if (alphanumeric(wordintomap_str) == false) {
        M.toast({
            "html": "Kindly enter alphanumeric text only."
        }, 2000);
        return;
    }

    // var selected_bot_id = $("#select-add-wordmapper-bot-"+word_mapper_pk).val();
    var selected_bot_id = get_url_vars()["bot_pk"];
    console.log(selected_bot_id);

    var json_string = JSON.stringify({
        word_mapper_pk: word_mapper_pk,
        values: wordtomap_str,
        keyword: wordintomap_str,
        selected_bot_id: selected_bot_id
    });

    json_string = EncryptVariable(json_string)
    document.getElementById("easychat_word_mapper_preloader").style.display = "block";
    $.ajax({
        url: "/chat/save-word-mappers/",
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            "data": json_string,
        },
        success: function (response) {
            document.getElementById("easychat_word_mapper_preloader").style.display = "none";
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Word Mapper saved successfully"
                }, 2000);
                $("#modal-add-word-mapper").modal("close");
                setTimeout(function (e) {
                    window.location = "/chat/word-mappers/?bot_pk=" + selected_bot_id;
                }, 2000);

            } else {
                M.toast({
                    "html": "Please enter valid data"
                }, 2000);
            }
        },
        error: function (e) {
            document.getElementById("easychat_word_mapper_preloader").style.display = "none";
        }
    });
}

function initialize_add_mapper_word_list() {
    unique_word_mappers_list = [];
    check_word_mappers_list = true;
    var word_map_list = M.Chips.getInstance($('#wordtomap')).chipsData;
    for (let i = 0; i < word_map_list.length; i++) {
        unique_word_mappers_list.push(word_map_list[i]["tag"].trim().toLowerCase())
    }
}

function initialize_edit_mapper_word_list(edit_word_mapper_pk) {
    unique_word_mappers_list = [];
    check_word_mappers_list = true;
    var word_map_list = M.Chips.getInstance($('#wordtomap-' + edit_word_mapper_pk)).chipsData;
    for (let i = 0; i < word_map_list.length; i++) {
        unique_word_mappers_list.push(word_map_list[i]["tag"].trim().toLowerCase())
    }
}

function add_word_mappers(e, data) {
    var added_word = data.childNodes[0].textContent;
    var need_to_delete = false;

    if (check_word_mappers_list) {
        if (unique_word_mappers_list.includes(added_word.trim().toLowerCase())) {
            M.toast({
                "html": "Words must be unique."
            }, 2000);
            need_to_delete = true;
            remove_element_from_list = false;
        } else {
            unique_word_mappers_list.push(added_word.trim().toLowerCase())
        }
    }

    if (alphanumeric(added_word) == false) {
        M.toast({
            "html": "Kindly enter alphanumeric text only."
        }, 2000);
        need_to_delete = true;
    } else if (added_word.trim().length == 0) {
        M.toast({
            "html": "Word cannot be empty."
        }, 2000);
        need_to_delete = true;
    } else if (added_word.trim().split(' ').length > 1) {
        M.toast({
            "html": "Please enter valid word."
        }, 2000);
        need_to_delete = true;
    }

    if (need_to_delete) {
        var added_el = e[0].M_Chips.chipsData
        var elem = e[0].M_Chips.el
        var instance = M.Chips.getInstance(elem);
        instance.deleteChip(added_el.length - 1);
    }
}

function delete_word_mappers(e, data) {
    var deleted_word = data.childNodes[0].textContent;
    if (remove_element_from_list) {
        const index = unique_word_mappers_list.indexOf(deleted_word.trim().toLowerCase());
        if (index > -1) {
            unique_word_mappers_list.splice(index, 1);
        }
    }
    remove_element_from_list = true;
}

if (window.location.pathname.indexOf("/chat/word-mappers/") != -1) {

    $(document).ready(function () {
        $('.modal').modal();
        $('.chips').chips();
        $('#wordtomap').chips({
            onChipAdd: function (e, data) {
                add_word_mappers(e, data)
            },
            onChipDelete: function (e, data) {
                delete_word_mappers(e, data)
            }
        });
        $('.word-mappers-similar-chips').chips({
            onChipAdd: function (e, data) {
                add_word_mappers(e, data)
            },
            onChipDelete: function (e, data) {
                delete_word_mappers(e, data)
            }
        });

        /*load existing word mapper chips starts*/
        similar_chips = document.getElementsByClassName("word-mappers-similar-chips");
        for (var chip_index = 0; chip_index < similar_chips.length; chip_index++) {
            chip_value_list = similar_chips[chip_index].getAttribute("value");
            chip_value_list = chip_value_list.split(",");
            for (var chip_value_index = 0; chip_value_index < chip_value_list.length; chip_value_index++) {
                var tag = chip_value_list[chip_value_index].trim();
                if (tag != "") {
                    M.Chips.getInstance(similar_chips[chip_index]).addChip({
                        'tag': tag
                    });
                }
            }
        }
        /*load existing word mapper chips ends*/
    });

    $(document).on("click", "#save-word-mapper", function (e) {

        var wordtomap_str = "";
        var wordintomap_str = $("#wordintomap").val().trim();
        wordtomap_list = M.Chips.getInstance($('#wordtomap')).chipsData;

        if (wordtomap_list.length == 0) {
            M.toast({
                "html": "Input single words cannot be empty."
            }, 2000);
            return;
        }

        for (var i = 0; i < wordtomap_list.length; i++) {
            if (wordtomap_list[i]["tag"].trim().length == 0) {
                M.toast({
                    "html": "Word cannot be empty."
                }, 2000);
                return;
            }
            if (alphanumeric(wordtomap_list[i]["tag"]) == false) {
                M.toast({
                    "html": "Kindly enter alphanumeric text only."
                }, 2000);
                return;
            }
            wordtomap_str += wordtomap_list[i]["tag"].trim() + ",";
        }

        if (wordintomap_str.trim().length == 0) {
            M.toast({
                "html": "Keyword cannot be empty."
            }, 2000);
            return;
        }

        if (alphanumeric(wordintomap_str) == false) {
            M.toast({
                "html": "Kindly enter alphanumeric text only."
            }, 2000);
            return;
        }

        var selected_bot_id = get_url_vars()["bot_pk"];
        console.log(selected_bot_id);

        var json_string = JSON.stringify({
            word_mapper_pk: null,
            values: wordtomap_str,
            keyword: wordintomap_str,
            selected_bot_id: selected_bot_id
        })
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_word_mapper_preloader").style.display = "block";
        $.ajax({
            url: "/chat/save-word-mappers/",
            type: "POST",
            headers: {
                'X-CSRFToken': get_csrf_token(),
            },
            data: {
                "data": json_string,
            },
            success: function (response) {
                document.getElementById("easychat_word_mapper_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Word Mapper Added successfully"
                    }, 2000);
                    $("#modal-add-word-mapper").modal("close");

                    setTimeout(function (e) {
                        window.location = "/chat/word-mappers/?bot_pk=" + selected_bot_id;
                    }, 2000);
                } else if (response["status"] == 101) {
                    M.toast({
                        "html": response["message"]
                    }, 2000);
                } else {
                    M.toast({
                        "html": "Please enter valid data"
                    }, 2000);
                }
            },
            error: function (e) {
                document.getElementById("easychat_word_mapper_preloader").style.display = "none";
            }
        });
    });
}

function download_word_mapper_template() {
    $.ajax({
        url: "/chat/download-word-mapper-template/",
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        success: function (response) {
            response = custom_decrypt(response);
            response = JSON.parse(response);
            if ((response["status"] = 200)) {
                if (response["export_path"] == null) {
                    alert("Sorry, unable to process your request. Kindly try again later.");
                } else {
                    if (response["export_path_exist"]) {
                        window.open(response["export_path"], "_blank");
                    } else {
                        alert("Requested data doesn't exists. Kindly try again later.");
                    }
                }
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        },
    });
}

$(document).on("click", "#import-bot-word-mapper", function (e) {

    bot_id = get_url_vars()["bot_pk"];

    e.preventDefault();

    var input_file = ($("#input_import_word_mapper_file"))[0].files[0]

    if (input_file == null || input_file == undefined) {
        M.toast({
            "html": "Please select a file."
        }, 2000);
        return false;
    }

    if (check_malicious_file(input_file.name) == true) {
        return false;
    }

    var formData = new FormData();
    var csrf_token = $('input[name="csrfmiddlewaretoken"]').val();
    formData.append("input_file", input_file);
    formData.append("data", JSON.stringify({
        "bot_id": bot_id
    }));

    $("#preloader-import-word-mapper").show();
    $.ajax({
        url: "/chat/upload-word-mappers/",
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token
        },
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Words Created Successfully."
                }, 2000);
                setTimeout(function () {
                    window.location.reload();
                }, 2000);
            } else if (response["status"] == 401) {
                var message = response.message;
                M.toast({
                    "html": message
                }, 5000);
                setTimeout(function () {
                    window.location.reload();
                }, 5000);
            } else if (response["status"] == 300) {
                M.toast({
                    "html": "Not supported file format"
                }, 2000);
            } else {
                M.toast({
                    "html": "Unable to import. Please upload valid excel file."
                }, 2000);
            }
            $('#input_import_word_mapper_file2').val("")
            $("#preloader-import-word-mapper").hide();
            $("#modal-import-word-mapper-excel").modal("close");
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
            $("#preloader-import-word-mapper").hide();
            $("#modal-import-word-mapper-excel").modal("close");
        }
    });
});

if (window.location.pathname.indexOf("/chat/channels/web") != -1) {

    function font_family_list(font, font_size) {
        $.ajax({
            url: "https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyAxUTWdP9EaAtUAdWscKgu8KXLwzW4tXOI",
            type: "GET",
            success: function (response) {
                var html_string = '';
                font_item_list = [];
                font_item_list = response['items']
                for (var i = 0; i < font_item_list.length; i++) {
                    if (font_item_list[i]['family'] == font) {
                        html_string += '<option value=' + font_item_list[i]['family'].replace(' ', '+') + ' selected>' + font_item_list[i]['family'] + '</option>';
                    } else {
                        html_string += '<option value=' + font_item_list[i]['family'].replace(' ', '+') + '>' + font_item_list[i]['family'] + '</option>';
                    }
                }
                size_list = '<option value="" selected>Choose One</option>'
                for (var i = 1; i <= 40; i++) {
                    if (font_size == i) {
                        size_list += "<option value='" + i + "px' selected>" + i + "px </option>";
                    } else {
                        size_list += "<option value='" + i + "px'>" + i + "px </option>";
                    }
                }
                $('#modal-set-bot-font').modal("open");
                $("#bot-font-list").select2({
                    dropdownParent: $("#modal-set-bot-font"),
                    width: "100%",
                });
                $("#bot-font-size-list").select2({
                    dropdownParent: $("#modal-set-bot-font"),
                    width: "100%",
                });
                $("#bot-custom-font-size").select2({
                    dropdownParent: $("#modal-set-bot-font"),
                    width: "100%",
                });
                document.getElementById("bot-font-list").innerHTML = html_string;
                document.getElementById("bot-custom-font-size").innerHTML = size_list;

            },
            error: function () {

            },
        });
    }

    function set_test_font(font, font_size) {
        font_css_list = document.getElementsByClassName("bot-name");
        for (var i = 0; i < font_css_list.length; i++) {
            font_css_list[i].remove();
        }

        font_family = document.getElementById("bot-font-list").value;
        font_size_custom = document.getElementById("bot-font-size-list").value;
        if (font_size_custom == "custom") {
            document.getElementById("bot-custom-font-size-div").style.display = "block";
        } else {
            document.getElementById("bot-custom-font-size-div").style.display = "none";
            document.getElementById("bot-custom-font-size").value = "";
        }
        if (font_size_custom == "custom") {
            font_size_custom = document.getElementById("bot-custom-font-size").value;
        }
        if (font_size_custom == "") {
            font_size_custom = font_size;
        }
        if (font_family == '') {
            font_family = font;
        }
        document.getElementById("bot-font-test").style.fontFamily = font_family.replace('+', ' ');
        document.getElementById("bot-font-data").style.fontFamily = font_family.replace('+', ' ');
        document.getElementById("bot-font-test").style.fontSize = "14px";
        document.getElementById("bot-font-test").value = document.getElementById("bot-font-test").value;
        var x = document.createElement("LINK");
        x.setAttribute("rel", "stylesheet");
        x.setAttribute("href", "https://fonts.googleapis.com/css?family=" + font_family);
        x.setAttribute("class", "bot-font");
        document.head.appendChild(x);
    }

    function save_bot_font(font, font_size) {
        var location_href = window.location.href;
        var location_href = location_href.replace("#", "");
        var location_href = location_href.replace("!", "");
        var bot_id = get_url_vars()['id']
        font_family = document.getElementById("bot-font-list").value;
        font_size_custom = document.getElementById("bot-font-size-list").value;
        if (font_size_custom == "custom") {
            font_size_custom = document.getElementById("bot-custom-font-size").value;
        }
        if (font_size_custom == "") {
            font_size_custom = font_size;
        }
        if (font_family == '' || check_font_change) {
            font_family = font.replace('+', ' ');
        }
        font_family = font_family.replace('+', ' ');
        var json_string = JSON.stringify({
            bot_id: bot_id,
            font: font_family,
            font_size: "14px",
        })
        json_string = EncryptVariable(json_string)
        $.ajax({
            url: "/chat/bot/save-font/",
            type: "POST",
            headers: {
                'X-CSRFToken': get_csrf_token(),
            },
            data: {
                json_string: json_string
            },
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    document.getElementById("bot-font-data").value = font_family;
                } else {
                    M.toast({
                        "html": "Internal Server Error"
                    }, 2000);
                }
            },
            error: function (error) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                console.log("Report this error: ", error)
            }
        });
        document.getElementById("bot-font-list").value;
        document.getElementById("bot-font-size-list").value;
        document.getElementById("bot-custom-font-size").value;
    }
    var location_href = window.location.href;
    var location_href = location_href.replace("#", "");
    var location_href = location_href.replace("!", "");
    var bot_id = get_url_vars()['id']
    var selected_language = get_url_vars()['selected_lang']
    var json_string = JSON.stringify({
        bot_id: bot_id,
        selected_language: selected_language,
    })
    json_string = EncryptVariable(json_string)
    document.getElementById("easychat_web_channel_preloader").style.display = "block";
    $.ajax({
        url: "/chat/channels/web/edit/",
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            json_string: json_string
        },
        success: function (response) {
            document.getElementById("easychat_web_channel_preloader").style.display = "none";
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                //$("#welcome-message").val(response["welcome_message"]);
                //$("#failure-message").val(response["failure_message"]);
                // document.getElementById("easychat_web_channel_preloader").style.display = "none";

                failure_recommendation_list = response["failure_recommendations"]["items"]
                initial_message_list = response["initial_message"]["items"];
                images = response["initial_message"]["images"];
                compressed_images = response["initial_message"]["compressed_images"];
                videos = response["initial_message"]["videos"];

                carousel_img_url_list = response["carousel_img_url_list"]["items"];
                compressed_img_url_list = response["carousel_img_url_list"]["compressed_items"];
                redirect_url_list = response["redirect_url_list"]["items"];
                welcome_banner_count = response["welcome_banner_count"];
                try {
                    selected_language = get_url_vars()['selected_lang']
                    if (selected_language == "en" || selected_language == null || selected_language == undefined) {
                        if (welcome_banner_count < 1) {
                            preview_banner_button = document.getElementById("preview-banner")
                            preview_banner_button.style.opacity = "0.5";
                            preview_banner_button.disabled = true;
                            preview_banner_button.style.cursor = "not-allowed";
                        }
                    }

                } catch (err) {
                    console.log(err)
                }

                for (var i = 0; i < carousel_img_url_list.length; i++) {
                    if (compressed_img_url_list) {
                        AddBannerRedirectionUrl(carousel_img_url_list[i], redirect_url_list[i], compressed_img_url_list[i]);
                    } else {
                        AddBannerRedirectionUrl(carousel_img_url_list[i], redirect_url_list[i]);
                    }
                }

                if (images != null && images != undefined && images.length > 0) {
                    document.getElementById("uploaded-bot-welcome-image").src = images[0];
                    if (compressed_images && compressed_images.length > 0) {
                        document.getElementById("uploaded-bot-welcome-image").dataset.compressed_src = compressed_images[0];
                    }

                    document.getElementById("uploaded-bot-welcome-image").style.display = "inline-block";
                    $("#remove-bot-welcome-image").show();
                }

                if (videos != null && videos != undefined && videos.length > 0) {
                    document.getElementById("upload-bot-welcome-video-url").value = videos[0];
                }
            } else {
                console.log("Internal server error.");
            }
        },
        error: function (error) {
            document.getElementById("easychat_web_channel_preloader").style.display = "none";
            console.log("Report this error: ", error)
        }
    });

    function handle_theme_selection(elem) {
        if (prev_theme_selected == "") {
            prev_theme_selected = THEME_SELECTED
        }
        if (elem.id == "theme_3") {
            $('#show_welcome_banner_checkbox').hide()
            $('#show_initial_questions_checkbox').hide()
            if (!check_is_welcome_banner_present()) {
                showToast("Welcome banner can not be empty for this theme");
                document.getElementById(prev_theme_selected).checked = true
                elem.checked = false
                return;
            }
        } else {
            $('#show_welcome_banner_checkbox').css('display', 'table-row');
            $('#show_initial_questions_checkbox').css('display', 'table-row');
        }
        prev_theme_selected = elem.id;
    }

    $(document).on("click", "#ignore-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Web"
        ignore_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).on("click", "#auto-fix-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Web"
        auto_fix_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).ready(function () {
        create_language_custom_dropdowns();
        disable_auto_pop_up_fileds();
        // will be using this in future
        // disable_web_landing_options();
    });
    add_channel_language_selction_event("web")
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event()

    $(document).on("click", "#save-web-channel-for-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let selected_language = get_url_vars()['selected_lang']
        let welcome_message = $("#welcome-message").trumbowyg('html')
        let failure_message = $("#failure-message").trumbowyg('html')
        let authentication_message = $("#authentication-message").trumbowyg('html')
        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);

        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }

        var is_auto_popup_enabled_desktop = document.getElementById("is-bot-auto-popup-allowed-desktop").checked;
        var is_auto_popup_enabled_mobile = document.getElementById("is-bot-auto-popup-allowed-mobile").checked;
        var auto_popup_timer = document.getElementById("bot_auto_popup_timer").value;
        var auto_popup_type = document.getElementById("bot-popup-options-values").value;
        var auto_popup_text = document.getElementById("bot_auto_popup_text").value;
        var auto_popup_initial_message_list = $("#bot-popup-multiple-select-message-list").val();
        var save_auto_pop_up_text = false

        if (is_auto_popup_enabled_desktop == true || is_auto_popup_enabled_mobile == true) {
            if (auto_popup_timer.trim() == "") {
                M.toast({
                    "html": "Auto popup timer cannot be empty."
                }, 2000);
                return;
            }
            if (auto_popup_type.trim() == "0") {
                M.toast({
                    "html": "Auto popup type cannot be empty."
                }, 2000);
                return;
            }

            if (auto_popup_type == 2) {
                save_auto_pop_up_text = true
                if (auto_popup_text.trim() == "") {
                    M.toast({
                        "html": "Auto popup text cannot be empty."
                    }, 2000);
                    return;
                }

            } else if (auto_popup_type == 3) {
                save_auto_pop_up_text = true
                if (auto_popup_initial_message_list.length == 0) {
                    M.toast({
                        "html": "Auto popup initial messages cannot be empty."
                    }, 2000);
                    return;
                }

                if (auto_popup_text.trim() == "") {
                    M.toast({
                        "html": "Auto popup text cannot be empty."
                    }, 2000);
                    return;
                }

            }

        }

        if (auto_popup_timer == '' || auto_popup_timer == null)
            auto_popup_timer = 5;
        channel_name = "Web"

        json_string = {
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            channel_name: channel_name,
            selected_language: selected_language,
            authentication_message: authentication_message,
            auto_popup_text: auto_popup_text,
            save_auto_pop_up_text: save_auto_pop_up_text,

        }
        json_string = JSON.stringify(json_string);
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_web_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/save-channel-language-tuned-objects/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = set_url_parameter("selected_lang", "en")
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            },
        });
    });

}


$('#is-bot-auto-popup-allowed-desktop, #is-bot-auto-popup-allowed-mobile').click(function () {
    var bot_auto_popup_allowed_desktop = document.getElementById("is-bot-auto-popup-allowed-desktop").checked;
    var bot_auto_popup_allowed_mobile = document.getElementById("is-bot-auto-popup-allowed-mobile").checked;
    if (bot_auto_popup_allowed_desktop == true || bot_auto_popup_allowed_mobile == true) {
        document.getElementById("bot-popup-time").style.display = "table-row";
        document.getElementById("bot-popup-options").style.display = "table-row";
        document.getElementById('bot-popup-inactivity').style.display = "table-row";
        if(document.getElementById('auto_popup_enable_custom_intents').checked == true && document.getElementById("bot-popup-options-values").value == "3"){
            $("#enable_custom_intents_web_auto_popup").show();
            $("#enable_custom_intents_web_auto_popup_list").show();
        }
        else{
            $("#enable_custom_intents_web_auto_popup").hide();
            $("#enable_custom_intents_web_auto_popup_list").hide();
        }

    }
    if (bot_auto_popup_allowed_desktop == false && bot_auto_popup_allowed_mobile == false) {
        document.getElementById("bot-popup-time").style.display = "none";
        document.getElementById("bot-popup-options").style.display = "none";
        document.getElementById('bot-popup-intents').style.display = "none";
        document.getElementById('bot-popup-text').style.display = "none";
        document.getElementById('bot-popup-options-values').value = "0";
        document.getElementById('bot-popup-options-values').value = "0";
        document.getElementById('bot-popup-inactivity').style.display = "none";
        $("#enable_custom_intents_web_auto_popup").hide();
        $("#enable_custom_intents_web_auto_popup_list").hide();
        document.getElementById('bot-popup-custom-intent').style.display = "none";
    }
});

function show_popup_options(select) {
    if (select.value == 2) {
        document.getElementById('bot-popup-text').style.display = "table-row";
        document.getElementById('bot-popup-intents').style.display = "none";
        $("#enable_custom_intents_web_auto_popup").hide();
        $("#enable_custom_intents_web_auto_popup_list").hide();
        document.getElementById('bot-popup-custom-intent').style.display = "none";

    } else if (select.value == 3) {
        document.getElementById('bot-popup-intents').style.display = "table-row";
        document.getElementById('bot-popup-text').style.display = "table-row";
        document.getElementById('bot-popup-custom-intent').style.display = "table-row";
        if(document.getElementById('auto_popup_enable_custom_intents').checked==true){
            $("#enable_custom_intents_web_auto_popup").show();
            $("#enable_custom_intents_web_auto_popup_list").show();
        }
        else{
            $("#enable_custom_intents_web_auto_popup").hide();
            $("#enable_custom_intents_web_auto_popup_list").hide();
        }
    } else {
        document.getElementById('bot-popup-intents').style.display = "none";
        document.getElementById('bot-popup-text').style.display = "none";
        $("#enable_custom_intents_web_auto_popup").hide();
        $("#enable_custom_intents_web_auto_popup_list").hide();
        document.getElementById('bot-popup-custom-intent').style.display = "none";
    }
}

function check_channel_messages_validation(welcome_message, failure_message, authentication_message) {
    var message = "No Error";
    if (welcome_message.trim() == "") {
        message = "Welcome message cannot be empty."
        return message;
    }

    if (welcome_message.trim().length > character_limit_large_text) {
        message = "Max limit of 500 characters for welcome message exceeded."
        return message;
    }

    if (failure_message.trim() == "") {
        message = "Failure message cannot be empty."
        return message;
    }

    if (failure_message.trim().length > character_limit_large_text) {
        message = "Max limit of 500 characters for failure message exceeded."
        return message;
    }

    if (authentication_message.trim() == "") {
        message = "Authentication message cannot be empty."
        return message;
    }

    if (authentication_message.trim().length > character_limit_large_text) {
        message = "Max limit of 500 characters for authentication message exceeded."
        return message;
    }
    return message;
}

function add_web_landing_url() {

    var bot_id = get_url_vars()['id']
    let selected_language = get_url_vars()['selected_lang']
    if (selected_language == undefined || selected_language == null) {
        selected_language = "en"
    }
    web_landing_url = document.getElementById("add_landing_url_data").value.trim();
    if (isValidURL(web_landing_url) == false) {
        M.toast({
            "html": "URL/Links added must consist of HTTP/HTTPS, Eg. https://www.google.com"
        }, 2000);
        return;
    }

    web_initial_intent = document.getElementById("select-web-landing-list").value;
    if (web_landing_url != "" && web_initial_intent == "") {
        M.toast({
            "html": "Please select an intent."
        }, 2000);
        return;
    }

    show_prompt_message_after_timer = false
    prompt_message = ""
    prompt_message_timer = ""
    if (document.getElementById("show_prompt_details").checked) {
        show_prompt_message_after_timer = true
        prompt_message = document.getElementById("prompt_message").value
        if (prompt_message == "") {
            M.toast({
                "html": "Please enter a prompt message"
            }, 2000);
            return;
        }
        prompt_message_timer = document.getElementById("prompt_message_timer").value
        if (prompt_message_timer == "") {
            M.toast({
                "html": "5 seconds is selected by default"
            }, 2000);
            prompt_message_timer = 5
        }

        document.getElementById("show_prompt_details").checked = false;
        document.getElementById("prompt_message_timer").value = ""
        document.getElementById("prompt_message").value = ""
    }

    document.getElementById("add_landing_url_data").value = "";
    $("#select-web-landing-list").select2().val("").trigger("change");

    json_string = JSON.stringify({
        bot_id: bot_id,
        web_landing_url: web_landing_url,
        web_initial_intent: web_initial_intent,
        show_prompt_message_after_timer: show_prompt_message_after_timer,
        prompt_message: prompt_message,
        prompt_message_timer: prompt_message_timer,
        selected_language: selected_language,
    });
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/channels/save-web-landing/",
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Changes saved. Please update js file again."
                })
                setTimeout(function () {
                    window.location.reload()
                }, 2000)

                // var id = response["id"]
                // var intent_name = response["intent_name"]
                // var table_html = '<tr id="web_landing_row_'+ id +'">\
                //                             <td>'
                //                                 + web_landing_url  +
                //                             '</td>\
                //                             <td>' 
                //                                 + intent_name +
                //                             '</td>'

                if (show_prompt_message_after_timer == true) {
                    table_html += '<td><label><input type="checkbox" id="show_prompt_checked" checked disabled="disabled"><span></span></label></td></tr>'
                } else {
                    table_html += '<td><label><input type="checkbox" id="show_prompt_checked"><span></span></label></td></tr>'
                }

                document.getElementById("table-web-landing-data").innerHTML += table_html
            } else if (response["status"] == 301) {
                M.toast({
                    "html": "This url already exists"
                })
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        },
    });
}

function edit_web_landing(id, old_url) {
    var web_url = document.getElementById("edit_web_url_" + id).value.trim();
    if (isValidURL(web_url) == false && web_url != "") {
        M.toast({
            "html": "Please enter a valid URL"
        }, 2000);
        return;
    }
    var intent_value = document.getElementById("edit_select_list_" + id).value;
    if (web_url != "" && intent_value == "") {
        M.toast({
            "html": "Please select one of the following intent."
        }, 2000);
        return;
    }
    var bot_id = get_url_vars()['id']
    let selected_language = get_url_vars()['selected_lang']
    if (selected_language == undefined || selected_language == null) {
        selected_language = "en"
    }
    show_prompt_message_after_timer = false
    prompt_message = ""
    prompt_message_timer = ""
    if (document.getElementById("edit_checkbox_" + id).checked) {
        show_prompt_message_after_timer = true
        prompt_message = (document.getElementById("prompt_message_" + id).value).trim()
        prompt_message = stripHTML(prompt_message)
        if (prompt_message == "") {
            document.getElementById("prompt_message_" + id).value = ""
            M.toast({
                "html": "Please enter a prompt message"
            }, 2000);
            return;
        }
        prompt_message_timer = document.getElementById("prompt_message_timer_" + id).value
        if (prompt_message_timer == "") {
            M.toast({
                "html": "5 seconds is selected by default"
            }, 2000);
            prompt_message_timer = 5
        }
    }
    json_string = JSON.stringify({
        bot_id: bot_id,
        web_url: web_url,
        intent_value: intent_value,
        id: id,
        old_url: old_url,
        show_prompt_message_after_timer: show_prompt_message_after_timer,
        prompt_message: prompt_message,
        prompt_message_timer: prompt_message_timer,
        selected_language: selected_language
    });
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/channels/edit-web-landing/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Details updated successfully."
                })
                window.location = window.location.href;
            } else if (response["status"] == 301) {
                M.toast({
                    "html": "Please update atleast one field."
                })
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        },
    });
}

function edit_web_landing_for_non_primary_language(id, old_url) {


    var bot_id = get_url_vars()['id']
    let selected_language = get_url_vars()['selected_lang']
    if (selected_language == undefined || selected_language == null) {
        selected_language = "en"
    }
    prompt_message = ""
    if (document.getElementById("edit_checkbox_" + id).checked) {
        show_prompt_message_after_timer = true
        prompt_message = (document.getElementById("prompt_message_" + id).value).trim()
        if (prompt_message == "") {
            document.getElementById("prompt_message_" + id).value = ""
            M.toast({
                "html": "Please enter a prompt message"
            }, 2000);
            return;
        }
    }
    json_string = JSON.stringify({
        bot_id: bot_id,
        id: id,
        old_url: old_url,
        prompt_message: prompt_message,
        selected_language: selected_language
    });
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/channels/edit-web-landing-for-non-primary-language/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Details updated successfully."
                })
                window.location = window.location.href;
            } else if (response["status"] == 301) {
                M.toast({
                    "html": "Please update atleast one field."
                })
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        },
    });
}

function delete_entry_web_landing(id) {
    var bot_id = get_url_vars()['id']
    json_string = JSON.stringify({
        bot_id: bot_id,
        id: id,
    });
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/channels/delete-web-landing/",
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Details updated successfully."
                })
                window.location = window.location.href;
            } else if (response["status"] == 301) {
                M.toast({
                    "html": "The URL is alredy exist in the list."
                })
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        },
    });
}

function generate_campaign_link() {
    intent_pk = null

    if (window.location.href.indexOf("intent_pk=") != -1) {
        active_url = window.location.href.replace("#", "");
        active_url = active_url.replace("!", "");
        intent_pk = active_url.substring(active_url.indexOf("intent_pk=") + "intent_pk=".length,);
        intent_pk = intent_pk.split("&")[0];
    }

    if (intent_pk == null || intent_pk == "") {
        return;
    }

    campaign_link = document.getElementById("campaign_url").value;
    campaign_link = stripHTML(campaign_link);
    campaign_link = campaign_link.trim()

    if (campaign_link == "" || !(isValidURL(campaign_link))) {
        M.toast({
            "html": "URL/Links added must consist of HTTP/HTTPS, Eg. https://www.google.com."
        })
        return;
    }
    if (campaign_link.length > 500) {
        M.toast({
            "html": "Campaign link should be less than 500 characters."
        })
        return;
    }

    json_string = JSON.stringify({
        intent_pk: intent_pk,
        campaign_link: campaign_link,
        bot_pk: BOT_ID
    });

    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/generate-campaign-link/",
        type: "POST",
        data: {
            json_string: json_string
        },
        headers: {
            "X-CSRFToken": get_csrf_token()
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Campaign link generated successfully."
                })

            if (response.campaign_link) {
                $("#campaign_link").show()
                $("#campaign_link_text").text(response.campaign_link)
                $("#campaign_link_new_tab")[0].href = response.campaign_link
                $("#campaign_link_copy").attr("onclick", `copy_text_to_clipboard('${response.campaign_link}')`)
                $("#campaign_url").val("")
            }
            } else if (response["status"] == 300) {
                M.toast({
                    "html": response["message"]
                })
            } else {
                M.toast({
                    "html": response["message"]
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        },
    });
}

function copy_text_to_clipboard(text) {
    navigator.clipboard.writeText(text).then(function () {
        M.toast({
            "html": "Copied Successfully."
        })
    }, function (err) {
        M.toast({
            "html": "Cannot copy. Please try again."
        })
    });
}

if (window.location.pathname.indexOf("/chat/channels/google-assistant") != -1) {
    var location_href = window.location.href;
    var location_href = location_href.replace("#", "");
    var location_href = location_href.replace("!", "");
    var bot_id = get_url_vars()['id'];
    var json_string = JSON.stringify({
        bot_id: bot_id
    })
    json_string = EncryptVariable(json_string);
    document.getElementById("easychat_google_assistant_channel_preloader").style.display = "block";
    $.ajax({
        url: "/chat/channels/google-assistant/edit/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            document.getElementById("easychat_google_assistant_channel_preloader").style.display = "none";
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                failure_recommendation_list = response["failure_recommendations"]["items"]
                initial_message_list = response["initial_message"]["items"];
                images = response["initial_message"]["images"];
                videos = response["initial_message"]["videos"];

                if (images != undefined && images != null && images.length > 0) {
                    document.getElementById("uploaded-bot-welcome-image").src = images[0];
                    document.getElementById("uploaded-bot-welcome-image").style.display = "inline-block";
                    $("#remove-bot-welcome-image").show();
                }

                if (videos != undefined && videos != null && videos.length > 0) {
                    document.getElementById("upload-bot-welcome-video-url").value = videos[0];
                }


            } else {
                console.log("Internal server error.");
            }
        },
        error: function (error) {
            document.getElementById("easychat_google_assistant_channel_preloader").style.display = "none";
            console.log("Report this error: ", error)
        }
    });

    add_channel_language_selction_event("google-assistant")
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event()
    $(document).ready(function () {
        create_language_custom_dropdowns();
    });
    $(document).on("click", "#ignore-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "GoogleHome"
        ignore_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).on("click", "#auto-fix-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "GoogleHome"
        auto_fix_changes_in_non_primary_languages(bot_id, channel_name)
    });

    $(document).on("click", "#save-google-channel", function (e) {
        var location_href = window.location.href;
        var location_href = location_href.replace("#", "");
        var location_href = location_href.replace("!", "");
        var bot_id = get_url_vars()['id'];
        // var welcome_message = $('#welcome-message').val();
        // var failure_message = $('#failure-message').val();
        // var authentication_message = $("#authentication-message").val();
        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var is_language_auto_detection_enabled = document.getElementById("is_language_auto_detection_enabled").checked
        var is_enable_choose_language_flow_enabled_for_welcome_response = document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").checked

        selected_supported_languages = get_selected_languages_list()

        if ("en" in selected_supported_languages == false) {
            selected_supported_languages.push("en");
        }

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }

        initial_message_list = $("#multiple-select-google-initial-message-list").val();

        failure_recommendation_list = $("#multiple-select-google-failure-message-list").val();

        channel_name = "GoogleHome"
        is_project_details_added = add_google_alexa_project_id(channel_name, false)
        if (!is_project_details_added) {
            return;
        }
        json_string = JSON.stringify({
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            authentication_message: authentication_message,
            initial_message_list: initial_message_list,
            image_url: "",
            video_url: "",
            failure_recommendation_list: failure_recommendation_list,
            selected_supported_languages: selected_supported_languages,
            is_enable_choose_language_flow_enabled_for_welcome_response: is_enable_choose_language_flow_enabled_for_welcome_response,
            is_language_auto_detection_enabled: is_language_auto_detection_enabled,
        });
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_google_assistant_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/channels/google-assistant/save/",
            type: "POST",
            data: {
                json_string: json_string
            },
            headers: {
                "X-CSRFToken": get_csrf_token()
            },
            success: function (response) {
                document.getElementById("easychat_google_assistant_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else if (response["status"] == 402) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                    setTimeout(function() {
                        window.location.href = "/chat/home"
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_google_assistant_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            }
        });
    });

    $("#language-box-options-container .option .item-checkbox").change(function () {

        enable_disable_auto_language_detection_toogle();
        enable_disable_welcome_message_language_change_toogle(true)

    });

    $(document).on("click", "#save-google-channel-for-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let selected_language = get_url_vars()['selected_lang']

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }
        channel_name = "GoogleHome"

        json_string = {
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            channel_name: channel_name,
            selected_language: selected_language,
            authentication_message: authentication_message,
            save_auto_pop_up_text: false,
        }
        json_string = JSON.stringify(json_string);
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_google_assistant_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/save-channel-language-tuned-objects/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_google_assistant_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            },
        });
    });
}
$(document).on("click", "#upload-gmb-display-image", function (e) {
    e.preventDefault();
    var input_upload_image = ($("#input_upload_gmb-display-image"))[0].files[0]

    if (input_upload_image == null || input_upload_image == undefined) {
        M.toast({
            "html": "Please select a file"
        }, 2000);

        setTimeout(function () {
            $('#modal-upload-gmb-display-image').modal('open');
        }, 200);
        return false;
    }

    if (input_upload_image.size > 51200) {
        M.toast({
            "html": "Size limit exceed(should be less than 50 KB)."
        }, 2000);

        setTimeout(function () {
            $('#modal-upload-gmb-display-image').modal('open');
        }, 200);

        return false;
    }

    if (check_malicious_file(input_upload_image.name) == true) {

        setTimeout(function () {
            $('#modal-upload-gmb-display-image').modal('open');
        }, 200);
        return false;
    }

    var reader = new FileReader();
    reader.readAsDataURL(input_upload_image);
    reader.onload = function () {

        base64_str = reader.result.split(",")[1];

        uploaded_file = [];
        uploaded_file.push({
            "filename": input_upload_image.name,
            "base64_file": base64_str,
        });

        upload_gmb_display_image();
    };

    reader.onerror = function (error) {
        console.log('Error: ', error);
    };
});

async function upload_gmb_display_image() {
    var response = await upload_image();

    if (response && response.status == 200) {
        src = window.location.protocol + "//" + window.location.host + response["src"];
        $("#gmb_display_picture_url").click()
        $("#gmb_display_picture_url").val(src);
        document.getElementById("gmb-display-image-preview").src = src;

        document.getElementById('input_upload_gmb-display-image2').value = "";
    }
}

function upload_gmb_credentials_file() {

    var input_uploaded_files = ($("#input-upload-gmb-credentials-file"))[0].files;
    bot_id = (get_url_vars()["id"])

    if (input_uploaded_files.length == 0) {
        M.toast({
            "html": "Please select a file to upload."
        }, 2000);
        return;
    }


    var formData = new FormData();
    formData.append("file", input_uploaded_files[0]);
    formData.append("bot_id", bot_id)

    $.ajax({
        url: "/chat/upload-gmb-credential-file/",
        type: "POST",
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
            // $("#easychat-drive-files-preloader").hide();
            if (response["status"] == 200) {
                $("#modal-upload-gmb-credential-file").modal('close');
                M.toast({
                    "html": "File Uploaded Successfully!"
                }, 2000);
                document.getElementById('gmb_api_credential_file_path').value = response["filename"]
            } else if (response["status"] == 300) {
                M.toast({
                    "html": "Unable to upload files. File format not supported. Please do not use .(dot) in filename except for extension."
                }, 2000);
            } else {
                M.toast({
                    "html": "Unable to upload the files!"
                }, 2000);
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            M.toast({
                "html": "Unable to upload the files! Please check your internet"
            }, 2000);
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);

        }
    });

}
if (window.location.pathname.indexOf("/chat/channels/google-buisness-messages") != -1) {
    var location_href = window.location.href;
    var location_href = location_href.replace("#", "");
    var location_href = location_href.replace("!", "");
    var bot_id = get_url_vars()['id'];
    var json_string = JSON.stringify({
        bot_id: bot_id
    })
    json_string = EncryptVariable(json_string);
    document.getElementById("easychat_google_my_buisness_channel_preloader").style.display = "block";
    $.ajax({
        url: "/chat/channels/google-buisness-messages/edit/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            document.getElementById("easychat_google_my_buisness_channel_preloader").style.display = "none";
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                failure_recommendation_list = response["failure_recommendations"]["items"]
                initial_message_list = response["initial_message"]["items"];



            } else {
                M.toast({
                    "html": "internal server error"
                }, 2000);
            }
        },
        error: function (error) {
            document.getElementById("easychat_google_my_buisness_channel_preloader").style.display = "none";
            M.toast({
                "html": "Report this  error"
            }, 2000);
        }
    });

    add_channel_language_selction_event("google-buisness-messages")
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event()
    $(document).ready(function () {
        create_language_custom_dropdowns();
    });
    $(document).on("click", "#ignore-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "GoogleBusinessMessages"
        ignore_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).on("click", "#auto-fix-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "GoogleBusinessMessages"
        auto_fix_changes_in_non_primary_languages(bot_id, channel_name)
    });

    $(document).on("click", "#save-google-buisness-messages-channel", function (e) {
        var location_href = window.location.href;
        var location_href = location_href.replace("#", "");
        var location_href = location_href.replace("!", "");
        var bot_id = get_url_vars()['id'];

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var is_language_auto_detection_enabled = document.getElementById("is_language_auto_detection_enabled").checked
        var is_enable_choose_language_flow_enabled_for_welcome_response = document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").checked

        selected_supported_languages = get_selected_languages_list()

        if ("en" in selected_supported_languages == false) {
            selected_supported_languages.push("en");
        }
        var gmb_agent_id = document.getElementById("gmb-agent-id").value;
        var gmb_brand_id = document.getElementById("gmb-brand-id").value;
        var client_access_token = document.getElementById("gbm-client-access-token").value;

        var gmb_display_name = document.getElementById("gmb-bot-display-name").value;;
        var gmb_display_image_url = document.getElementById("gmb_display_picture_url").value.trim();;
        var gmb_credentials_file_name = document.getElementById("gmb_api_credential_file_path").value;;
        var gmb_privacy_policy_url = document.getElementById("gmb-client-privacy-policy-url").value.trim();;



        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }
        if (gmb_agent_id.trim() == "") {
            M.toast({
                "html": "GBM Agent Id cannot be empty."
            }, 2000);
            return;
        }
        if (gmb_brand_id.trim() == "") {
            M.toast({
                "html": "GBM  Brand Id cannot be empty."
            }, 2000);
            return;
        }
        if (gmb_display_name == "") {
            M.toast({
                "html": "GBM  Bot display name cannot be empty"
            }, 2000);
            return;
        }
        if (gmb_privacy_policy_url == "") {
            M.toast({
                "html": "Privacy policy url cannot be empty."
            }, 2000);
            return;
        }
        var pattern = /^((http|https|ftp):\/\/)/;
        if (!pattern.test(gmb_privacy_policy_url)) {
            M.toast({
                "html": "Please enter valid privacy policy url."
            }, 2000);
            return;
        }

        if (gmb_credentials_file_name == "") {
            M.toast({
                "html": "Please upload GBM  API credentials file."
            }, 2000);
            return;
        }

        if (gmb_display_image_url.trim() == "") {
            M.toast({
                "html": "Please Upload GBM  display image "
            }, 2000);
            return;
        }
        if (!checkImageURL(gmb_display_image_url)) {
            M.toast({
                "html": "Please provide valid GMB display image url"
            }, 2000);
            return;
        }

        if (isValidURL(gmb_display_image_url) == false) {
            M.toast({
                "html": "Please provide valid GBM display image url"
            }, 2000);
            return;
        }

        initial_message_list = $("#multiple-select-google-buisness-messages-initial-message-list").val();

        failure_recommendation_list = $("#multiple-select-google-buisness-messages-failure-message-list").val();



        json_string = JSON.stringify({
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            authentication_message: authentication_message,
            initial_message_list: initial_message_list,
            gmb_agent_id: gmb_agent_id,
            gmb_brand_id: gmb_brand_id,
            gmb_display_name: gmb_display_name,
            gmb_display_image_url: gmb_display_image_url,
            gmb_privacy_policy_url: gmb_privacy_policy_url,
            failure_recommendation_list: failure_recommendation_list,
            client_access_token: client_access_token,
            selected_supported_languages: selected_supported_languages,
            is_enable_choose_language_flow_enabled_for_welcome_response: is_enable_choose_language_flow_enabled_for_welcome_response,
            is_language_auto_detection_enabled: is_language_auto_detection_enabled,
        });
        json_string = EncryptVariable(json_string);

        document.getElementById("easychat_google_my_buisness_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/channels/google-buisness-messages/save/",
            type: "POST",
            data: {
                json_string: json_string
            },
            headers: {
                "X-CSRFToken": get_csrf_token()
            },
            success: function (response) {
                //change id here
                document.getElementById("easychat_google_my_buisness_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else if (response["status"] == 402) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                    setTimeout(function() {
                        window.location.href = "/chat/home"
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_google_my_buisness_channel_preloader").style.display = "none";
                M.toast({
                    "html": "Report this  error"
                }, 2000);
            }
        });
    });

    $("#language-box-options-container .option .item-checkbox").change(function () {

        enable_disable_auto_language_detection_toogle();
        enable_disable_welcome_message_language_change_toogle()

    });

    $(document).on("click", "#save-google-buisness-messages-channel-for-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let selected_language = get_url_vars()['selected_lang']

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }
        channel_name = "GoogleBusinessMessages"

        json_string = {
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            channel_name: channel_name,
            selected_language: selected_language,
            authentication_message: authentication_message,
            save_auto_pop_up_text: false,
        }
        json_string = JSON.stringify(json_string);
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_google_my_buisness_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/save-channel-language-tuned-objects/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_google_my_buisness_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            },
        });
    });
}

if (window.location.pathname.indexOf("/chat/channels/alexa") != -1) {
    var location_href = window.location.href;
    var location_href = location_href.replace("#", "");
    var location_href = location_href.replace("!", "");
    var bot_id = get_url_vars()['id'];
    var json_string = JSON.stringify({
        bot_id: bot_id
    })
    json_string = EncryptVariable(json_string);
    document.getElementById("easychat_alexa_channel_preloader").style.display = "block";
    $.ajax({
        url: "/chat/channels/alexa/edit/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            document.getElementById("easychat_alexa_channel_preloader").style.display = "none";
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                failure_recommendation_list = response["failure_recommendations"]["items"]
                initial_message_list = response["initial_message"]["items"];
                images = response["initial_message"]["images"];
                videos = response["initial_message"]["videos"];

                if (images != undefined && images != null && images.length > 0) {
                    document.getElementById("uploaded-bot-welcome-image").src = images[0];
                    document.getElementById("uploaded-bot-welcome-image").style.display = "inline-block";
                    $("#remove-bot-welcome-image").show();
                }

                if (videos != undefined && videos != null && videos.length > 0) {
                    document.getElementById("upload-bot-welcome-video-url").value = videos[0];
                }

            } else {
                console.log("Internal server error.");
            }
        },
        error: function (error) {
            document.getElementById("easychat_alexa_channel_preloader").style.display = "none";
            console.log("Report this error: ", error)
        }
    });


    add_channel_language_selction_event("alexa")
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event()
    $(document).ready(function () {
        create_language_custom_dropdowns();
    });
    $(document).on("click", "#ignore-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Alexa"
        ignore_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).on("click", "#auto-fix-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Alexa"
        auto_fix_changes_in_non_primary_languages(bot_id, channel_name)
    });

    $(document).on("click", "#save-alexa-channel", function (e) {
        var location_href = window.location.href;
        var location_href = location_href.replace("#", "");
        var location_href = location_href.replace("!", "");
        var bot_id = location_href.split("?")[1].split("=")[1];
        // var welcome_message = $('#welcome-message').val();
        // var failure_message = $('#failure-message').val();
        // var authentication_message = $("#authentication-message").val();
        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var is_language_auto_detection_enabled = document.getElementById("is_language_auto_detection_enabled").checked
        var is_enable_choose_language_flow_enabled_for_welcome_response = document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").checked

        selected_supported_languages = get_selected_languages_list()

        if ("en" in selected_supported_languages == false) {
            selected_supported_languages.push("en");
        }

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }

        initial_message_list = $("#multiple-select-alexa-initial-message-list").val();

        failure_recommendation_list = $("#multiple-select-alexa-failure-message-list").val();

        is_project_details_added = add_alexa_project_id("Alexa", false)
        if (!is_project_details_added) {
            return;
        }
        json_string = JSON.stringify({
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            authentication_message: authentication_message,
            initial_message_list: initial_message_list,
            image_url: "",
            video_url: "",
            failure_recommendation_list: failure_recommendation_list,
            selected_supported_languages: selected_supported_languages,
            is_enable_choose_language_flow_enabled_for_welcome_response: is_enable_choose_language_flow_enabled_for_welcome_response,
            is_language_auto_detection_enabled: is_language_auto_detection_enabled,
        });
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_alexa_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/channels/alexa/save/",
            type: "POST",
            data: {
                json_string: json_string
            },
            headers: {
                "X-CSRFToken": get_csrf_token()
            },
            success: function (response) {
                document.getElementById("easychat_alexa_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else if (response["status"] == 402) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                    setTimeout(function() {
                        window.location.href = "/chat/home"
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_alexa_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            }
        });
    });

    $("#language-box-options-container .option .item-checkbox").change(function () {

        enable_disable_auto_language_detection_toogle();
        enable_disable_welcome_message_language_change_toogle(true)

    });

    $(document).on("click", "#save-alexa-channel-for-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let selected_language = get_url_vars()['selected_lang']

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }
        channel_name = "Alexa"

        json_string = {
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            channel_name: channel_name,
            selected_language: selected_language,
            authentication_message: authentication_message,
            save_auto_pop_up_text: false,
        }
        json_string = JSON.stringify(json_string);
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_alexa_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/save-channel-language-tuned-objects/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_alexa_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            },
        });
    });
}

if (window.location.pathname.indexOf("/chat/channels/facebook") != -1) {
    var location_href = window.location.href;
    var location_href = location_href.replace("#", "");
    var location_href = location_href.replace("!", "");
    var bot_id = get_url_vars()['id'];
    var json_string = JSON.stringify({
        bot_id: bot_id
    })

    json_string = EncryptVariable(json_string);
    document.getElementById("easychat_facebook_channel_preloader").style.display = "block";
    $.ajax({
        url: "/chat/channels/facebook/edit/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            document.getElementById("easychat_facebook_channel_preloader").style.display = "none";
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                failure_recommendation_list = response["failure_recommendations"]["items"]
                initial_message_list = response["initial_message"]["items"];
                images = response["initial_message"]["images"];
                videos = response["initial_message"]["videos"];

                if (images != undefined && images != null && images.length > 0) {
                    document.getElementById("uploaded-bot-welcome-image").src = images[0];
                    document.getElementById("uploaded-bot-welcome-image").style.display = "inline-block";
                    $("#remove-bot-welcome-image").show();
                }

                if (videos != undefined && videos != null && videos.length > 0) {
                    document.getElementById("upload-bot-welcome-video-url").value = videos[0];
                }

            } else {
                console.log("Internal server error.");
            }
        },
        error: function (error) {
            document.getElementById("easychat_facebook_channel_preloader").style.display = "none";
            console.log("Report this error: ", error)
        }
    });

    add_channel_language_selction_event("facebook")
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event()
    $(document).ready(function () {
        create_language_custom_dropdowns();
    });
    $(document).on("click", "#ignore-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Facebook"
        ignore_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).on("click", "#auto-fix-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Facebook"
        auto_fix_changes_in_non_primary_languages(bot_id, channel_name)
    });

    $(document).on("click", "#save-facebook-channel", function (e) {
        var location_href = window.location.href;
        var location_href = location_href.replace("#", "");
        var location_href = location_href.replace("!", "");
        var bot_id = location_href.split("?")[1].split("=")[1];
        // var welcome_message = $('#welcome-message').val();
        // var failure_message = $('#failure-message').val();
        // var authentication_message = $("#authentication-message").val();
        var welcome_message = $("#welcome-message").trumbowyg('html')
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var is_language_auto_detection_enabled = document.getElementById("is_language_auto_detection_enabled").checked
        var is_enable_choose_language_flow_enabled_for_welcome_response = document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").checked

        selected_supported_languages = get_selected_languages_list()

        if ("en" in selected_supported_languages == false) {
            selected_supported_languages.push("en");
        }

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }

        initial_message_list = $("#multiple-select-facebook-initial-message-list").val();

        failure_recommendation_list = $("#multiple-select-facebook-failure-message-list").val();

        verification_code = document.getElementById("facebook_verification_code").value;
        if (verification_code == '') {
            M.toast({
                "html": "Verification Code cannot be empty!"
            }, 2000);
            return;
        }

        page_access_token = document.getElementById("facebook_page_access_token").value;
        if (page_access_token == '') {
            M.toast({
                "html": "Page Access Token cannot be empty!"
            }, 2000);
            return;
        }

        image_id = document.getElementById("uploaded-bot-welcome-image");
        image_url = image_id.getAttribute("src");
        video_url = document.getElementById("upload-bot-welcome-video-url").value.trim();

        if (isValidURL(video_url) == false && video_url != "") {
            M.toast({
                "html": "Please enter valid video url"
            }, 2000);
            return;
        }

        json_string = JSON.stringify({
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            authentication_message: authentication_message,
            initial_message_list: initial_message_list,
            image_url: image_url,
            video_url: video_url,
            failure_recommendation_list: failure_recommendation_list,
            verification_code: verification_code,
            page_access_token: page_access_token,
            selected_supported_languages: selected_supported_languages,
            is_enable_choose_language_flow_enabled_for_welcome_response: is_enable_choose_language_flow_enabled_for_welcome_response,
            is_language_auto_detection_enabled: is_language_auto_detection_enabled,
        });
        json_string = EncryptVariable(json_string)
        document.getElementById("easychat_facebook_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/channels/facebook/save/",
            type: "POST",
            data: {
                json_string: json_string
            },
            headers: {
                "X-CSRFToken": get_csrf_token()
            },
            success: function (response) {
                document.getElementById("easychat_facebook_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else if (response["status"] == 402) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                    setTimeout(function() {
                        window.location.href = "/chat/home"
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_facebook_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            }
        });
    });

    $("#language-box-options-container .option .item-checkbox").change(function () {

        enable_disable_auto_language_detection_toogle();
        enable_disable_welcome_message_language_change_toogle()

    });

    $(document).on("click", "#save-facebook-channel-for-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let selected_language = get_url_vars()['selected_lang']

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }
        channel_name = "Facebook"

        json_string = {
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            channel_name: channel_name,
            selected_language: selected_language,
            authentication_message: authentication_message,
            save_auto_pop_up_text: false,
        }
        json_string = JSON.stringify(json_string);
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_facebook_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/save-channel-language-tuned-objects/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_facebook_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            },
        });
    });
}

if (window.location.pathname.indexOf("/chat/channels/instagram") != -1) {
    add_channel_language_selction_event("instagram")
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event()
    $(document).ready(function () {
        create_language_custom_dropdowns();
    });
    $(document).on("click", "#ignore-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Instagram"
        ignore_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).on("click", "#auto-fix-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Instagram"
        auto_fix_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).on("click", "#save-instagram-channel", function (e) {
        var location_href = window.location.href;
        var location_href = location_href.replace("#", "");
        var location_href = location_href.replace("!", "");
        var bot_id = get_url_vars()['id'];

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var is_language_auto_detection_enabled = document.getElementById("is_language_auto_detection_enabled").checked
        var is_enable_choose_language_flow_enabled_for_welcome_response = document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").checked

        selected_supported_languages = get_selected_languages_list()

        if ("en" in selected_supported_languages == false) {
            selected_supported_languages.push("en");
        }

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }
        initial_message_list = $("#multiple-select-instagram-initial-message-list").val();
        failure_recommendation_list = $("#multiple-select-instagram-failure-message-list").val();

        verification_code = document.getElementById("instagram_verification_code").value;
        if (verification_code == '') {
            M.toast({
                "html": "Verification Code cannot be empty!"
            }, 2000);
            return;
        }

        page_access_token = document.getElementById("instagram_page_access_token").value;
        if (page_access_token == '') {
            M.toast({
                "html": "Page Access Token cannot be empty!"
            }, 2000);
            return;
        }

        let image_id = document.getElementById("uploaded-bot-welcome-image");
        let image_url = image_id.getAttribute("src");
        let video_url = document.getElementById("upload-bot-welcome-video-url").value.trim();

        var selected_supported_languages = get_selected_languages_list()
        if (!selected_supported_languages.includes("en")) {
            selected_supported_languages.push("en");
        }

        if (isValidURL(video_url) == false && video_url != "") {
            M.toast({
                "html": "Please enter valid video url"
            }, 2000);
            return;
        }

        json_string = JSON.stringify({
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            authentication_message: authentication_message,
            image_url: image_url,
            video_url: video_url,
            initial_message_list : initial_message_list,
            failure_recommendation_list: failure_recommendation_list,
            selected_supported_languages: selected_supported_languages,
            verification_code: verification_code,
            page_access_token: page_access_token,
            selected_supported_languages: selected_supported_languages,
            is_enable_choose_language_flow_enabled_for_welcome_response: is_enable_choose_language_flow_enabled_for_welcome_response,
            is_language_auto_detection_enabled: is_language_auto_detection_enabled,
        });
        json_string = EncryptVariable(json_string)
        $.ajax({
            url: "/chat/channels/instagram/save/",
            type: "POST",
            data: {
                json_string: json_string
            },
            headers: {
                "X-CSRFToken": get_csrf_token()
            },
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else if (response["status"] == 402) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                    setTimeout(function() {
                        window.location.href = "/chat/home"
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                console.log("Report this error: ", error);
            }
        });
    });

    $("#language-box-options-container .option .item-checkbox").change(function () {

        enable_disable_auto_language_detection_toogle();
        enable_disable_welcome_message_language_change_toogle()

    });

    $(document).on("click", "#save-instagram-channel-for-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let selected_language = get_url_vars()['selected_lang']

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }
        channel_name = "Instagram"

        json_string = {
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            channel_name: channel_name,
            selected_language: selected_language,
            authentication_message: authentication_message,
            save_auto_pop_up_text: false,
        }
        json_string = JSON.stringify(json_string);
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_instagram_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/save-channel-language-tuned-objects/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_instagram_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            },
        });
    });
}

if (window.location.pathname.indexOf("/chat/channels/google-rcs") != -1) {
    add_channel_language_selction_event("telegram")
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event()
    $(document).ready(function () {
        create_language_custom_dropdowns();
    });
    $(document).on("click", "#ignore-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Telegram"
        ignore_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).on("click", "#auto-fix-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Telegram"
        auto_fix_changes_in_non_primary_languages(bot_id, channel_name)
    });

    $(document).on("click", "#save-google-rcs-channel", function (e) {
        var location_href = window.location.href;
        var location_href = location_href.replace("#", "");
        var location_href = location_href.replace("!", "");
        var bot_id = get_url_vars()['id'];

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var is_language_auto_detection_enabled = document.getElementById("is_language_auto_detection_enabled").checked
        var is_enable_choose_language_flow_enabled_for_welcome_response = document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").checked

        selected_supported_languages = get_selected_languages_list()

        if ("en" in selected_supported_languages == false) {
            selected_supported_languages.push("en");
        }
        var rcs_credentials_file_name = document.getElementById("rcs_api_credential_file_path").value;

        failure_recommendation_list = $("#multiple-select-google-rcs-failure-message-list").val();

        if (rcs_credentials_file_name == '') {
            M.toast({
                "html": "Please upload RCS Agent API credentials file."
            }, 2000);
            return;
        }

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }

        json_string = JSON.stringify({
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            authentication_message: authentication_message,
            failure_recommendation_list: failure_recommendation_list,
            selected_supported_languages: selected_supported_languages,
            is_enable_choose_language_flow_enabled_for_welcome_response: is_enable_choose_language_flow_enabled_for_welcome_response,
            is_language_auto_detection_enabled: is_language_auto_detection_enabled,
        });
        json_string = EncryptVariable(json_string)
        $.ajax({
            url: "/chat/channels/google_rcs/save/",
            type: "POST",
            data: {
                json_string: json_string
            },
            headers: {
                "X-CSRFToken": get_csrf_token()
            },
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else if (response["status"] == 402) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                    setTimeout(function() {
                        window.location.href = "/chat/home"
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                console.log("Report this error: ", error);
            }
        });
    });

    $("#language-box-options-container .option .item-checkbox").change(function () {

        enable_disable_auto_language_detection_toogle();
        enable_disable_welcome_message_language_change_toogle()

    });

    $(document).on("click", "#save-google-rcs-channel-for-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let selected_language = get_url_vars()['selected_lang']

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }
        channel_name = "GoogleRCS"

        json_string = {
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            channel_name: channel_name,
            selected_language: selected_language,
            authentication_message: authentication_message,
            save_auto_pop_up_text: false,
        }
        json_string = JSON.stringify(json_string);
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_google-rcs_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/save-channel-language-tuned-objects/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_google-rcs_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            },
        });
    });
}

// ******************** Failure Recommendations **********************

var channel_failure_rec_count = 0;

// detect enter keypress
$("#add_enter_channel_failure_recommendation").keypress(function (e) {
    var keycode = (e.keyCode ? e.keyCode : e.which);
    if (keycode == '13') {
        value = $("#add_enter_channel_failure_recommendation").val();
        addChannelFailureRecommendationsIntoCollection(value);
        $("#add_enter_channel_failure_recommendation").val("");
    }
});

function addChannelFailureRecommendationsIntoCollection(sentence) {

    var id = "channel_" + channel_failure_rec_count.toString();
    var str_id = "channelstr_" + channel_failure_rec_count.toString();

    var html = `<li class="collection-item" id="` + id + `">
      <div class="row">
        <input id="failure_rec_` + str_id + `" type="text" data-length="100" value="` + sentence + `" style="width: 80%">
        <label for="failure_rec_` + str_id + `"></label>
        <div class="secondary-content">
        <a href="" class="delete-button-channel-failure-rec" id="` + id + `">
          <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>
        </div>
      </div>
    </li>`;

    $(html).appendTo($("#channel-failure-recommendation-collection"));
    channel_failure_rec_count += 1;
}

// Remove element with element id with click
$(document).on("click", ".delete-button-channel-failure-rec", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});

// ******************************************************************

var channel_init_message_count = 0;

// detect enter keypress
$("#add_enter_channel_initial_message").keypress(function (e) {
    var keycode = (e.keyCode ? e.keyCode : e.which);
    if (keycode == '13') {
        value = $("#add_enter_channel_initial_message").val();
        addChannelInitialMessageIntoCollection(value);
        $("#add_enter_channel_initial_message").val("");
    }
});

function addChannelInitialMessageIntoCollection(sentence) {

    var id = "channel_" + channel_init_message_count.toString();
    var str_id = "channelstr_" + channel_init_message_count.toString();

    var html = `<li class="collection-item" id="` + id + `">
      <div class="row">
        <input id="initial_message_` + str_id + `" type="text" data-length="100" value="` + sentence + `" style="width: 80%">
        <label for="initial_message_` + str_id + `"></label>
        <div class="secondary-content">
        <a href="" class="delete-button-channel-initial-message" id="` + id + `">
          <i class="inline-icon material-icons red-text text-darken-3>delete</i>
        </a>
        </div>
      </div>
    </li>`;

    $(html).appendTo($("#channel-initial-message-collection"));
    channel_init_message_count += 1;
}

// Remove element with element id with click
$(document).on("click", ".delete-button-channel-initial-message", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();
});


$(document).on("click", "#agree-create-new-bot", function (e) {
    var bot_name = $("#new_bot_name").val();
    if (bot_name == "") {

        document.getElementById("new_bot_error_div").innerHTML = "Bot Name cannot be empty"
        return;
    }
    if (bot_name.trim() == "") {

        document.getElementById("new_bot_error_div").innerHTML = "Bot Name cannot be empty"
        return;
    }
    if (bot_name.length > 18) {
        M.toast({
            "html": "Max characters allowed - 18"
        }, 2000);
        return;
    }

    var format = /[`@#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
    if (format.test(bot_name.trim())) {

        document.getElementById("new_bot_error_div").innerHTML = "Invalid Bot Name(Only alphabets, 0-9, ?, !, & are allowed)"
        return;
    }

    let check_special_character_string = bot_name.trim().replace(/[&\/\\#,+()$~%.'":*?<>{}!@ ]/g, '');

    let check_emoji_only_string = check_special_character_string.replace(/^(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|[\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|[\ud83c[\ude32-\ude3a]|[\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])+$/, '');
    if (check_emoji_only_string == '') {
        document.getElementById("new_bot_error_div").innerHTML = "Bot name should have atleast one alphanumeric character."
        return;
    }
    var json_string = JSON.stringify({
        bot_name: bot_name.trim()
    })

    json_string = EncryptVariable(json_string);
    M.toast({
        "html": "Creating bot please wait"
    }, 1000);

    document.getElementById("new_bot_error_div").innerHTML = "";
    document.getElementById("new_bot_name").value = "";
    $("#new-bot").modal("close");
    document.getElementById("preloader_create_new_bot_div").style.display = "block";
    $.ajax({
        url: "/chat/bot/create/",
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            document.getElementById("preloader_create_new_bot_div").style.display = "none";
            if (response["status"] == 200) {
                window.location.reload();
            } else if (response["status"] == 300) {
                M.toast({
                    "html": "You have reached the limit for number of bots that you can create."
                }, 2000);
            } else if (response["status"] == 302) {
                M.toast({
                    "html": "Please enter a valid bot name."
                }, 2000);
            }else if (response['status'] == 400) {
                setTimeout(function (e) {
                    M.toast({
                        "html": "Bot with same name already exists. Please choose different name"
                    }, 3000);
                }, 5000);
            } else if (response["status"] == 401) {
                M.toast({
                    "html": "You have permission to create only one bot."
                }, 2000);
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                });
            }
        },
        error: function (error) {
            document.getElementById("preloader_create_new_bot_div").style.display = "none";
            console.log("Report this error: ", error);
        }
    });

});

$(document).on("click", ".btn-delete-bot", function (e) {
    bot_id = this.id.split("-")[3];
    var json_string = JSON.stringify({
        bot_id: bot_id
    })
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/bot/delete/",
        type: "POST",
        headers: {
            "X-CSRFToken": get_csrf_token()
        },
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                if(get_all_bots_data.no_of_bots === 1){
                    window.location.reload();
                }else{
                    document.getElementById("deleted_bot_toast_container").style.display = "flex"
                    setTimeout(() => {
                        document.getElementById("deleted_bot_toast_container").style.display = "none"
                    }, 5000);
                    get_all_bots_list()
                }
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
            if (error.status == 403) {
                window.location.href = "/chat/login"
            }
        }
    });
});


function showChildBotSelection() {
    $("#div-child-bot-section").show();
}

function hideChildBotSelection() {
    $("#div-child-bot-section").hide();
}

// if(window.location.pathname.indexOf("/chat/bot/edit")!=-1)
// {
//   $(window).bind("load", function(e){

//     $('.chips').chips();

//     var bot_type = $("#input-bot-type").val();
//     if(bot_type=="Composite"){
//       showChildBotSelection();
//     }else{
//       hideChildBotSelection();
//     }

//     var trigger_keyword = $("#input-chips-trigger-keywords").val();
//     var stop_keyword = $("#input-chips-stop-keywords").val();

//     if(trigger_keyword!=""){
//       var trigger_keyword = JSON.parse(trigger_keyword);
//       $("#bot-trigger-keywords-chips").chips({data:trigger_keyword});
//     }

//     if(stop_keyword!=""){
//       var stop_keyword = JSON.parse(stop_keyword);
//       $("#bot-stop-keywords-chips").chips({data:stop_keyword});
//     }

//   });

// }

$(document).on("change", ".radio-button-bot-type", function (e) {
    var bot_type = this.id.split("-")[4];
    if (bot_type == "Composite") {
        showChildBotSelection();
    } else {
        hideChildBotSelection();
    }
    $("#input-bot-type").val(bot_type);
});

function save_bot_inactivity_settings() {
    $("#save-bot-general-settings-btn").click()
}

function save_bot_response_delay_settings() {
    $("#save-bot-general-settings-btn").click()
}

function validate_ck_editor_response(str) {

    str = str.replaceAll("&nbsp;", "");
    str = str.replaceAll("<p>", "");
    str = str.replaceAll("</p>", "");
    str = str.replaceAll("<br>", "");
    str = str.replaceAll("<br />", "");
    str = str.replaceAll("&bull;", "");

    str = str.trim();
    return str;
}
function auto_grow_textarea(element) {
    element.style.height = "8px";
    element.style.height = (element.scrollHeight) + "px";
}
function save_multilingual_bot_general_settings(element) {

    bot_id = window.location.pathname.split("/")[4];

    bot_inactivity_detection_enabled = false
    if (document.getElementById("checkbox-bot-inactivity-enabled") != null && document.getElementById("checkbox-bot-inactivity-enabled") != undefined) {
        bot_inactivity_detection_enabled = document.getElementById("checkbox-bot-inactivity-enabled").checked;
    }

    bot_inactivity_msg = ""

    if (bot_inactivity_detection_enabled) {
        bot_inactivity_msg = document.getElementById("bot-inactivity-msg").value.trim()
        if (bot_inactivity_msg.trim() == "") {
            M.toast({
                "html": "Bot inactivity message cannot be empty."
            }, 2000);
            return;
        }

    }

    flow_termination_bot_response = $("#flow_termination_bot_response").trumbowyg('html');

    flow_termination_confirmation_display_message = $("#flow_termination_confirmation_display_message").trumbowyg('html');

    flow_termination_confirmation_filtered_text = validate_ck_editor_response(flow_termination_confirmation_display_message)

    filtered_text = validate_ck_editor_response(flow_termination_bot_response);


    if (is_flow_termination_bot_response_required && filtered_text.length == 0) {
        M.toast({
            "html": "Flow termination bot response cannot be empty."
        }, 2000);
        return;
    }

    if (flow_termination_confirmation_filtered_text.length == 0) {

        M.toast({
            "html": "Flow termination confirmation display message cannot be empty."
        }, 2000);
        return;
    }

    //---- Emoji modal values ----
    angry_emoji_response = $("#angry-emoji-response").trumbowyg('html');
    happy_emoji_response = $("#happy-emoji-response").trumbowyg('html');
    neutral_emoji_response = $("#neutral-emoji-response").trumbowyg('html');
    sad_emoji_response = $("#sad-emoji-response").trumbowyg('html');

    if (!check_emoji_response()) {
        return;
    }

    //---- Emoji modal values end----

    profanity_response_text = $("#profanity-word-bot-response").trumbowyg('html');

    console.log(is_livechat_profanity_words_enabled)
    if (is_livechat_enabled && is_livechat_profanity_words_enabled.toLowerCase().trim() == "true") {
        if (!check_profanity_model_settings()) {
            return;
        }
    }

    bot_response_delay_allowed = document.getElementById("checkbox-bot-response-delay-enabled").checked;
    bot_response_delay_message = ""

    if (bot_response_delay_allowed) {

        bot_response_delay_message = document.getElementById("bot-response-delay-msg").value;

        if (bot_response_delay_message.trim() == "") {
            M.toast({
                "html": "Delay message cannot be empty"
            }, 2000);
            return;
        }


    }

    let selected_language = get_url_vars()['selected_language']
    if (selected_language == "" || selected_language == undefined || selected_language == null) {
        selected_language = "en";
    }

    json_string = JSON.stringify({
        "bot_id": bot_id,
        "selected_language": selected_language,
        "is_flow_termination_bot_response_required": is_flow_termination_bot_response_required,
        "flow_termination_bot_response": flow_termination_bot_response,
        "bot_inactivity_detection_enabled": bot_inactivity_detection_enabled,
        "bot_inactivity_msg": bot_inactivity_msg,
        "bot_response_delay_allowed": bot_response_delay_allowed,
        "bot_response_delay_message": bot_response_delay_message,
        "flow_termination_confirmation_display_message": flow_termination_confirmation_display_message,
        "angry_emoji_response": angry_emoji_response,
        "happy_emoji_response": happy_emoji_response,
        "neutral_emoji_response": neutral_emoji_response,
        "sad_emoji_response": sad_emoji_response,
        "is_suggest_livechat_for_profanity_words_enabled": is_livechat_profanity_words_enabled,
        "profanity_response_text": profanity_response_text
    });

    json_string = EncryptVariable(json_string);

    element.innerHTML = "saving...";
    $.ajax({
        url: "/chat/bot/save-mulitlingual-bot/",
        type: "POST",
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Changes saved successfully!"
                })
                setTimeout(function () {
                    window.location = set_url_parameter("selected_language", "en")
                }, 3000);
            } else if (response['status'] == 400) {
                setTimeout(function (e) {
                    M.toast({
                        "html": "Bot with same name already exists. Please choose different name"
                    }, 3000);
                }, 5000);
            } else if (response['status'] == 300) {
                setTimeout(function () {
                    M.toast({
                        "html": response["msg"]
                    })
                }, 1000);
            } else {
                M.toast({
                    "html": "Please check if inputs are valid."
                })
            }
            element.innerHTML = "<svg width='16'\
                            height='16' viewBox='0 0 16 16' fill='none'\
                            xmlns='http://www.w3.org/2000/svg'><path d='M9.33334 1.33325V4.50158C9.33334 4.58048 9.27851 4.64657 9.20488 4.66384L9.16667 4.66825H5.16667C5.08777 4.66825 5.02168 4.61342 5.0044 4.53979L5 4.50158V1.33325H9.33334ZM11.5058 9.36C11.5979 9.36 11.6725 9.43461 11.6725 9.52666L11.672 14.3333H4.33267L4.33334 9.52666C4.33334 9.43461 4.40796 9.36 4.5 9.36H11.5058ZM10.4244 1.33325C10.6082 1.33325 10.786 1.39401 10.9307 1.50469L14.4333 4.49992C14.5978 4.65714 14.6667 4.8785 14.6667 5.10606V12.8333C14.6667 13.6617 13.9951 14.3333 13.1667 14.3333H12.672L12.6725 9.52666C12.6725 8.88233 12.1502 8.36 11.5058 8.36H4.5C3.85567 8.36 3.33334 8.88233 3.33334 9.52666L3.33267 14.3333H2.83334C2.00491 14.3333 1.33334 13.6617 1.33334 12.8333V2.83325C1.33334 2.00482 2.00491 1.33325 2.83334 1.33325H4V4.50158C4 5.1137 4.47141 5.61571 5.07098 5.66438L5.16667 5.66825H9.16667C9.77879 5.66825 10.2808 5.19684 10.3295 4.59726L10.3333 4.50158V1.33325H10.4244Z'\
                                fill='#fff' />\
                        </svg>\
                        &nbsp;Save";;
        },
        error: function (error) {
            element.innerHTML = "<svg width='16'\
                            height='16' viewBox='0 0 16 16' fill='none'\
                            xmlns='http://www.w3.org/2000/svg'><path d='M9.33334 1.33325V4.50158C9.33334 4.58048 9.27851 4.64657 9.20488 4.66384L9.16667 4.66825H5.16667C5.08777 4.66825 5.02168 4.61342 5.0044 4.53979L5 4.50158V1.33325H9.33334ZM11.5058 9.36C11.5979 9.36 11.6725 9.43461 11.6725 9.52666L11.672 14.3333H4.33267L4.33334 9.52666C4.33334 9.43461 4.40796 9.36 4.5 9.36H11.5058ZM10.4244 1.33325C10.6082 1.33325 10.786 1.39401 10.9307 1.50469L14.4333 4.49992C14.5978 4.65714 14.6667 4.8785 14.6667 5.10606V12.8333C14.6667 13.6617 13.9951 14.3333 13.1667 14.3333H12.672L12.6725 9.52666C12.6725 8.88233 12.1502 8.36 11.5058 8.36H4.5C3.85567 8.36 3.33334 8.88233 3.33334 9.52666L3.33267 14.3333H2.83334C2.00491 14.3333 1.33334 13.6617 1.33334 12.8333V2.83325C1.33334 2.00482 2.00491 1.33325 2.83334 1.33325H4V4.50158C4 5.1137 4.47141 5.61571 5.07098 5.66438L5.16667 5.66825H9.16667C9.77879 5.66825 10.2808 5.19684 10.3295 4.59726L10.3333 4.50158V1.33325H10.4244Z'\
                                fill='#fff' />\
                        </svg>\
                        &nbsp;Save";;
            console.log("Report this error: ", error);
        }
    });
}

function save_bot_general_settings(element) {

    bot_id = window.location.pathname.split("/")[4];

    is_api_fail_email_notifiication_enabled = document.getElementById("checkbox-is-api-fail-email-notifiication-enabled").checked

    if (is_api_fail_email_notifiication_enabled) {
        if (check_api_config()) {
            return;
        }
    }

    is_bot_break_email_notification_enabled = document.getElementById("checkbox-is-email-bot-break-enable").checked

    if (is_bot_break_email_notification_enabled) {
        
        bot_break_api_config = get_bot_break_api_config()
        if (bot_break_api_config.is_invalid_bot_break_params) {
            return;
        }

    }

    bot_name = $("#bot_name_field").val();
    if (bot_name == "") {
        M.toast({
            "html": "Bot Name cannot be empty!"
        }, 2000);
        return;
    }
    if (bot_name.trim() == "") {
        M.toast({
            "html": "Bot Name cannot be empty!"
        }, 2000);
        return;
    }
    if (bot_name.length > 18) {
        M.toast({
            "html": "Max characters allowed - 18"
        }, 2000);
        return;
    }

    var format = /[`@#$%^*()_+\-=\[\]{};':"\\|,.<>\/~]/;
    if (format.test(bot_name.trim())) {
        M.toast({
            "html": "Invalid Bot Name(Only alphabets, 0-9, ?, !, & are allowed)"
        }, 2000);
        return;
    }

    let check_special_character_string = bot_name.trim().replace(/[&\/\\#,+()$~%.'":*?<>{}!@ ]/g, '');

    let check_emoji_only_string = check_special_character_string.replace(/^(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|[\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|[\ud83c[\ude32-\ude3a]|[\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])+$/, '');
    if (check_emoji_only_string == '') {
        M.toast({
            "html": "Bot name should have atleast one alphanumeric character."
        }, 2000);
        return;
    }
    go_live_date = $("#easychat-go-live-date").val();

    if (go_live_date == "") {

        M.toast({
            "html": "Go live date cannot be empty."
        }, 2000);
        return;
    }
    go_live_date_component = go_live_date.split('-');
    min_live_date_component = $("#easychat-go-live-date").attr("min").split("-");
    min_live_date = $("#easychat-go-live-date").attr("min");

    go_live_date_type_date = Date.parse(go_live_date);
    min_live_date_type_date = Date.parse(min_live_date);

    if (go_live_date_type_date < min_live_date_type_date) {
        alert("Go live date cannot be less then bot creation date");
        return;
    }

    mask_confidential_info = document.getElementById("checkbox-mask-confidential-info").checked;

    is_text_to_speech_required = document.getElementById("is-text-to-speech-required").checked;

    is_easyassist_enabled = false;
    if (document.getElementById("easychat-checkbox-easyassist-enable") != null && document.getElementById("easychat-checkbox-easyassist-enable") != undefined) {
        is_easyassist_enabled = document.getElementById("easychat-checkbox-easyassist-enable").checked;
    }
    is_synonyms_incuded_var_gen = false;
    if (document.getElementById("checkbox-synonyms-included-variation-generation") != null && document.getElementById("checkbox-synonyms-included-variation-generation") != undefined) {
        is_synonyms_incuded_var_gen = document.getElementById("checkbox-synonyms-included-variation-generation").checked;
    }
    is_email_notifiication_enabled = false;
    if (document.getElementById("checkbox-is-email-notifiication-enabled") != null && document.getElementById("checkbox-is-email-notifiication-enabled") != undefined) {
        is_email_notifiication_enabled = document.getElementById("checkbox-is-email-notifiication-enabled").checked;
    }

    var is_livechat_enabled = false;
    var livechat_provider = "cogno_livechat";
    if (document.getElementById("easychat-checkbox-livechat-enable") != null && document.getElementById("easychat-checkbox-livechat-enable") != undefined) {
        is_livechat_enabled = document.getElementById("easychat-checkbox-livechat-enable").checked;
        livechat_provider = document.getElementById("livechat-provider-select").value;
    }

    var emoji_livechat_checkbox_value_list = []

    if (is_livechat_enabled == false) {
        document.getElementById("angry-emoji-response-livechat").checked = true
        document.getElementById("happy-emoji-response-livechat").checked = false
        document.getElementById("neutral-emoji-response-livechat").checked = false
        document.getElementById("sad-emoji-response-livechat").checked = true
    }

    emoji_livechat_checkbox_value_list = set_livechat_checkbox_value_list()
    is_trigger_livechat_enabled = false;
    if (document.getElementById("autosuggest-livechat-complex-queries") != null && document.getElementById("autosuggest-livechat-complex-queries") != undefined) {
        is_trigger_livechat_enabled = document.getElementById("autosuggest-livechat-complex-queries").checked;
    }
    var autosuggest_livechat_word_limit = ""
    if (IS_LIVECHAT_MANAGER && IS_LIVECHAT_MANAGER.trim().toLowerCase() == "true") {
        autosuggest_livechat_word_limit = document.getElementById("autosuggest-livechat-word-limit").value;
        if (is_trigger_livechat_enabled && (autosuggest_livechat_word_limit == "" || parseInt(autosuggest_livechat_word_limit) < 0 || parseInt(autosuggest_livechat_word_limit) > 500)) {
            autosuggest_livechat_word_limit = 30;
        }
    }

    is_easysearch_enabled = false;
    if (document.getElementById("easychat-checkbox-easysearch-enable") != null && document.getElementById("easychat-checkbox-easysearch-enable") != undefined) {
        is_easysearch_enabled = document.getElementById("easychat-checkbox-easysearch-enable").checked;
    }
    is_pdfsearch_enabled = false;
    if (document.getElementById("easychat-checkbox-pdfsearch-enable") != null && document.getElementById("easychat-checkbox-pdfsearch-enable") != undefined) {
        is_pdfsearch_enabled = document.getElementById("easychat-checkbox-pdfsearch-enable").checked;
    }

    is_easytms_enabled = false;
    tms_drop_down_cat_list = [];
    if (document.getElementById("easychat-checkbox-easytms-enable") != null && document.getElementById("easychat-checkbox-easytms-enable") != undefined) {
        is_easytms_enabled = document.getElementById("easychat-checkbox-easytms-enable").checked;

        if (is_easytms_enabled) {
            var inputs = document.getElementsByTagName("input");
            if (check_for_duplicates_in_tms_cat("Duplicate entries found in TMS categories.")) {
                return;
            }
            for (var i = 0; i < inputs.length; i++) {
                if (inputs[i].id.indexOf('tms_drop_down_data_str') == 0) {
                    data_id = "#" + inputs[i].id;
                    dropdown_choices = $(data_id).val();
                    if (dropdown_choices != "") {
                        tms_drop_down_cat_list.push(dropdown_choices);
                    }
                }
            }
            if (tms_drop_down_cat_list.length == 0) {
                M.toast({
                    "html": "At least one choice in TMS Dropdown Category is required."
                }, 2000);
                return;
            }
        }
    }

    bot_inactivity_detection_enabled = false
    if (document.getElementById("checkbox-bot-inactivity-enabled") != null && document.getElementById("checkbox-bot-inactivity-enabled") != undefined) {
        bot_inactivity_detection_enabled = document.getElementById("checkbox-bot-inactivity-enabled").checked;
    }
    bot_inactivity_msg = document.getElementById("bot-inactivity-msg").value.trim()
    bot_inactivity_time = document.getElementById("bot-inactivity-time").value


    if (bot_inactivity_detection_enabled) {
        let isnum = /^\d+$/.test(bot_inactivity_time.trim());
        if (!isnum) {
            M.toast({
                "html": "Invalid time input."
            }, 2000);
            return;
        }

        if (bot_inactivity_time.trim() == "" || parseInt(bot_inactivity_time.trim()) < 1) {
            M.toast({
                "html": "Time value must be greater than or equal to 1."
            }, 2000);
            return;
        }

        if (bot_inactivity_msg.trim() == "") {
            M.toast({
                "html": "Bot inactivity message cannot be empty."
            }, 2000);
            return;
        }

    }

    $("#modal-bot-inactivity-config").modal("close")

    bot_userid_cookie_timeout = document.getElementById("easychat-userid-timeout").value
    if (bot_userid_cookie_timeout < 0 || bot_userid_cookie_timeout == "") {
        M.toast({
            "html": "Time interval for session expiration cannot be negative or blank."
        }, 2000);
        return;
    }
    if (!(/^\d+$/.test(bot_userid_cookie_timeout))) {
        M.toast({
            "html": "Time interval for session expiration value should contain only numbers."
        }, 2000);
        return;
    }
    bot_userid_cookie_timeout = Math.round(bot_userid_cookie_timeout)

    is_lead_generation_enabled = document.getElementById("checkbox-bot-lead-generation-enabled").checked;


    // is_nps_required = document.getElementById("checkbox-bot-nps-required").checked;
    is_feedback_required = document.getElementById("checkbox-bot-feedback-required").checked;

    is_analytics_monitoring_enabled = document.getElementById("checkbox-is-analytics-monitoring-enabled").checked;

    if (is_analytics_monitoring_enabled) {
        if (check_bot_usage_config()) {
            return;
        }
    }

    var is_bot_intent_threshold_enabled = document.getElementById("checkbox_bot_level_advance_nlp_cb").checked;

    var intent_score_threshold = "None";
    if (document.getElementById("checkbox_bot_level_advance_nlp_cb").checked) {
        intent_score_threshold = document.getElementById("easychat-bot-intent-threshold").value;
    }

    var is_intent_level_nlp_functionality_enabled = document.getElementById("easychat_intent_level_advance_nlp").checked;

    termination_keyword_list = []
    var termination_keyword = M.Chips.getInstance($('#flow_termination_keywords')).chipsData;
    for (var i = 0; i < termination_keyword.length; i++) {

        termination_keyword_list.push(termination_keyword[i]["tag"]);
    }

    flow_termination_bot_response = $("#flow_termination_bot_response").trumbowyg('html');

    flow_termination_confirmation_display_message = $("#flow_termination_confirmation_display_message").trumbowyg('html');

    flow_termination_confirmation_filtered_text = validate_ck_editor_response(flow_termination_confirmation_display_message)

    filtered_text = validate_ck_editor_response(flow_termination_bot_response);

    if (termination_keyword_list.length != 0 && filtered_text.length == 0) {
        M.toast({
            "html": "Flow termination bot response cannot be empty."
        }, 2000);
        return;
    }

    if (flow_termination_confirmation_filtered_text.length == 0) {

        M.toast({
            "html": "Flow termination confirmation display message cannot be empty."
        }, 2000);
        return;
    }

    //---- Emoji modal values ----
    angry_emoji_response = $("#angry-emoji-response").trumbowyg('html');
    happy_emoji_response = $("#happy-emoji-response").trumbowyg('html');
    neutral_emoji_response = $("#neutral-emoji-response").trumbowyg('html');
    sad_emoji_response = $("#sad-emoji-response").trumbowyg('html');

    if (!check_emoji_response()) {
        return;
    }
    //---- Emoji modal values end----

    is_suggest_livechat_for_profanity_words_enabled = false
    profanity_response_text = $("#profanity-word-bot-response").trumbowyg('html');
    add_livechat_as_quick_recommendation = false
    trigger_livechat_intent = true

    if (IS_LIVECHAT_MANAGER && IS_LIVECHAT_MANAGER.trim().toLowerCase() == "true") {
        is_suggest_livechat_for_profanity_words_enabled = document.getElementById("livechat-profanity-words-enable").checked

        add_livechat_as_quick_recommendation = document.getElementById("add_livechat_as_quick_recommendation_for_profan_words").checked

        trigger_livechat_intent = document.getElementById("trigger_livechat_for_profan_words").checked

        if (is_livechat_enabled && is_suggest_livechat_for_profanity_words_enabled) {
            if (!check_profanity_model_settings()) {
                return;
            }
        }
    }
    initial_intent_pk = $("#single-select-initial-intent").val();

    selected_channels_list_nps = $('#multi-select-channels').val();

    is_nps_required = document.getElementById("enable_csat_option_cb").checked

    whatsapp_nps_timer = document.getElementById("easychat-whatsapp-nps-timer").value;

    viber_nps_timer = document.getElementById("easychat-viber-nps-timer").value;

    csat_feedback_form_enabled = document.getElementById('checkbox-csat-feedback').checked;

    if(csat_feedback_form_enabled){
        var input_value = $("#rating_csat_value").val()
        if (input_value.trim() == "" || parseInt(input_value.trim()) < 1) {
            M.toast({
                "html": "Number of feedback must be greater than or equal to 1"
            }, 2000);
            return;
        }
    }

    scale_rating = $("input:radio[name=group_scale]:checked").val()

    var create_csat_flow = false

    if (document.getElementById("whatsapp-nps-timer").style.display == 'none') {
        whatsapp_nps_timer = 2
    } else {

        if (!sanitize_input_numeric(whatsapp_nps_timer)) {
            showToast('Please enter a valid WhatsApp CSAT time.')
            return;
        }

        if (whatsapp_nps_timer <= 0) {
            showToast('WhatsApp CSAT time must be greater than or equal to 1.')
            return;
        }

    }

    if (document.getElementById("viber-nps-timer").style.display == 'none') {
        viber_nps_timer = 2
    } else {

        if (!sanitize_input_numeric(viber_nps_timer)) {
            showToast('Please enter a valid Viber CSAT time.')
            return;
        }

        if (viber_nps_timer <= 0) {
            showToast('Viber CSAT time must be greater than or equal to 1.')
            return;
        }

    }

    if (is_nps_required) {
        if (selected_channels_list_nps.length == 0) {
            M.toast({
                "html": "Please select atleast one channel for CSAT."
            }, 2000);
            return;
        }
        const WhatsappValue = selected_channels_list_nps.some(element => {
            return element.toLowerCase() === "WhatsApp".toLowerCase();
        });
        const ViberValue = selected_channels_list_nps.some(element => {
            return element.toLowerCase() === "Viber".toLowerCase();
        });
        selected_channels_list_nps
        if (WhatsappValue || ViberValue ) {
            create_csat_flow = true
        }
    } else {
        whatsapp_nps_timer = 0
        viber_nps_timer = 0
        selected_channels_list_nps = []
        csat_feedback_form_enabled = false
        scale_rating = "4_scale"
    }
    // selected_supported_languages = $("#select-language-supported").val();

    // if ("en" in selected_supported_languages == false) {
    //     selected_supported_languages.push("en");
    // }

    show_brand_name = document.getElementById("checkbox-show-brand-name").checked;

    custom_bot_js_required = document.getElementById("checkbox-custom-bot-js").checked;

    custom_bot_css_required = document.getElementById("checkbox-custom-bot-css").checked;

    bot_response_delay_allowed = document.getElementById("checkbox-bot-response-delay-enabled").checked;
    bot_response_delay_timer = document.getElementById("bot-response-delay-time").value;
    bot_response_delay_message = document.getElementById("bot-response-delay-msg").value;

    if (bot_response_delay_allowed) {

        if (bot_response_delay_message.trim() == "") {
            M.toast({
                "html": "Delay message cannot be empty"
            }, 2000);
            return;
        }

        let isnum = /^\d+$/.test(bot_response_delay_timer.trim());
        if (!isnum) {
            M.toast({
                "html": "Invalid delay time input."
            }, 2000);
            return;
        }

        if (bot_response_delay_timer.trim() == "" || parseInt(bot_response_delay_timer.trim()) < 1) {
            M.toast({
                "html": "Time value must be greater than or equal to 1."
            }, 2000);
            return;
        }

    }


    var response_order_elements = document.getElementsByClassName('easychat-intent-response-item');
    var default_order_of_response = [];
    for (res of response_order_elements) {
        default_order_of_response.push(res.firstChild.textContent);
    }
    max_file_size_allowed = document.getElementById("easychat-attachment-max-file-size").value;
    if (max_file_size_allowed < 5) {
        M.toast({
            "html": "Max File Size allowed cannot be less than 5MB"
        }, 2000);
        return;
    }
    if (!(/^\d+$/.test(max_file_size_allowed))) {
        M.toast({
            "html": "Max File Size allowed value should contain only numbers"
        }, 2000);
        return;
    }

    show_form = false
    show_form = document.getElementById("show_form").checked

    use_customer_details_processor = false
    use_customer_details_processor = document.getElementById("use_customer_details_processor").checked

    use_end_chat_processor = false
    use_end_chat_processor = document.getElementById("use_end_chat_processor").checked

    use_assign_agent_processor = false
    use_assign_agent_processor = document.getElementById("use_assign_agent_processor").checked

    // mask pii
    masking_enabled = document.getElementById('checkbox-masking-enabled').checked;
    masking_time_elem = document.getElementById('easychat-mask-pii-time');

    masking_time = MASKING_TIME
    if (masking_time_elem) {
        masking_time = masking_time_elem.value;
    }

    is_audio_notification_enabled = document.getElementById('is-audio-notification-enabled').checked;

    is_abort_flow_enabled = document.getElementById("enable_abort_flow_toggle").checked;

    is_advance_tree_level_nlp_enabled = document.getElementById("enable_advance_tree_level_nlp").checked;

    var enable_do_not_translate = document.getElementById("enable-do-not-translate").checked;

    var no_translate_keyword_elements = document.getElementById("keywords-container").children;
    var no_translate_keywords = [];
    for (var i=0; i<no_translate_keyword_elements.length; i++) {
        no_translate_keywords.push(no_translate_keyword_elements[i].getAttribute("value"));
    }

    var no_translate_regex_elements = document.getElementById("regex-container").children;
    var no_translate_regex = [];
    for (var i=0; i<no_translate_regex_elements.length; i++) {
        no_translate_regex.push(no_translate_regex_elements[i].getAttribute("value"));
    }

    json_string = JSON.stringify({
        "bot_id": bot_id,
        "bot_name": bot_name.trim(),
        "is_text_to_speech_required": is_text_to_speech_required,
        "is_easyassist_enabled": is_easyassist_enabled,
        "is_livechat_enabled": is_livechat_enabled,
        "is_easysearch_enabled": is_easysearch_enabled,
        "is_pdfsearch_enabled": is_pdfsearch_enabled,
        "is_lead_generation_enabled": is_lead_generation_enabled,
        "is_easytms_enabled": is_easytms_enabled,
        "tms_drop_down_cat_list": tms_drop_down_cat_list,
        "intent_score_threshold": intent_score_threshold,
        "termination_keyword_list": termination_keyword_list,
        "flow_termination_bot_response": flow_termination_bot_response,
        "is_synonyms_incuded_var_gen": is_synonyms_incuded_var_gen,
        "is_feedback_required": is_feedback_required,
        "is_email_notifiication_enabled": is_email_notifiication_enabled,
        // "is_nps_required": is_nps_required,
        "mask_confidential_info": mask_confidential_info,
        "bot_inactivity_detection_enabled": bot_inactivity_detection_enabled,
        "bot_inactivity_msg": bot_inactivity_msg,
        "bot_inactivity_time": bot_inactivity_time,
        "go_live_date": go_live_date,
        "is_api_fail_email_notifiication_enabled": is_api_fail_email_notifiication_enabled,
        "is_bot_break_email_notification_enabled": is_bot_break_email_notification_enabled,
        "bot_userid_cookie_timeout": bot_userid_cookie_timeout,
        "is_analytics_monitoring_enabled": is_analytics_monitoring_enabled,
        "initial_intent_pk": initial_intent_pk,
        "is_nps_required": is_nps_required,
        "selected_channels_list_nps": selected_channels_list_nps,
        "whatsapp_nps_timer": whatsapp_nps_timer,
        "viber_nps_timer": viber_nps_timer,
        // "selected_supported_languages": selected_supported_languages,
        "show_brand_name": show_brand_name,
        "custom_bot_js_required": custom_bot_js_required,
        "custom_bot_css_required": custom_bot_css_required,
        "bot_response_delay_allowed": bot_response_delay_allowed,
        "bot_response_delay_timer": bot_response_delay_timer,
        "bot_response_delay_message": bot_response_delay_message,
        "default_order_of_response": default_order_of_response,
        "max_file_size_allowed": max_file_size_allowed,
        "show_form": show_form,
        "use_customer_details_processor": use_customer_details_processor,
        "use_end_chat_processor": use_end_chat_processor,
        "use_assign_agent_processor": use_assign_agent_processor,
        "masking_enabled": masking_enabled,
        "masking_time": masking_time,
        "token": token,
        "csat_feedback_form_enabled": csat_feedback_form_enabled,
        "scale_rating": scale_rating,
        "create_csat_flow": create_csat_flow,
        "enable_audio_notification": is_audio_notification_enabled,
        "flow_termination_confirmation_display_message": flow_termination_confirmation_display_message,
        "is_trigger_livechat_enabled": is_trigger_livechat_enabled,
        "autosuggest_livechat_word_limit": autosuggest_livechat_word_limit,
        "is_bot_intent_threshold_enabled": is_bot_intent_threshold_enabled,
        "is_intent_level_nlp_functionality_enabled": is_intent_level_nlp_functionality_enabled,
        "angry_emoji_response": angry_emoji_response,
        "happy_emoji_response": happy_emoji_response,
        "neutral_emoji_response": neutral_emoji_response,
        "sad_emoji_response": sad_emoji_response,
        "emoji_livechat_checkbox_value_list": emoji_livechat_checkbox_value_list,
        "is_abort_flow_enabled": is_abort_flow_enabled,
        "is_suggest_livechat_for_profanity_words_enabled": is_suggest_livechat_for_profanity_words_enabled,
        "profanity_response_text": profanity_response_text,
        "add_livechat_as_quick_recommendation": add_livechat_as_quick_recommendation,
        "trigger_livechat_intent": trigger_livechat_intent,
        "is_advance_tree_level_nlp_enabled": is_advance_tree_level_nlp_enabled,
        "livechat_provider": livechat_provider,
        "enable_do_not_translate": enable_do_not_translate,
        "no_translate_keywords": no_translate_keywords,
        "no_translate_regex": no_translate_regex
    });

    json_string = EncryptVariable(json_string);

    element.innerHTML = "saving...";
    $.ajax({
        url: "/chat/bot/save/",
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token(),
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Changes saved successfully! Please make sure to update the Bot deployment script as well."
                })
                setTimeout(function () {
                    window.location.reload();
                }, 3000);
            } else if (response['status'] == 400) {
                setTimeout(function (e) {
                    M.toast({
                        "html": "Bot with same name already exists. Please choose different name"
                    }, 3000);
                }, 5000);
            } else if (response['status'] == 300) {
                setTimeout(function () {
                    M.toast({
                        "html": response["msg"]
                    })
                }, 1000);
            } else {
                M.toast({
                    "html": "Please check if inputs are valid."
                })
            }
            element.innerHTML = "<svg width='16'\
                            height='16' viewBox='0 0 16 16' fill='none'\
                            xmlns='http://www.w3.org/2000/svg'><path d='M9.33334 1.33325V4.50158C9.33334 4.58048 9.27851 4.64657 9.20488 4.66384L9.16667 4.66825H5.16667C5.08777 4.66825 5.02168 4.61342 5.0044 4.53979L5 4.50158V1.33325H9.33334ZM11.5058 9.36C11.5979 9.36 11.6725 9.43461 11.6725 9.52666L11.672 14.3333H4.33267L4.33334 9.52666C4.33334 9.43461 4.40796 9.36 4.5 9.36H11.5058ZM10.4244 1.33325C10.6082 1.33325 10.786 1.39401 10.9307 1.50469L14.4333 4.49992C14.5978 4.65714 14.6667 4.8785 14.6667 5.10606V12.8333C14.6667 13.6617 13.9951 14.3333 13.1667 14.3333H12.672L12.6725 9.52666C12.6725 8.88233 12.1502 8.36 11.5058 8.36H4.5C3.85567 8.36 3.33334 8.88233 3.33334 9.52666L3.33267 14.3333H2.83334C2.00491 14.3333 1.33334 13.6617 1.33334 12.8333V2.83325C1.33334 2.00482 2.00491 1.33325 2.83334 1.33325H4V4.50158C4 5.1137 4.47141 5.61571 5.07098 5.66438L5.16667 5.66825H9.16667C9.77879 5.66825 10.2808 5.19684 10.3295 4.59726L10.3333 4.50158V1.33325H10.4244Z'\
                                fill='#fff' />\
                        </svg>\
                        &nbsp;Save";;
        },
        error: function (error) {
            element.innerHTML = "<svg width='16'\
                            height='16' viewBox='0 0 16 16' fill='none'\
                            xmlns='http://www.w3.org/2000/svg'><path d='M9.33334 1.33325V4.50158C9.33334 4.58048 9.27851 4.64657 9.20488 4.66384L9.16667 4.66825H5.16667C5.08777 4.66825 5.02168 4.61342 5.0044 4.53979L5 4.50158V1.33325H9.33334ZM11.5058 9.36C11.5979 9.36 11.6725 9.43461 11.6725 9.52666L11.672 14.3333H4.33267L4.33334 9.52666C4.33334 9.43461 4.40796 9.36 4.5 9.36H11.5058ZM10.4244 1.33325C10.6082 1.33325 10.786 1.39401 10.9307 1.50469L14.4333 4.49992C14.5978 4.65714 14.6667 4.8785 14.6667 5.10606V12.8333C14.6667 13.6617 13.9951 14.3333 13.1667 14.3333H12.672L12.6725 9.52666C12.6725 8.88233 12.1502 8.36 11.5058 8.36H4.5C3.85567 8.36 3.33334 8.88233 3.33334 9.52666L3.33267 14.3333H2.83334C2.00491 14.3333 1.33334 13.6617 1.33334 12.8333V2.83325C1.33334 2.00482 2.00491 1.33325 2.83334 1.33325H4V4.50158C4 5.1137 4.47141 5.61571 5.07098 5.66438L5.16667 5.66825H9.16667C9.77879 5.66825 10.2808 5.19684 10.3295 4.59726L10.3333 4.50158V1.33325H10.4244Z'\
                                fill='#fff' />\
                        </svg>\
                        &nbsp;Save";;
            console.log("Report this error: ", error);
        }
    });
}

function send_test_email(element) {
    bot_id = window.location.pathname.split("/")[4];
    email_freq = document.getElementById("email-config-frequency").value;
    var json_string = JSON.stringify({
        bot_id: bot_id,
        email_freq: email_freq
    })
    json_string = EncryptVariable(json_string);
    element.innerHTML = "sending test mail...";
    $.ajax({
        url: "/chat/send-test-mail/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Mail is sent to your given email ids"
                })
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
            element.innerHTML = "send test mail";
            $("#modal-email-config").modal("close");
        },
        error: function (error) {
            element.innerHTML = "send test mail";
            console.log("Report this error: ", error);
        }
    });
};

function check_is_welcome_banner_present() {

    welcome_banner_list = document.getElementById("easychat-welcome-banner-draggable-item")
    if (welcome_banner_list.children.length > 0) {
        return true
    }

    return false

}

function update_bot_color_font() {
    theme_selected = [];
    theme_elemnts = $("input:radio[name=easychat-theme]:checked")
    for (var i = 0; i < theme_elemnts.length; i++) {
        theme_selected.push(theme_elemnts[i].value)

    }
    if (theme_selected.length == 0) {
        alert("Please select theme")
        return
    }
    var is_minimization_enabled = false;
    if (document.getElementById("is-minimization-enabled").checked) {
        is_minimization_enabled = true;
    }
    theme_selected = theme_selected[0]

    if (theme_selected == "theme_7") {
        bot_theme_color = "2D4CB8"
        save_bot_font('Roboto', '14px')
        check_font_change = true
    } else {
        bot_theme_color = $("#bot_theme_color").val()
    }
}

function save_theme_settings(element) {


    update_bot_color_font()
    check_theme_change = true
    $("#save-web-channel").click();
}


function hide_phonetic_typing_checkbox() {
    if (document.getElementById("enable-phonetic-typing")) {
        document.getElementById("enable-phonetic-typing").style.display = "none";
    }

    if (document.getElementById("language-disclaimer-text-row")) {
        document.getElementById("language-disclaimer-text-row").style.display = "none";
    }
}

function show_phonetic_typing_checkbox() {
    document.getElementById("enable-phonetic-typing").style.display = "grid";
    handle_phonetic_typing_checkbox(document.getElementById("is_web_bot_phonetic_typing_enabled"))
}

function handle_phonetic_typing_checkbox(element) {
    if (element.checked) {
        document.getElementById("language-disclaimer-text-row").style.display = "grid";

    }
    else
        document.getElementById("language-disclaimer-text-row").style.display = "none";
}

function check_phonetic_typing_toogle() {
    for (let i = 0; i < LIST_OF_PHONETIC_TYPING_SUPPORTED_LANGUAGES.length; i++) {
        if ($("#" + LIST_OF_PHONETIC_TYPING_SUPPORTED_LANGUAGES[i]).prop('checked')) {
            show_phonetic_typing_checkbox()
            return
        }
    }

    hide_phonetic_typing_checkbox()

}

function remove_selected_language(event, el, id) {
    event.stopPropagation();
    if (id.toLowerCase().trim() == "english-en") {
        showToast("Default language cannot be removed")
        return
    }

    el.parentElement.remove();
    document.getElementById(id).checked = false;
    check_phonetic_typing_toogle()
    update_language_chips()
    enable_disable_auto_language_detection_toogle()
    enable_disable_welcome_message_language_change_toogle()
}

function make_slected_language_span_chips(id, name_in_english) {
    var span = '<span class="tag"><span class="language-chip-display-name" >' + name_in_english + '</span>\
        <svg class="selected-language-cross-btn" onclick="remove_selected_language(event,this,`' + id + '`)"  width="12" height="12" viewBox="0 0 7 8" fill="none" xmlns="http://www.w3.org/2000/svg">\
            <path d="M6.65011 0.854978C6.55669 0.761352 6.42987 0.708735 6.29761 0.708735C6.16535 0.708735 6.03852 0.761352 5.94511 0.854978L3.50011 3.29498L1.05511 0.849978C0.961692 0.756352 0.834866 0.703735 0.702607 0.703735C0.570349 0.703735 0.443523 0.756352 0.350107 0.849978C0.155107 1.04498 0.155107 1.35998 0.350107 1.55498L2.79511 3.99998L0.350107 6.44498C0.155107 6.63998 0.155107 6.95498 0.350107 7.14998C0.545107 7.34498 0.860107 7.34498 1.05511 7.14998L3.50011 4.70498L5.94511 7.14998C6.14011 7.34498 6.45511 7.34498 6.65011 7.14998C6.84511 6.95498 6.84511 6.63998 6.65011 6.44498L4.20511 3.99998L6.65011 1.55498C6.84011 1.36498 6.84011 1.04498 6.65011 0.854978Z" fill="#2755CB"/>\
        </svg> </span>'
    const selected = document.querySelector("#selected-language-chips-wrapper .selected");
    selected.innerHTML += span;

}
let to_add_diffrentiator = true
// this variable designates wheter the diffrentiaor like +1,+2 in languages needs to be shown or not 
function update_language_chips() {

    const selected = document.querySelector("#selected-language-chips-wrapper .selected");
    let is_any_language_checked = false
    let count = 0;
    selected.innerHTML = ""
    var checked_list = get_checked_languages_list()
    for (let i = 0; i < checked_list.length; i++) {
        is_any_language_checked = true
        count++;
        if (count > 3 && to_add_diffrentiator)
            break;
        make_slected_language_span_chips(checked_list[i].id, checked_list[i].name)
    }
    if (count > 3 && to_add_diffrentiator) {
        var btn = document.createElement("BUTTON");
        btn.innerText = "+" + String(checked_list.length - 3);
        btn.id = "languages-extend-button"
        selected.appendChild(btn);
        add_language_extend_button_event_listner();
    }
    if (!is_any_language_checked)
        selected.innerHTML = "Select Language";
}
$('#selected-language-chips-wrapper').on('click', function () {

    const optionsContainer = document.querySelector("#language-box-options-container");
    const selected = document.querySelector(".selected");
    const searchBox = document.querySelector(".search-box input");
    const dropArrow = document.querySelector("#language-dropdown-arrow");
    optionsContainer.classList.toggle("active");
    is_language_dropddown_open = optionsContainer.classList.contains("active");
    to_add_diffrentiator = true
    if (is_language_dropddown_open) {
        selected.innerHTML = "Select Language";
        selected.style.border = "none";
        dropArrow.style.transform = "translateY(-50%) rotate(180deg)";
        searchBox.focus();
        document.getElementById("language-options-search-box").style.display = "block";
    } else {
        dropArrow.style.transform = "translateY(-50%) rotate(0deg)";
        update_language_chips()
        document.getElementById("language-options-search-box").style.display = "none";

    }
    searchBox.value = "";
    filterList("");

})
$('#language-options-search-box').on("keyup", function (e) {
    filterList(e.target.value);
});


function enable_disable_auto_language_detection_toogle() {
    let checked_list = get_checked_languages_list()

    if (checked_list.length <= 1) {
        document.getElementById("is_language_auto_detection_enabled").checked = false;
        document.getElementById("is_language_auto_detection_enabled").disabled = true;
        document.getElementById("bot_language_auto_detection_div").style.display = "none"
    } else {
        document.getElementById("is_language_auto_detection_enabled").disabled = false;
        document.getElementById("bot_language_auto_detection_div").style.display = "grid"
    }

}

function enable_disable_welcome_message_language_change_toogle(show_change_language_on_welcome_message=false) {
    let checked_list = get_checked_languages_list()

    if (checked_list.length <= 1) {
        document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").checked = false;
        document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").disabled = true;
        document.getElementById("enable_choose_language_welcome_response_toogle_div").style.display = "none"
    } else {
        document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").disabled = false;
        document.getElementById("enable_choose_language_welcome_response_toogle_div").style.display = "grid"
    }

    if (!show_change_language_on_welcome_message) {
        document.getElementById("enable_choose_language_welcome_response_toogle_div").style.display = "none"
    }

}

function add_language_extend_button_event_listner() {
    $('#languages-extend-button').on("click", function (e) {
        e.stopPropagation();
        const selected = document.querySelector(".selected");
        var checked_list = get_checked_languages_list()
        selected.innerHTML = "";
        let flag = 1;
        for (let item of checked_list) {
            flag = 0;
            make_slected_language_span_chips(item.id, item.name);
        }
        if (flag == 1)
            selected.innerHTML = "Select Language";
        else to_add_diffrentiator = false;
    });
}

function filterList(searchTerm) {
    searchTerm = searchTerm.toLowerCase();
    optionsList = document.querySelectorAll(".option");
    let flag = 0;
    document.querySelector(".no-elem").style.display = "none";
    optionsList.forEach(option => {
        let label = option.firstElementChild.nextElementSibling.innerText.toLowerCase();
        if (label.indexOf(searchTerm) != -1) {
            flag = 1;
            option.style.display = "block";
        } else {
            option.style.display = "none";
        }
    })
    if(searchTerm.trim() == "") {
        $("#select_all_item_wrapper").show();
    } else {
        $("#select_all_item_wrapper").hide();
    }
    if (flag === 0)
        document.querySelector(".no-elem").style.display = "block";
}

function get_checked_languages_list() {
    selected_language_list = document.querySelectorAll(".item-checkbox");
    checked_language_list = []
    for (let i = 0; i < selected_language_list.length; i++) {
        if (selected_language_list[i].checked) {
            checked_language_list.push(selected_language_list[i])
        }
    }
    return checked_language_list
}


function get_selected_languages_list() {
    selected_language_list = document.querySelectorAll(".item-checkbox");
    suported_language_list = []
    for (let i = 0; i < selected_language_list.length; i++) {
        if (selected_language_list[i].checked) {
            suported_language_list.push(selected_language_list[i].value)
        }
    }
    return suported_language_list
}

/* Sticky intent menu functions starts here */

$('#easychat-sticky-intents-collapsible-header, #menu-format').on('click', function () {
    var menu_div = document.getElementById('channel-sticky-intents-menu');
    menu_div.style.visibility = 'hidden';
    setTimeout(function () {
        var elem = document.getElementById('easychat-sticky-intents-collapsible-body');
        if (elem.style.display == 'block') {
            var is_menu_display = document.getElementById('menu-format').checked;
            if (is_menu_display) {
                setTimeout(function () {
                    menu_div.style.visibility = 'visible';
                }, 100)
            }
        }
    }, 200)
})


function fit_text_in_sticky_intent_div(id) {
    var parent_elem = document.getElementById('menu-item_' + id);

    if (parent_elem == null || parent_elem == undefined) return true;

    var child_elem = parent_elem.children[2];

    if (child_elem == undefined) return true;

    var elem = child_elem.children[0]

    if (child_elem.scrollHeight > parent_elem.scrollHeight / 2) {
        var curr_font_size = parseInt(elem.style.fontSize.split('%')[0]);
        elem.style.fontSize = (curr_font_size - 5) + '%';
    }

    if (child_elem.scrollHeight > parent_elem.scrollHeight / 2) return false;

    return true;
}

//-------------hamburger functions-------------
if (window.location.pathname != '/chat/login/') {
    $(function () {
        $("#hamburger-menu-container").sortable();
        $("#hamburger-menu-container").disableSelection();

        //quick menu drag and drop
        $("#quick-menu-container").sortable();
        $("#quick-menu-container").disableSelection();
    });
}

if (window.location.pathname == '/chat/login/') {
    $(document).ready(function () {

        setTimeout(function () {

            $('#forgot-pass-otp').modal({
                dismissible: false
            });
            $('#forgot-pass-back').modal({
                dismissible: false
            });

        }, 1000)


    })
}

function hamburger_sticky_button_display_handler(elem) {
    if (elem.value == "Link") {
        document.getElementById('hamburger-sticky-intents').style.display = 'none';
        document.getElementById('hamburger-sticky-link').style.display = 'block';
        current_hamburger_type = "Link"
    } else {
        document.getElementById('hamburger-sticky-intents').style.display = 'block';
        document.getElementById('hamburger-sticky-link').style.display = 'none';
        current_hamburger_type = "Intent"
    }
}

//-------hamburger icon name-----

function set_hamburger_icon_val(element, id) {
    var class_name = document.getElementById(id).className.split(" ")
    document.getElementById("edit-hamburger-icon-name").value = class_name[1]
    current_hamburger_editable_id = id + ""
    current_editable_index = current_hamburger_editable_id.split("_")[current_hamburger_editable_id.split("_").length - 1]
}

function cancel_hamburger_icon_edit_window() {
    document.getElementById("edit-hamburger-icon-name").value = ""
}

function save_hamburger_icon_edit_window(element) {
    var icon_name = document.getElementById("edit-hamburger-icon-name").value

    if (icon_name == "") {
        M.toast({
            "html": "Select an icon"
        });
        return;
    }

    document.getElementById(current_hamburger_editable_id).className = "fa " + icon_name + " material-icons prefix"

    var splitted_input = document.getElementById("hamburger_hidden_input_" + current_editable_index).value.split("_")
    var merged_input = splitted_input[0] + "_" + splitted_input[1] + "_" + icon_name + "_" + splitted_input[3] + "_" + splitted_input[4] + "_" + splitted_input[5]

    document.getElementById("hamburger_hidden_input_" + current_editable_index).value = merged_input

}

//-------hamburger menu title-----

function set_hamburger_menu_title_val(element) {
    var menu_title = element.innerHTML.trim()
    if (menu_title != "Menu Title")
        document.getElementById("edit-hamburger-menu-title").value = menu_title
    current_hamburger_editable_id = element.id + ""
    current_editable_index = current_hamburger_editable_id.split("_")[current_hamburger_editable_id.split("_").length - 1]
}

function cancel_hamburger_menu_title_edit_window() {
    document.getElementById("edit-hamburger-menu-title").value = ""
}

function save_hamburger_menu_title_edit_window(element) {
    var menu_title = document.getElementById("edit-hamburger-menu-title").value

    if (menu_title == "") {
        M.toast({
            "html": "Please enter menu title"
        });
        return;
    }
    var elements = document.querySelectorAll('.hamburger-menu-item > input');
    for (element of elements) {
        let intent = element.value;
        intent = intent.split('_');
        const menu_title_current = intent[3];
        if (menu_title_current.trim() == menu_title.trim()) {
            M.toast({
                "html": "Item already exists in menu"
            });
            return;
        }
    }

    document.getElementById(current_hamburger_editable_id).innerHTML = menu_title


    var splitted_input = document.getElementById("hamburger_hidden_input_" + current_editable_index).value.split("_")
    var merged_input = splitted_input[0] + "_" + splitted_input[1] + "_" + splitted_input[2] + "_" + menu_title + "_" + splitted_input[4] + "_" + splitted_input[5]

    document.getElementById("hamburger_hidden_input_" + current_editable_index).value = merged_input

}

//----hamburger intent---------


function set_hamburger_intent_val(element, intent_pk_param, intent_name_param) {
    var doc = new DOMParser().parseFromString(element.innerHTML + "", "text/html")
    var intent_name = intent_name_param
    var intent_pk = intent_pk_param
    var val_tag = intent_name + "-" + intent_pk

    if (val_tag.trim() == "-") {
        $('#edit-hamburger-intent').val("Intent Name-1883");
        $('#edit-hamburger-intent').trigger('change');
    } else {
        $('#edit-hamburger-intent').val(val_tag);
        $('#edit-hamburger-intent').trigger('change');
    }

    current_hamburger_editable_id = element.querySelectorAll("input")[0].id + ""

    current_editable_index = current_hamburger_editable_id.split("_")[current_hamburger_editable_id.split("_").length - 1]
}

function cancel_hamburger_intent_edit_window() {

    $('#edit-hamburger-intent').val("Contact Customer Care-181");
    $('#edit-hamburger-intent').trigger('change');
}

function save_hamburger_intent_edit_window(element) {
    var intent = document.getElementById("edit-hamburger-intent").value
    var intent_name = intent.split("-")[0]
    var intent_pk = intent.split("-")[1]
    if (intent_name == "" || intent_name == "Intent Name") {
        M.toast({
            "html": "Please enter a valid intent"
        });
        return;
    }

    document.getElementById(current_hamburger_editable_id).checked = 'true'

    var splitted_input = document.getElementById("hamburger_hidden_input_" + current_editable_index).value.split("_")
    var merged_input = splitted_input[0] + "_" + intent_pk + "_" + splitted_input[2] + "_" + splitted_input[3] + "_" + intent_name + "_" + "nil"

    $('#hamburger_label_intent_' + current_editable_index).click(function () {
        set_hamburger_intent_val(document.getElementById('hamburger_label_intent_' + current_editable_index), intent_pk, intent_name)
    });
    document.getElementById("hamburger_hidden_input_" + current_editable_index).value = merged_input

}


//----hamburger link---------


function set_hamburger_link_val(element, link) {
    var doc = new DOMParser().parseFromString(element.innerHTML + "", "text/html")

    if (link == "nil")
        link = ""

    $('#edit-hamburger-link').val(link);

    current_hamburger_editable_id = element.querySelectorAll("input")[0].id + ""

    current_editable_index = current_hamburger_editable_id.split("_")[current_hamburger_editable_id.split("_").length - 1]
}

function cancel_hamburger_link_edit_window() {
    $('#edit-hamburger-link').val("");

}

function save_hamburger_link_edit_window(element) {
    var link = document.getElementById("edit-hamburger-link").value

    if (link == "") {
        M.toast({
            "html": "Please enter a valid link"
        });
        return;

    }

    var pattern = /^((http|https|ftp):\/\/)/;
    if (!pattern.test(link)) {

        M.toast({
            "html": "Please enter valid redirect url."
        }, 2000);
        return;
    }

    document.getElementById(current_hamburger_editable_id).checked = 'true'
    var splitted_input = document.getElementById("hamburger_hidden_input_" + current_editable_index).value.split("_")
    var merged_input = splitted_input[0] + "_" + "1883" + "_" + splitted_input[2] + "_" + splitted_input[3] + "_" + "Intent Name" + "_" + link

    $('#hamburger_label_link_' + current_editable_index).click(function () {
        set_hamburger_link_val(document.getElementById('hamburger_label_link_' + current_editable_index), link)
    });
    document.getElementById("hamburger_hidden_input_" + current_editable_index).value = merged_input

}

//------hamburger delete item------
function delete_hamburger_container(pk) {

    document.getElementById("hamburger-item_" + pk).style.display = "none"
    var temp_val = document.getElementById("hamburger_hidden_input_" + pk).value
    temp_val = temp_val + "_deleted"
    document.getElementById("hamburger_hidden_input_" + pk).value = temp_val


}

function add_hamburger_item() {
    let intent = "null"
    let link = "null"
    let intent_name = "null";
    let intent_pk = "null";
    let icon_name = document.getElementById('icon-name-ham').value;
    let menu_title = document.getElementById('menu-title-ham').value;

    if (icon_name == "") {
        M.toast({
            "html": "Select an icon"
        });
        return;
    }

    if (menu_title == "") {
        M.toast({
            "html": "Please add Menu Title"
        });
        return;
    }

    if (current_hamburger_type == "Intent") {
        intent = document.getElementById('intents-ham').value;
        if (intent == "") {
            var e = document.getElementById("intents-ham");
            intent = e.options[0].value;
            if (intent == "") {
                M.toast({
                    "html": "Please select a valid intent"
                });
                return;
            }
        }

        intent = intent.split('-');
        intent_name = intent[0];
        intent_pk = intent[1];
    } else {
        link = document.getElementById('link-ham').value;
        if (link == "") {
            M.toast({
                "html": "Enter a link"
            });
            return;
        }

        var pattern = /^((http|https|ftp):\/\/)/;
        if (!pattern.test(link)) {
            M.toast({
                "html": "Please enter valid redirect url."
            }, 2000);
            return;
        }


    }


    let last_hamburger = document.getElementsByClassName('hamburger-menu-container')[document.getElementsByClassName('hamburger-menu-container').length - 1];

    var elements = document.querySelectorAll('.hamburger-menu-item > input');
    var editable_index = 0;
    var upload_place = -1
    var flag = 0
    for (element of elements) {
        let intent = element.value;
        intent = intent.split('_');
        const menu_title_current = intent[3];

        if (menu_title_current == menu_title) {
            M.toast({
                "html": "Item already exists in menu"
            });
            return;
        } else {

            if (menu_title_current == "Menu Title") {
                flag = 1;
                upload_place = intent[0]
                break;
            }

            editable_index++;


        }
    }

    editable_index = editable_index + 1;
    if (upload_place != -1) {
        editable_index = upload_place
    }

    var last_hamburger_id;
    if (last_hamburger_id == undefined) {
        last_hamburger_id = 1;
    } else {
        last_hamburger_id = last_hamburger.id.split('_')[1];
        last_hamburger_id = parseInt(last_hamburger_id) + 1;
    }

    var html = '<div class="hamburger-menu-item ui-state-default" id="hamburger-item_' + editable_index +
        '" >\
                                            <div class="hamburger-category-icon">\
                                            <div  data-target="modal-upload-hamburger-category-tile-icon" \
                                            style="padding: 5px; cursor: pointer; position: relative;\
                                            height: 50px;\
                                            width: 50px;\
                                            overflow: visible;" \
                                            class="modal-trigger" onclick="set_hamburger_icon_val(this,\'hamburger-icon_' + editable_index + '\')">\
                                            <i  class="fa ' + icon_name + ' material-icons prefix" aria-hidden="true" style = "font-size: 0.5em; position: absolute;\
                                            top: 50%;\
                                            left: 50%;\
                                            transform: translate(-50%, -50%);" id="hamburger-icon_' + editable_index + '" ></i></div>\
                                            <a onclick="delete_hamburger_container(' + editable_index + ')"><i class="material-icons red-text text-darken-3 hamburger-delete-tile-btn" id="hamburger-delete_' + editable_index + '">delete</i></a>\
                                            </div>\
                                            <div class="hamburger-category-title">\
                                                <span data-target="modal-edit-hamburger-category-tile-title" class=" modal-trigger" id="hamburger-menu-title_' + editable_index + '" onclick="set_hamburger_menu_title_val(this)" >' +
        menu_title +
        '</span>\
                                            </div>'
    var radio_target = ""
    if (link + "" == "null") {
        radio_target = '<div class="hamburger-category-radio-btn">\
                                            <label data-target="modal-edit-hamburger-category-tile-intent" id="hamburger_label_intent_' + editable_index + '" class="modal-trigger" onclick="set_hamburger_intent_val(this,\'' + intent_pk + '\' ,\'' + intent_name + '\')" >\
                                                  <input class="with-gap" name="category-group1_' + editable_index + '" type="radio" id="hamburger-intent_' + editable_index + '" checked/>\
                                                  <span>Intent</span>\
                                              </label>\
                                                <label data-target="modal-edit-hamburger-category-tile-link" id="hamburger_label_link_' + editable_index + '"  class="modal-trigger" onclick="set_hamburger_link_val(this,\'\')">\
                                                  <input class="with-gap" name="category-group1_' + editable_index + '" type="radio" id="hamburger-link_' + editable_index + '" />\
                                                  <span>Link</span>\
                                              </label>\
                                          </div>\
                                          <input type="hidden" id = "hamburger_hidden_input_' + editable_index + '" value = "' + editable_index + '_' + intent_pk + '_' + icon_name + '_' + menu_title + '_' + intent_name + '_nil' + '">\
                                            </div>'
        html = html + radio_target
    } else {
        radio_target = '<div class="hamburger-category-radio-btn">\
                                            <label data-target="modal-edit-hamburger-category-tile-intent" id="hamburger_label_intent_' + editable_index + '"  class="modal-trigger" onclick="set_hamburger_intent_val(this,\'1883\',\'Intent Name\')">\
                                                  <input class="with-gap" name="category-group1_' + editable_index + '" type="radio" id="hamburger-intent_' + editable_index + '" />\
                                                  <span>Intent</span>\
                                              </label>\
                                                <label data-target="modal-edit-hamburger-category-tile-link" id="hamburger_label_link_' + editable_index + '"  class="modal-trigger" onclick="set_hamburger_link_val(this, \'' + link + '\')">\
                                                  <input class="with-gap" name="category-group1_' + editable_index + '" type="radio" id="hamburger-link_' + editable_index + '" checked/>\
                                                  <span>Link</span>\
                                              </label>\
                                          </div>\
                                          <input type="hidden" id = "hamburger_hidden_input_' + editable_index + '" value = "' + editable_index + '_' + 1883 + '_' + icon_name + '_' + menu_title + '_nil_' + link + '">\
                                            </div>'

        html = html + radio_target
    }

    if (flag == 0)
        $('#hamburger-menu-container').append(html);
    else {
        var doc = new DOMParser().parseFromString(html, "text/html")
        document.getElementById('hamburger-item_' + editable_index).innerHTML = doc.getElementById('hamburger-item_' + editable_index).innerHTML
    }

    document.getElementById('icon-name-ham').value = ""
    document.getElementById('menu-title-ham').value = ""
    document.getElementById('intents-ham').value = ""
    document.getElementById('link-ham').value = ""
    document.getElementById('link-format').checked = "true"
    document.getElementById('hamburger-sticky-intents').style.display = 'none';
    document.getElementById('hamburger-sticky-link').style.display = 'block';
    current_hamburger_type = "Link"

    var is_text_size_correct = false;
    while (!is_text_size_correct) {
        is_text_size_correct = fit_text_in_sticky_intent_div(last_hamburger_id);
    }

}

//---------Hamburger Functions End-----

//--------Quick Menu Functions---

function quick_sticky_button_display_handler(elem) {
    if (elem.value == "Link") {
        document.getElementById('quick-sticky-intents').style.display = 'none';
        document.getElementById('quick-sticky-link').style.display = 'block';
        current_quick_type = "Link"
    } else {
        document.getElementById('quick-sticky-intents').style.display = 'block';
        document.getElementById('quick-sticky-link').style.display = 'none';
        current_quick_type = "Intent"
    }
}

//-------Quick Icon name-----

function set_quick_icon_val(element, id) {
    var src_name = document.getElementById(id).src
    document.getElementById("input_edit_quick_menu_image2").value = src_name
    current_quick_editable_id = id + ""
    current_quick_editable_index = current_quick_editable_id.split("_")[current_quick_editable_id.split("_").length - 1]
}


//Quick Menu Image Upload
$(document).on("click", "#edit_quick_menu_image", function (e) {
    e.preventDefault();
    var input_upload_image = ($("#input_edit_quick_menu_image"))[0].files[0]

    if (input_upload_image == null || input_upload_image == undefined) {
        M.toast({
            "html": "Please select a file"
        }, 2000);

        setTimeout(function () {
            $('#modal-edit-quick-menu-image').modal('open');
        }, 200);
        return false;
    }
    if (input_upload_image.name.match(/\.(jpeg|jpg|gif|png)$/) == null) {
        M.toast({
            "html": "Please upload valid image"
        }, 2000);
        setTimeout(function () {
            $('#modal-edit-quick-menu-image').modal('open');
        }, 200);
        return false;
    }
    if (input_upload_image.size > upload_file_limit_size) {
        M.toast({
            "html": "Size limit exceed(should be less than 5 MB)."
        }, 2000);

        setTimeout(function () {
            $('#modal-edit-quick-menu-image').modal('open');
        }, 200);

        return false;
    }

    if (check_malicious_file(input_upload_image.name) == true) {

        setTimeout(function () {
            $('#modal-edit-quick-menu-image').modal('open');
        }, 200);
        return false;
    }

    var reader = new FileReader();
    reader.readAsDataURL(input_upload_image);
    reader.onload = function () {

        base64_str = reader.result.split(",")[1];

        uploaded_file = [];
        uploaded_file.push({
            "filename": input_upload_image.name,
            "base64_file": base64_str,
        });

        upload_edit_quick_menu_image();
    };

    reader.onerror = function (error) {
        console.log('Error: ', error);
    };
});

async function upload_edit_quick_menu_image() {
    var response = await upload_image();

    if (response && response.status == 200) {
        src = window.location.protocol + "//" + window.location.host + response["src"];
        document.getElementById('input_edit_quick_menu_image2').value = "";
        current_quick_img_src_edit = response["src"]
        $("#" + current_quick_editable_id).attr("src", response["src"]);

        var splitted_input = document.getElementById("quick_hidden_input_" + current_quick_editable_index).value.split(",")
        var merged_input = splitted_input[0] + "," + splitted_input[1] + "," + response["src"] + "," + splitted_input[3] + "," + splitted_input[4] + "," + splitted_input[5]

        document.getElementById("quick_hidden_input_" + current_quick_editable_index).value = merged_input
    }
}

//-------Quick Menu title-----©

function set_quick_menu_title_val(element) {
    var menu_title = element.innerHTML.trim()
    if (menu_title != "Menu Title")
        document.getElementById("edit-quick-menu-title").value = menu_title
    current_quick_editable_id = element.id + ""
    current_quick_editable_index = current_quick_editable_id.split("_")[current_quick_editable_id.split("_").length - 1]
}

function cancel_quick_menu_title_edit_window() {
    document.getElementById("edit-quick-menu-title").value = ""
}

function save_quick_menu_title_edit_window(element) {
    var menu_title = document.getElementById("edit-quick-menu-title").value

    if (menu_title == "") {
        M.toast({
            "html": "Please enter menu title"
        });
        return;
    }
    var elements = document.querySelectorAll('.quick-menu-item > input');
    for (element of elements) {
        let intent = element.value;
        intent = intent.split(',');
        const menu_title_current = intent[3];
        if (menu_title_current.trim() == menu_title.trim()) {
            M.toast({
                "html": "Item already exists in menu"
            });
            return;
        }
    }

    document.getElementById(current_quick_editable_id).innerHTML = menu_title


    var splitted_input = document.getElementById("quick_hidden_input_" + current_quick_editable_index).value.split(",")
    var merged_input = splitted_input[0] + "," + splitted_input[1] + "," + splitted_input[2] + "," + menu_title + "," + splitted_input[4] + "," + splitted_input[5]

    document.getElementById("quick_hidden_input_" + current_quick_editable_index).value = merged_input

}

//----Quick Menu intent---------


function set_quick_intent_val(element, intent_pk_param, intent_name_param) {
    var doc = new DOMParser().parseFromString(element.innerHTML + "", "text/html")
    var intent_name = intent_name_param
    var intent_pk = intent_pk_param
    var val_tag = intent_name + "-" + intent_pk
    if (val_tag.trim() == "-") {
        $('#edit-quick-intent').val("Intent Name-1883");
        $('#edit-quick-intent').trigger('change');
    } else if (val_tag == "nil-1883") {
        $('#edit-quick-intent').val("Intent Name-1883");
        $('#edit-quick-intent').trigger('change');
    } else {
        $('#edit-quick-intent').val(val_tag);
        $('#edit-quick-intent').trigger('change');
    }

    current_quick_editable_id = element.querySelectorAll("input")[0].id + ""
    current_quick_editable_index = current_quick_editable_id.split("_")[current_quick_editable_id.split("_").length - 1]
}

function cancel_quick_intent_edit_window() {

    $('#edit-quick-intent').val("Contact Customer Care-181");
    $('#edit-quick-intent').trigger('change');
}

function save_quick_intent_edit_window(element) {
    var intent = document.getElementById("edit-quick-intent").value
    var intent_name = intent.split("-")[0]
    var intent_pk = intent.split("-")[1]
    if (intent_name == "" || intent_name == "Intent Name") {
        M.toast({
            "html": "Please enter a valid intent"
        });
        return;
    }

    document.getElementById(current_quick_editable_id).checked = 'true'

    var splitted_input = document.getElementById("quick_hidden_input_" + current_quick_editable_index).value.split(",")
    var merged_input = splitted_input[0] + "," + intent_pk + "," + splitted_input[2] + "," + splitted_input[3] + "," + intent_name + "," + "nil"

    $('#quick_label_intent_' + current_quick_editable_index).click(function () {
        set_quick_intent_val(document.getElementById('quick_label_intent_' + current_quick_editable_index), intent_pk, intent_name)
    });
    document.getElementById("quick_hidden_input_" + current_quick_editable_index).value = merged_input

}


//----Quick Menu link---------


function set_quick_link_val(element, link) {
    var doc = new DOMParser().parseFromString(element.innerHTML + "", "text/html")

    if (link == "nil")
        link = ""

    $('#edit-quick-link').val(link);

    current_quick_editable_id = element.querySelectorAll("input")[0].id + ""
    current_quick_editable_index = current_quick_editable_id.split("_")[current_quick_editable_id.split("_").length - 1]
}

function cancel_quick_link_edit_window() {
    $('#edit-quick-link').val("");

}

function save_quick_link_edit_window(element) {
    var link = document.getElementById("edit-quick-link").value

    if (link == "") {
        M.toast({
            "html": "Please enter a valid link"
        });
        return;

    }

    var pattern = /^((http|https|ftp):\/\/)/;
    if (!pattern.test(link)) {
        M.toast({
            "html": "Please enter valid redirect url."
        }, 2000);
        return;
    }

    document.getElementById(current_quick_editable_id).checked = 'true'
    var splitted_input = document.getElementById("quick_hidden_input_" + current_quick_editable_index).value.split(",")
    var merged_input = splitted_input[0] + "," + "1883" + "," + splitted_input[2] + "," + splitted_input[3] + "," + "Intent Name" + "," + link

    $('#quick_label_link_' + current_quick_editable_index).click(function () {
        set_quick_link_val(document.getElementById('quick_label_link_' + current_quick_editable_index), link)
    });

    document.getElementById("quick_hidden_input_" + current_quick_editable_index).value = merged_input

}

//------Quick Menu delete item------
function delete_quick_container(pk) {

    document.getElementById("quick-item_" + pk).style.display = "none"
    var temp_val = document.getElementById("quick_hidden_input_" + pk).value
    temp_val = temp_val + ",deleted"
    document.getElementById("quick_hidden_input_" + pk).value = temp_val


}

function add_quick_menu_item() {
    let intent = "null"
    let link = "null"
    let intent_name = "null";
    let intent_pk = "null";
    let icon_name = document.getElementById('icon-name-quick').value;
    let menu_title = document.getElementById('menu-title-quick').value;

    if (icon_name == "") {
        M.toast({
            "html": "Select an icon"
        });
        return;
    }

    if (menu_title == "") {
        M.toast({
            "html": "Please add Menu Title"
        });
        return;
    }

    if (current_quick_type == "Intent") {
        intent = document.getElementById('intents-quick').value;
        if (intent == "") {
            var e = document.getElementById("intents-quick");
            intent = e.options[0].value;
            if (intent == "") {
                M.toast({
                    "html": "Please select a valid intent"
                });
                return;
            }
        }

        intent = intent.split('-');
        intent_name = intent[0];
        intent_pk = intent[1];
    } else {
        link = document.getElementById('link-quick').value;
        if (link == "") {
            M.toast({
                "html": "Enter a link"
            });
            return;
        }

        var pattern = /^((http|https|ftp):\/\/)/;
        if (!pattern.test(link)) {
            M.toast({
                "html": "Please enter valid redirect url."
            }, 2000);
            return;
        }
    }

    var elements = document.querySelectorAll('.quick-menu-item > input');
    var editable_index = 0;
    var upload_place = -1;
    var flag = 0
    for (element of elements) {
        let intent = element.value;
        intent = intent.split(',');
        const menu_title_current = intent[3];
        if (menu_title_current == menu_title) {
            M.toast({
                "html": "Item already exists in menu"
            });
            return;
        } else {

            if (menu_title_current == "Menu Title") {
                flag = 1;
                upload_place = intent[0]
                break;
            }

            editable_index++;


        }
    }
    editable_index = editable_index + 1;
    if (upload_place != -1) {
        editable_index = upload_place
    }

    var html = '<div class="quick-menu-item ui-state-default" id="quick-item_' + editable_index +
        '" >\
                                            <div class="hamburger-category-icon">\
                                            <div  data-target="modal-edit-quick-menu-image" \
                                            style="padding: 5px; cursor: pointer; position: relative;\
                                            height: 50px;\
                                            width: 50px;\
                                            overflow: visible;" \
                                            class="modal-trigger" onclick="set_quick_icon_val(this,\'quick-icon_' + editable_index + '\')">\
                                            <img id="quick-icon_' + editable_index + '" class="responsive-img material-icons prefix" style="width: 40px;height: 40px; position: absolute;\
                                                        top: 50%;\
                                                        left: 50%;\
                                                        transform: translate(-50%, -50%);" src = "' + current_quick_img_src + '"> \
                             </div>\
                                            <a onclick="delete_quick_container(' + editable_index + ')"><i class="material-icons red-text text-darken-3 hamburger-delete-tile-btn" id="quick-delete_' + editable_index + '">delete</i></a>\
                                            </div>\
                                            <div class="hamburger-category-title">\
                                                <span data-target="modal-edit-quick-category-tile-title" class=" modal-trigger" id="quick-menu-title_' + editable_index + '" onclick="set_quick_menu_title_val(this)" >' +
        menu_title +
        '</span>\
                                            </div>'
    var radio_target = ""
    if (link + "" == "null") {
        radio_target = '<div class="hamburger-category-radio-btn">\
                                            <label data-target="modal-edit-quick-category-tile-intent"id="quick_label_intent_' + editable_index + '" class="modal-trigger" onclick="set_quick_intent_val(this,\'' + intent_pk + '\' ,\'' + intent_name + '\')" >\
                                                  <input class="with-gap" name="category-group11_' + editable_index + '" type="radio" id="quick-intent_' + editable_index + '" checked/>\
                                                  <span>Intent</span>\
                                              </label>\
                                                <label data-target="modal-edit-quick-category-tile-link" id="quick_label_link_' + editable_index + '" class="modal-trigger" onclick="set_quick_link_val(this,\'\')">\
                                                  <input class="with-gap" name="category-group11_' + editable_index + '" type="radio" id="quick-link_' + editable_index + '" />\
                                                  <span>Link</span>\
                                              </label>\
                                          </div>\
                                          <input type="hidden" id = "quick_hidden_input_' + editable_index + '" value = "' + editable_index + ',' + intent_pk + ',' + current_quick_img_src + ',' + menu_title + ',' + intent_name + ',nil' + '">\
                                            </div>'
        html = html + radio_target
    } else {
        radio_target = '<div class="hamburger-category-radio-btn">\
                                            <label data-target="modal-edit-quick-category-tile-intent" id="quick_label_intent_' + editable_index + '" class="modal-trigger" onclick="set_quick_intent_val(this,\'1883\',\'Intent Name\')">\
                                                  <input class="with-gap" name="category-group11_' + editable_index + '" type="radio" id="quick-intent_' + editable_index + '" />\
                                                  <span>Intent</span>\
                                              </label>\
                                                <label data-target="modal-edit-quick-category-tile-link" id="quick_label_link_' + editable_index + '" class="modal-trigger" onclick="set_quick_link_val(this, \'' + link + '\')">\
                                                  <input class="with-gap" name="category-group11_' + editable_index + '" type="radio" id="quick-link_' + editable_index + '" checked/>\
                                                  <span>Link</span>\
                                              </label>\
                                          </div>\
                                          <input type="hidden" id = "quick_hidden_input_' + editable_index + '" value = "' + editable_index + ',' + 1883 + ',' + current_quick_img_src + ',' + menu_title + ',nil,' + link + '">\
                                            </div>'

        html = html + radio_target
    }
    if (flag == 0)
        $('#quick-menu-container').append(html);
    else {
        var doc = new DOMParser().parseFromString(html, "text/html")
        document.getElementById('quick-item_' + editable_index).innerHTML = doc.getElementById('quick-item_' + editable_index).innerHTML
    }

    document.getElementById('icon-name-quick').value = ""
    document.getElementById('menu-title-quick').value = ""
    document.getElementById('intents-quick').value = ""
    document.getElementById('link-quick').value = ""
    $("#quick_menu_preview_image").attr("src", "")
    current_quick_img_src = ""
    document.getElementById('quick-link-format').checked = "true"
    document.getElementById('quick-sticky-intents').style.display = 'none';
    document.getElementById('quick-sticky-link').style.display = 'block';
    current_quick_type = "Link"

}

//-------Quick Menu Funtion End----

function add_sticky_menu_intent() {
    let intent = document.getElementById('select-sticky-intent-list').value;
    const icon_name = document.getElementById('sticky-intent-icon-name').value;

    if (intent.trim() == "") {
        M.toast({
            "html": "Select an intent"
        });
        return;
    }

    if (icon_name.trim() == "") {
        M.toast({
            "html": "Select an icon"
        });
        return;
    }

    intent = intent.split('-');
    var length = intent.length
    const intent_name = intent.slice(0, length - 1).join('-');
    const intent_pk = intent[length - 1];

    var elements = document.querySelectorAll('.sticky-intent-menu-item-div > input');

    for (element of elements) {
        let intent = element.value;
        intent = intent.split('_');
        const el_intent_pk = intent[0];

        if (el_intent_pk == intent_pk) {
            M.toast({
                "html": "Sticky intent already exists in menu"
            });
            return;
        }
    }

    let last_sticky_intent = document.getElementsByClassName('sticky-intent-menu-item-div')[document.getElementsByClassName('sticky-intent-menu-item-div').length - 2];

    var last_sticky_intent_id;
    if (last_sticky_intent == undefined) {
        last_sticky_intent_id = 1;
    } else {
        last_sticky_intent_id = last_sticky_intent.id.split('_')[1];
        last_sticky_intent_id = parseInt(last_sticky_intent_id) + 1;
    }

    const html = '<div class="sticky-intent-menu-item-div" id="menu-item_' + last_sticky_intent_id + '" style="display: flex; flex-direction: column; align-items: center; justify-content: center;">\
                                <div class="sticky-intent-menu-delete-div" onclick="remove_sticky_menu_item(this)">\
                                    <img src="/static/EasyChatApp/img/close_btn_sticky.svg">\
                                </div>\
                            <div>\
                                <a href="#modal-select-sticky-intent" class="modal-trigger" onclick="edit_selected_sticky_intent(this)">\
                                    <i class="fa ' + icon_name + '" aria-hidden="true" style = "font-size: 1.5em"></i>\
                                </a>\
                            </div>\
                        <div style="text-align: center;" class="sticky-intent-menu-text-div"><p class="sticky-intent-menu-text" style="margin: 0; font-size: 100%">' + intent_name + '</p></div>\
                        <input type="hidden" value = "' + intent_pk + '_' + icon_name + '_' + intent_name + '"  ></div>'

    $('#channel-sticky-intents-menu-list').prepend(html);
}

function edit_sticky_menu_intent(elem) {
    let intent = document.getElementById('select-sticky-intent-list').value;
    const icon_name = document.getElementById('sticky-intent-icon-name').value;
    if (intent == "") {
        M.toast({
            "html": "Select an intent"
        });
        return;
    }

    if (icon_name == "") {
        M.toast({
            "html": "Select an icon"
        });
        return;
    }

    intent = intent.split('-');
    var length = intent.length
    const intent_name = intent.slice(0, length - 1).join('-');
    const intent_pk = intent[length - 1];

    let selected_intent_pk = elem.dataset.elementEdited;
    var elements = document.querySelectorAll('.sticky-intent-menu-item-div > input');
    let parentElem;
    for (element of elements) {
        let intent = element.value;
        intent = intent.split('_');
        const el_intent_pk = intent[0];

        if (intent_pk == el_intent_pk && intent_pk != selected_intent_pk) {
            M.toast({
                "html": "Sticky intent already exists in menu"
            });
            return;
        }

        if (selected_intent_pk == el_intent_pk) {
            parentElem = element.parentElement;
            break;
        }
    }

    const html = '<div class="sticky-intent-menu-delete-div" onclick="remove_sticky_menu_item(this)">\
                                    <img src="/static/EasyChatApp/img/close_btn_sticky.svg">\
                                </div>\
                            <div>\
                                <a href="#modal-select-sticky-intent" class="modal-trigger" onclick="edit_selected_sticky_intent(this)">\
                                    <i class="fa ' + icon_name + '" aria-hidden="true" style = "font-size: 1.5em"></i>\
                                </a>\
                            </div>\
                        <div style="text-align: center;" class="sticky-intent-menu-text-div"><p class="sticky-intent-menu-text" style="margin: 0; font-size:100%;">' + intent_name + '</p></div>\
                        <input type="hidden" value = "' + intent_pk + '_' + icon_name + '_' + intent_name + '"  >';

    parentElem.innerHTML = html;
}

function remove_sticky_menu_item(elem) {
    elem.parentElement.remove();
}

/* Sticky intent menu functions ends here */

function check_bot_usage_config() {
    active_hours_start = Math.round($("#active_hours_start").val())
    active_hours_end = Math.round($("#active_hours_end").val())

    if (active_hours_start == undefined || active_hours_start == "" || active_hours_start < 0 || active_hours_start > 24) {

        alert("Kindly enter a valid starting active hour")
        return true;
    }
    if (active_hours_end == undefined || active_hours_end == "" || active_hours_end < 0 || active_hours_end > 24) {

        alert("Kindly enter a valid Ending active hour")
        return true;
    }

    email_addr_list = []
    var email_addr_chip_elmts = M.Chips.getInstance($('#analytics-monitoring-email-address')).chipsData;
    for (var i = 0; i < email_addr_chip_elmts.length; i++) {

        email_addr_list.push(email_addr_chip_elmts[i]["tag"]);
    }
    if (!email_addr_list.length) {

        alert("Kindly enter an Email ID to proceed")
        return true;
    }
    for (var i = 0; i < email_addr_list.length; i++) {
        if (!validateEmailAddr(email_addr_list[i])) {
            alert("Please provide valid Email ID")
            return true;
        }
    }

    analytics_monitoring_msg_limit = $("#analytics-monitoring-message-limit").val()
    if (analytics_monitoring_msg_limit == undefined || analytics_monitoring_msg_limit == "" || analytics_monitoring_msg_limit <= 0) {

        alert("Kindly enter a valid expected no of messages")
        return true;
    }
    analytics_monitoring_consecutive_hrs = $("#analytics-monitoring-consecutive-hrs").val()
    if (analytics_monitoring_consecutive_hrs == undefined || analytics_monitoring_consecutive_hrs == "" || analytics_monitoring_consecutive_hrs <= 0) {

        alert("Kindly enter a valid no of consecutive hours")
        return true;
    }
    return false;
}

function check_api_config() {
    mail_sender_time_interval = $("#mail_sender_time_interval_input").val()
    if (mail_sender_time_interval == undefined || mail_sender_time_interval == "" || mail_sender_time_interval < 0) {

        alert("Kindly enter a valid time interval")
        return true;
    }

    email_addr_list = []
    var email_addr_chip_elmts = M.Chips.getInstance($('#api-fail-email-config-email-address')).chipsData;
    for (var i = 0; i < email_addr_chip_elmts.length; i++) {

        email_addr_list.push(email_addr_chip_elmts[i]["tag"]);
    }
    if (!email_addr_list.length) {

        alert("Kindly enter an Email ID to proceed")
        return true;
    }
    for (var i = 0; i < email_addr_list.length; i++) {
        if (!validateEmailAddr(email_addr_list[i])) {
            alert("Please provide valid Email ID")
            return true;
        }
    }
    return false
}

function insertAtCursor(myField, myValue) {
    //IE support
    if (document.selection) {
        myField.focus();
        sel = document.selection.createRange();
        sel.text = myValue;
    }
    //MOZILLA and others
    else if (myField.selectionStart || myField.selectionStart == '0') {
        var startPos = myField.selectionStart;
        var endPos = myField.selectionEnd;
        myField.value = myField.value.substring(0, startPos) +
            myValue +
            myField.value.substring(endPos, myField.value.length);
    } else {
        myField.value += myValue;
    }
}

// $(document).on("click", ".add-api-variable", function(e) {

//     if (window.location.href.indexOf("/edit-intent/") != -1 || window.location.href.indexOf("/create-intent/") != -1) {
//         $("#intent-bot-response-collapsible").collapsible("open");
//         var api_variable_name = this.id.split("-")[1];
//         // var v = CKEDITOR.instances['intent_bot_response_text_text'].getData();
//         var v = tinymce.get('intent_bot_response_text_text').getContent();
//         var cursorPos = CKEDITOR.instances['intent_bot_response_text_text'].getSelection().getRanges()[0].startOffset;

//         var textBefore = v.substring(0, cursorPos);
//         var textAfter = v.substring(cursorPos, v.length);
//         tinymce.get('intent_bot_response_text_text').setContent(textBefore + " {/" + api_variable_name + "/} " + textAfter)
//         // CKEDITOR.instances['intent_bot_response_text_text'].setData(textBefore + " {/" + api_variable_name + "/} " + textAfter);
//     } else if (window.location.href.indexOf("/edit-tree/") != -1) {
//         $("#tree-bot-response-collapsible").collapsible("open");
//         var api_variable_name = this.id.split("-")[1];
//         var v = $('#tree_bot_response_text_text').val();
//         var cursorPos = $('#tree_bot_response_text_text').prop('selectionStart');
//         var textBefore = v.substring(0, cursorPos);
//         var textAfter = v.substring(cursorPos, v.length);
//         $('#tree_bot_response_text_text').val(textBefore + " {/" + api_variable_name + "/} " + textAfter);
//     }
// });

// $(document).on("keyup", "#api_variable_search", function(e) {
//     var user_search_variable = $("#api_variable_search").val();
//     user_search_variable = user_search_variable.toUpperCase()
//     $('.add-api-variable').each(function(e) {
//         var api_variable_name = $("#" + this.id).html();
//         if (api_variable_name.toUpperCase().indexOf(user_search_variable) > -1) {
//             $("#" + this.id).show();
//         } else {
//             $("#" + this.id).hide();
//         }
//     });
// });

$(document).on("click", ".btn-share-api", function (e) {
    var api_alias_name = this.id.split("-")[3];
    var user_id_list = $("#multiple-select-user-list").val();

    json_string = JSON.stringify({
        "api_alias_name": api_alias_name,
        "user_id_list": user_id_list
    });
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/api/share/",
        type: "POST",
        headers: {
            "X-CSRFToken": get_csrf_token()
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "API shared successfully."
                }, 2000);
            } else {
                M.toast({
                    "html": "Unable to share bot. Please try again later."
                }, 2000);
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        }
    });
});


function format_time(seconds) {
    var minutes, hours, time = '';
    if (seconds > 60) {
        minutes = parseInt(seconds / 60);
        seconds = seconds - (minutes * 60);

        if (minutes > 60) {
            hours = parseInt(minutes / 60);
            minutes = minutes - (hours * 60);

            time = hours + ' hr ';
        }

        time += minutes + ' min ';
    }

    time += seconds + ' sec ';

    return time;
}

function renderTestSentences() {

    $.ajax({
        url: '/chat/get-test-sentences/',
        type: 'POST',
        data: {},
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] != 200) {
                console.log("Report this error: test sentences are not rendering",)
                return;
            }

            intent_list = response['intent_list']
            sentence_list = response['sentence_list']
            is_active_list = response['is_active_list']
            test_sentence_pk_list = response['test_sentence_pk_list']

            var html_table = `

      <table id="test-cases-info-table" class="striped highlight responsive-table white" style="margin-top:2%;">
        <thead>
          <tr>
            <th>Sentence</th>
            <th>Correct Intent</th>
            <th>Active</th>
            <th>Delete</th>
          </tr>
        </thead>
        <tbody>`;

            for (var i = intent_list.length - 1; i >= 0; i--) {
                intent_name = intent_list[i]["name"];
                sentence = sentence_list[i]
                is_active =
                    `
                  <label>
                  <input type="checkbox" id='checkbox__` + test_sentence_pk_list[i] + `__` + sentence_list[i] + `'  checked='checked'  />
                  <span></span>
                  </label>
                `


                if (!is_active_list[i]) {
                    is_active =
                        `
                  <label>
                  <input type="checkbox" id='checkbox__` + test_sentence_pk_list[i] + `__` + sentence_list[i] + `'  />
                  <span></span>
                  </label>
                `
                }
                html_table += `<tr>
            <td>` + sentence + `</td>
            <td>` + intent_name + `</td>
            <td>` + is_active + `</td>
            <td>` + `

              <a href="#test_sentence_modal_` + i + `" class="modal-trigger btn-floating btn-medium waves-effect waves-light white"><i class="material-icons deep-purple-text">delete</i></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

            </td>
          </tr>
                    <!-- Modal Structure -->
          <div id="test_sentence_modal_` + i + `" class="modal">
            <div class="modal-content">
            <h4>Are you sure?</h4>
            <p>Selected Test Sentence will be deleted permanently?</p>
            </div>
            <div class="modal-footer">
            <a href="/chat/delete-test-sentence/` + test_sentence_pk_list[i] + `/` + sentence_list[i] + `" class="modal-close waves-effect waves-green btn-flat red darken-3 white-text">Agree</a>
            </div>
          </div>`
            }

            html_table += `</tbody>
      </table>`;

            $("#test-cases-table-container").html(html_table);
        },
        error: function (e) {

        }
    })

}

$(document).on("click", 'input[type="checkbox"]', function (e) {
    id = $(this).attr('id');
    if (id == undefined) {
        return;
    }
    if (id.split('__').length != 3) {
        return;
    }

    id_arr = id.split('__');
    test_sentence_pk = id_arr[1];
    sentence = id_arr[2]
    is_active = false

    if ($(this).prop("checked") == true) {
        is_active = true
    } else if ($(this).prop("checked") == false) { }
    var json_string = JSON.stringify({
        test_sentence_pk: test_sentence_pk,
        sentence: sentence,
        is_active: is_active,
    })
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/set-test-sentence-active/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                if (is_active) {
                    is_active = 'active';
                } else {
                    is_active = "not active"
                }
                M.toast({
                    "html": "Sentence is changed to " + is_active
                }, 2000);
            } else {
                M.toast({
                    "html": "Something went wrong. Please try again"
                }, 2000);
            }
        },
        error: function (e) { }
    });
});


if (window.location.pathname == "/chat/test-chatbot/") {

    renderTestSentences();
}

$(document).on("click", "#add_test_sentence", function (e) {
    e.preventDefault();
    var sentence = $("#sentence").val();
    var value = $("#selected_option option:selected").val()
    intent_pk = value.split('_')[1]
    if (sentence == "") {
        M.toast({
            'html': "Please enter the sentence"
        }, 2000);
        return
    }
    if (value == "") {
        M.toast({
            'html': "Please select the Intent"
        }, 2000);
        return
    }
    var json_string = JSON.stringify({
        sentence: sentence,
        intent_pk: intent_pk,
    })
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/add-test-sentence/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            // $('.indeterminate').hide();
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {
                M.toast({
                    'html': "Sentence added"
                }, 2000);
                window.location.reload()
            } else if (response['status'] == 300) {
                M.toast({
                    'html': response["message"]
                }, 2000);
            } else {
                M.toast({
                    'html': "Something went wrong"
                }, 2000);
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });

});


function loadTemplateSentences() {
    template_sentences_list = [];

    $.ajax({
        url: "/chat/training-sentence-templates/",
        type: "POST",
        data: {},
        success: function (response) {
            // $('.indeterminate').hide();
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {

                html = `<div class="input-field"  style="">
        <select id="selected_template_option" style="">
          <option value="" selected>Choose template</option>`;

                template_sentences_list = JSON.parse(response['sentence_list'])
                for (var i = 0; i < template_sentences_list.length; i++) {
                    html += `<option value="template_` + i + `">` + template_sentences_list[i][0][0] + `</option>`
                }

                html += `
        </select>
        </div>
      `
                $(html).appendTo($("#template_content"));
                //$('select').formSelect();
                $('#selected_template_option').on('change', function () {

                    var value = $("#selected_template_option option:selected").val()
                    if (value == "") {
                        $("#template-var-div").html("")
                        return
                    }
                    index = value.split('_')[1]
                    if (index == "") {
                        return
                    }
                    no_var_per_template = template_sentences_list[index][1]
                    temp_vars = ['X', 'Y', 'Z']
                    html = ""
                    for (var i = 0; i < no_var_per_template; i++) {
                        html +=
                            `<div class="input-field col s6">
            <input id="template_word_` + temp_vars[i] + `" type="text" class="validate">
            <label for="template_word">Enter the value of ` + temp_vars[i] + `</label>
          </div>`
                    }
                    $("#template-var-div").html(html)
                });
            } else if (response['status'] == 300) {
                M.toast({
                    'html': response["message"]
                }, 2000);
            } else {
                M.toast({
                    'html': "Something went wrong"
                }, 2000);
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });

}
$(document).on("click", "#add_training_sentences_btn", function (e) {
    e.preventDefault();
    var value = $("#selected_template_option option:selected").val()
    index = value.split('_')[1]
    if (index == "") {
        M.toast({
            'html': "Please select the Training Template"
        }, 2000);
        return
    }

    template_sentence_list = template_sentences_list[index][0]
    no_var_per_template = template_sentences_list[index][1]
    temp_vars = ['X', 'Y', 'Z']

    for (var i = 0; i < template_sentence_list.length; i++) {
        sentence_value = template_sentence_list[i]
        for (var j = 0; j < no_var_per_template; j++) {
            var word = $("#template_word_" + temp_vars[j]).val();
            if (word == "") {
                M.toast({
                    'html': "Please enter the word"
                }, 2000);
                return
            }
            sentence_value = sentence_value.replace(temp_vars[j], word)
        }
        addIntentTrainingDataIntoCollection(sentence_value);
        $("#add_enter_intent_training_data").val("");
    }
});

var upload_file_limit_size = 5120000
var uploaded_file = []
$(document).on("click", "#upload-bot-image", function (e) {
    e.preventDefault();
    var input_upload_image = ($("#input_upload_bot_image"))[0].files[0]

    if (input_upload_image == null || input_upload_image == undefined) {
        M.toast({
            "html": "Please select a file."
        }, 2000);

        setTimeout(function () {
            $('#modal-upload-bot-image').modal('open');
        }, 200);
        return false;
    }
    if (input_upload_image.size > upload_file_limit_size) {
        M.toast({
            "html": "Size limit exceed(should be less than 5 MB)."
        }, 2000);

        setTimeout(function () {
            $('#modal-upload-image').modal('open');
        }, 200);
        return;
    }

    if (check_malicious_file(input_upload_image.name) == true) {
        setTimeout(function () {
            $('#modal-upload-bot-image').modal('open');
        }, 200);
        return false;
    }

    var reader = new FileReader();
    reader.readAsDataURL(input_upload_image);
    reader.onload = function () {

        base64_str = reader.result.split(",")[1];

        uploaded_file = [];
        uploaded_file.push({
            "filename": input_upload_image.name,
            "base64_file": base64_str,
        });

        upload_bot_image();
    };

    reader.onerror = function (error) {
        console.log('Error: ', error);
    };
});

var upload_logo_file_limit_size = 200000
$(document).on("click", "#upload-bot-logo", function (e) {
    e.preventDefault();
    var input_upload_logo = ($("#input_upload_bot_logo"))[0].files[0]
    document.getElementById('upload-bot-logo').disabled = true;

    if (input_upload_logo == null || input_upload_logo == undefined) {
        M.toast({
            "html": "Please select a file."
        }, 2000);

        document.getElementById('bot-logo-file-size-warning').innerHTML = "Please select a file.";
        document.getElementById('upload-bot-logo').disabled = false;
        document.getElementById('input_upload_bot_logo2').value = "";
        document.getElementById('input_upload_bot_logo').value = "";
        return false;
    }
    if (input_upload_logo.size > upload_logo_file_limit_size) {
        M.toast({
            "html": "Your file size is greater than 200 KB. For best performance, please upload a logo having size < 200 KB."
        }, 2000);

        document.getElementById('bot-logo-file-size-warning').innerHTML = "Your file size is greater than 200 KB. For best performance, please upload a logo having size < 200 KB.";
        document.getElementById('upload-bot-logo').disabled = false;
        document.getElementById('input_upload_bot_logo2').value = "";
        document.getElementById('input_upload_bot_logo').value = "";
        return;
    }

    if (check_malicious_file(input_upload_logo.name) == true) {
        document.getElementById('bot-logo-file-size-warning').innerHTML = "Please select a valid file.";
        document.getElementById('upload-bot-logo').disabled = false;
        document.getElementById('input_upload_bot_logo2').value = "";
        document.getElementById('input_upload_bot_logo').value = "";
        return false;
    }

    var reader = new FileReader();
    reader.readAsDataURL(input_upload_logo);
    reader.onload = function () {

        base64_str = reader.result.split(",")[1];

        uploaded_file = [];
        uploaded_file.push({
            "filename": input_upload_logo.name,
            "base64_file": base64_str,
        });

        upload_bot_logo();
    };

    reader.onerror = function (error) {
        console.log('Error: ', error);
    };
});

async function upload_bot_image() {
    var response = await upload_image();

    if (response && response.status == 200) {
        src = window.location.origin + response.src
        var json_string = JSON.stringify({
            src: response.src,
            bot_id: window.location.href.split("=").pop(),
        })
        json_string = EncryptVariable(json_string);
        json_string = encodeURIComponent(json_string);
        var params = 'json_string=' + json_string
        $.ajax({
            url: "/chat/save-bot-image/",
            type: "POST",
            headers: {
                'X-CSRFToken': get_csrf_token()
            },
            data: params,
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response.status == 200) {
                    document.getElementById('input_upload_bot_image2').value = "";
                    M.toast({
                        "html": "Image Uploaded Successfully."
                    }, 2000)
                    window.location.reload();
                } else if(response.status == 401) {
                    M.toast({
                        "html": response.message
                    }, 2000)
                }
                else {
                    M.toast({
                        "html": "File format is Invalid"
                    }, 2000)
                }
            },
            error: function (xhr, textstatus, errorthrown) { }
        });
    }
}

async function upload_bot_logo() {
    var response = await upload_image();

    if (response && response.status == 200) {
        src = window.location.origin + response.src
        var json_string = JSON.stringify({
            src: response.src,
            bot_id: window.location.href.split("=").pop(),
        })
        json_string = EncryptVariable(json_string);
        json_string = encodeURIComponent(json_string);
        var params = 'json_string=' + json_string

        $.ajax({
            url: "/chat/save-bot-logo/",
            type: "POST",
            data: params,
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response.status == 200) {
                    document.getElementById('input_upload_bot_logo2').value = "";
                    M.toast({
                        "html": "Bot Logo Uploaded Successfully."
                    }, 2000)
                    document.getElementById('upload-bot-logo').disabled = false;
                    $('#modal-upload-bot-logo').modal('close');
                    window.location.reload();
                } else {
                    M.toast({
                        "html": "File format is Invalid"
                    }, 2000)
                    document.getElementById('bot-logo-file-size-warning').innerHTML = "File format is invalid.";
                    document.getElementById('upload-bot-logo').disabled = false;
                    document.getElementById('input_upload_bot_logo2').value = "";
                    document.getElementById('input_upload_bot_logo').value = "";
                }
            },
            error: function (xhr, textstatus, errorthrown) { }
        });
    }
}

function upload_file_card() {
    return new Promise(function (resolve, reject) {
        let csrf_token = $('input[name="csrfmiddlewaretoken"]').val();
        let json_string = JSON.stringify(uploaded_file)
        json_string = EncryptVariable(json_string)

        encrypted_data = {
            "Request": json_string
        }

        var params = JSON.stringify(encrypted_data);

        $.ajax({
            url: "/chat/upload-file-card/",
            type: "POST",
            contentType: "application/json",
            headers: {
                'X-CSRFToken': csrf_token
            },
            data: params,
            processData: false,
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response.status == 200) {
                    resolve(response);
                } else if (response.status == 300) {
                    M.toast({
                        "html": "File format is Invalid"
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Unable to upload your file. Please try again later."
                    }, 2000)
                }
            },
            error: function (xhr, textstatus, errorthrown) {
                console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
            }
        });
    })
}

function upload_image() {
    return new Promise(function (resolve, reject) {
        var csrf_token = $('input[name="csrfmiddlewaretoken"]').val();
        var json_string = JSON.stringify(uploaded_file)
        json_string = EncryptVariable(json_string)

        encrypted_data = {
            "Request": json_string
        }

        var params = JSON.stringify(encrypted_data);

        $.ajax({
            url: "/chat/upload-image/",
            type: "POST",
            contentType: "application/json",
            headers: {
                'X-CSRFToken': csrf_token
            },
            data: params,
            processData: false,
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response.status == 200) {
                    resolve(response);
                } else if (response.status == 300) {
                    $("#image_upload_failed span").text("File format is invalid")
                    $("#image_upload_failed").show()
                    setTimeout(function() {
                        $("#image_upload_failed").hide()
                    }, 3000)
                } else {
                    $("#image_upload_failed span").text("File not uploaded.")
                    $("#image_upload_failed").show()
                    setTimeout(function() {
                        $("#image_upload_failed").hide()
                    }, 3000)
                }
            },
            error: function (xhr, textstatus, errorthrown) {
                console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
            }
        });
    })
}

$(document).on("click", "#upload-bot-message-image", function (e) {
    e.preventDefault();
    var input_upload_image = ($("#input_upload_bot_message_image"))[0].files[0]

    if (input_upload_image == null || input_upload_image == undefined) {
        M.toast({
            "html": "Please select a file."
        }, 2000)

        setTimeout(function () {
            $('#modal-upload-message-image').modal('open');
        }, 200);
        return false;
    }
    if (input_upload_image.size > upload_file_limit_size) {
        M.toast({
            "html": "Size limit exceed(should be less than 5 MB)."
        }, 2000);

        setTimeout(function () {
            $('#modal-upload-image').modal('open');
        }, 200);
        return;
    }

    if (check_malicious_file(input_upload_image.name) == true) {
        setTimeout(function () {
            $('#modal-upload-message-image').modal('open');
        }, 200);
        return false;
    }

    var reader = new FileReader();
    reader.readAsDataURL(input_upload_image);
    reader.onload = function () {

        base64_str = reader.result.split(",")[1];

        uploaded_file = [];
        uploaded_file.push({
            "filename": input_upload_image.name,
            "base64_file": base64_str,
        });

        upload_message_image();
    };

    reader.onerror = function (error) {
        console.log('Error: ', error);
    };
});

async function upload_message_image() {
    var response = await upload_image();

    if (response && response.status == 200) {
        src = window.location.origin + response.src;

        var json_string = JSON.stringify({
            src: response.src,
            bot_id: window.location.href.split("=").pop(),
        })
        json_string = EncryptVariable(json_string);
        json_string = encodeURIComponent(json_string);
        var params = 'json_string=' + json_string

        $.ajax({
            url: "/chat/save-bot-message-image/",
            type: "POST",
            data: params,
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response.status == 200) {
                    document.getElementById('input_upload_bot_message_image2').value = "";
                    M.toast({
                        "html": "Image Uploaded Successfully."
                    }, 2000)
                    window.location.reload();
                } else {
                    M.toast({
                        "html": "File format is Invalid"
                    }, 2000)
                }
            },
            error: function (xhr, textstatus, errorthrown) { }
        });
    }
}


function showAnalyticsPreloader() {
    $("#div-analytics-preloader").show();
    $("#edit_bot_page").hide();
}

function hideAnalyticsPreloader() {
    $("#div-analytics-preloader").hide();
    $("#edit_bot_page").show();
}

$(document).on("click", "#move-to-prod-btn", function (e) {

    $("#move-to-prod-btn").attr("disabled", "disabled");
    // showAnalyticsPreloader();
    bot_id = window.location.pathname.split('/')[4];

    if (isNaN(bot_id)) {
        M.toast({
            "html": "Something went wrong. Please try again"
        });
        return;
    }
    var json_string = JSON.stringify({
        bot_id: bot_id
    })
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/move-bot-to-prod/",
        type: "POST",
        data: {
            json_string: json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Move to production has been started successfully. It may take a while"
                }, 2000);
            } else {
                M.toast({
                    "html": "Something went wrong"
                }, 2000);
            }
            // hideAnalyticsPreloader();
        },
        error: function (e) { }
    })

});

function see_deploy_links() {
    $("#domain_details").show();
    $("#deployment_url").hide();
    $("#stored_deploy_chatbot_link").show();
    $("#deploy_domain").hide();
    $("#create_deploy_links").show();
    $("#save_domain_details").hide();
}

function generate_deployment_url() {
    bot_id = get_url_vars()['id']
    server_url = window.location.origin;
    if (isNaN(bot_id)) {
        M.toast({
            "html": "Something went wrong. Please try again"
        });
        return;
    }
    var json_string = JSON.stringify({
        bot_id: bot_id,
        server_url: server_url
    })
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/deploy-chatbot/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                $("#file_path").val(`<script type="text/javascript" src="` + server_url + `/` + response['file_path'] + `"></script>`);
                $("#cjs_file_path").val(server_url + '/' + response['file_path'])
                $("#amp_file_path").val(`<a href="${server_url}/chat/index/?id=${response["bot_id"]}&name=uat&theme=null&easychat_window_location=&form_assist_id=&do_not_disturb=&is_lead_generation=false&lead_generation_intent_id=&page_category=&meta_data=&easychat_intent_name=&is_web_landing_allowed=false&campaign_link_query_id=INTENT_ID&selected_language=en&is_initial_trigger_intent=false&web_page_source=&query_question=INTENT_NAME&external_trigger_info=INTENT_INFO&is_voice_based_form_assist_enabled=false&is_amp_page_request=true&is_first_time_amp_user=true"><img id="allincall-popup" src="${server_url}/get-amp-bot-image/${response["bot_id"]}/" style="position: fixed; cursor: pointer; right: 20px; bottom: 0em; width: 8em; z-index: 2147483647;"></a>`)
            } else {
                M.toast({
                    "html": "Something went wrong"
                }, 2000);
            }
        },
        error: function (e) { }
    })
}

function create_new_deployment() {
    $("#stored_deploy_chatbot_link").hide()
    $("#deploy_domain").show()
    $("#create_deploy_links").hide()
    $("#save_domain_details").show()
}

function save_domain_details() {

    bot_id = get_url_vars()['id']
    if (isNaN(bot_id)) {
        M.toast({
            "html": "Something went wrong. Please try again"
        });
        return;
    }

    $("#domain_details").hide();

    domain_list = M.Chips.getInstance($('#domain_name')).chipsData;

    var whitelisted_domain = "";

    for (i = 0; i < domain_list.length; i++) {

        var provided_domain = domain_list[i]["tag"];
        try {
            provided_domain = new URL(provided_domain);
            provided_domain = provided_domain.host;
        } catch (err) { }

        whitelisted_domain += provided_domain + ",";
    }

    if ( domain_list == "" || domain_list == "undefined") {
        $("#domain_details").show();
        M.toast({
            "html": "Please enter valid domain list"
        }, 2000);
        return;
    }

    $("#preloader-deploy-bot").show();

    var json_string = JSON.stringify({
        whitelisted_domain: whitelisted_domain,
        bot_id: bot_id
    })

    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/save-deployment-request/",
        type: "POST",
        data: {
            "json_string": json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                generate_deployment_url()
                M.toast({
                    "html": "Added successfully"
                })
                $("#preloader-deploy-bot").hide();

                $("#deployment_url").show();

            } else {
                M.toast({
                    "html": "Some internal error!"
                }, 2000);
            }
        },
        error: function (e) {
            $("#preloader-deploy-bot").hide();

        }
    });

    // console.log(deployer_name);
    // console.log(domain_list);
}


function copyToClipboard(element_id, element) {
    /* Get the text field */
    var copyText = document.getElementById(element_id);
    var mac = navigator.userAgent.match(/Mac|ipad|ipod|iphone/i)
    // handle iOS as a special case
    if (!navigator.clipboard) {
        if (mac && mac.toString().trim() == "Mac") {
            // save current contentEditable/readOnly status
            var editable = copyText.contentEditable;
            var readOnly = copyText.readOnly;

            // convert to editable with readonly to stop iOS keyboard opening
            copyText.contentEditable = true;
            copyText.readOnly = true;

            // create a selectable range
            var range = document.createRange();
            range.selectNodeContents(copyText);

            // select the range
            var selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
            copyText.setSelectionRange(0, 999999);

            // restore contentEditable/readOnly to original state
            copyText.contentEditable = editable;
            copyText.readOnly = readOnly;
        } else {
            /* Select the text field */
            copyText.select();
        }
        /* Copy the text inside the text field */
        document.execCommand("copy");
    } else
        navigator.clipboard.writeText(copyText.value)

    element.style.setProperty('background-color', '#038456', 'important');
    element.style.setProperty('color', 'white', 'important');

    element.innerHTML = '<svg width="16" height="16" viewBox="0 0 20 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="margin-right: 10px;">\
                            <path d="M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM15 5L21 11V21C21 22.1 20.1 23 19 23H7.99C6.89 23 6 22.1 6 21L6.01 7C6.01 5.9 6.9 5 8 5H15ZM14 12H19.5L14 6.5V12Z" fill="white"/>\
                            </svg>Copied to clipboard'


    M.toast({
        "html": "Script/Link is copied"
    }, 2000);
    /* Alert the copied text */
}

function add_all_to_recommended_intents() {
    $(".recommended_intents_choice:visible").each(function () {
        x = $("#multiple-select-intent-choice-list option[value=" + $(this).val() + "]")
        $("#multiple-select-intent-choice-list option[value=" + $(this).val() + "]").remove()
        x.appendTo($("#multiple-select-intent-choice-list"))
        $("#multiple-select-intent-choice-list").trigger('change')

        selected_option_list = $('#multiple-select-intent-choice-list').val();
        selected_option_list.push($(this).val())
        $('#multiple-select-intent-choice-list').val(selected_option_list).trigger('change')

        $(this).hide()
    })
    $("#add-all-to-recomdtns-btn").hide()
}

function recommended_intents_mouse_click(intent_elmt) {
    x = $("#multiple-select-intent-choice-list option[value=" + intent_elmt.value + "]")
    $("#multiple-select-intent-choice-list option[value=" + intent_elmt.value + "]").remove()
    x.appendTo($("#multiple-select-intent-choice-list"))
    $("#multiple-select-intent-choice-list").trigger('change')

    selected_option_list = $('#multiple-select-intent-choice-list').val();
    selected_option_list.push(intent_elmt.value)
    $('#multiple-select-intent-choice-list').val(selected_option_list).trigger('change');


    intent_elmt.style.display = "none";
}

$('#multiple-select-intent-choice-list').on('change', function () {
    selected_option_list = $('#multiple-select-intent-choice-list').val();
    if ($(".recommended_intents_choice:visible").length > 0) {
        $("#add-all-to-recomdtns-btn").show()
    } else {
        $("#add-all-to-recomdtns-btn").hide()
    }
    recommended_intents_choice = document.getElementsByClassName("recommended_intents_choice")
    for (var j = 0; j < recommended_intents_choice.length; j++) {
        value = recommended_intents_choice[j].value;
        var is_match = false;
        for (var i = 0; i < selected_option_list.length; i++) {
            selected_option_pk = selected_option_list[i];
            if (String(value) == String(selected_option_pk)) {
                is_match = true;
                break;
            }
        }

        if (!is_match) {
            recommended_intents_choice[j].style.display = "inline-block";
        } else {
            recommended_intents_choice[j].style.display = "none";
        }
    }
    is_quick_recommendation_present = selected_option_list.length ? true : false;
    if(is_quick_recommendation_present || is_child_present || selected_widget != '') {
        $('#checkbox_faq_intent').prop('checked', false);
        $("#checkbox_faq_intent").attr("disabled", "disabled");
    } else {
        $("#checkbox_faq_intent").removeAttr("disabled", "disabled"); 
    }
});

var upload_file_limit_size = 5120000
$(document).on("click", "#upload-bot-welcome-image", function (e) {
    e.preventDefault();
    var input_upload_image = ($("#input_upload_image_bot_welcome_message"))[0].files[0]

    if (input_upload_image == null || input_upload_image == undefined) {
        M.toast({
            "html": "Please select a file."
        }, 2000);

        setTimeout(function () {
            $('#modal-upload-image').modal('open');
        }, 200);
        return false;
    }
    // if (input_upload_image.name.match(/\.(jpeg|jpg|gif|png|JPEG|JPG|GIF|PNG)$/) == null) {
    if (input_upload_image.name.match(/.+\.(jpg|jpeg|png|gif)$/i) == null) {
        M.toast({
            "html": "File format is not supported"
        }, 2000);
        setTimeout(function () {
            $('#modal-upload-image').modal('open');
        }, 200);
        return false;
    }
    if (input_upload_image.size > upload_file_limit_size) {
        M.toast({
            "html": "Size limit exceed(should be less than 5 MB)."
        }, 2000);

        setTimeout(function () {
            $('#modal-upload-image').modal('open');
        }, 200);
        return;
    }

    if (check_malicious_file(input_upload_image.name) == true) {
        setTimeout(function () {
            $('#modal-upload-image').modal('open');
        }, 200);
        return false;
    }

    document.getElementById("uploaded-bot-welcome-image").style.display = "none";
    try {
        $("#remove-bot-welcome-image").hide()
    } catch {
        $("#remove-bot-welcome-image").attr("disabled", true);
    }

    var reader = new FileReader();
    reader.readAsDataURL(input_upload_image);
    reader.onload = function () {

        base64_str = reader.result.split(",")[1];

        uploaded_file = [];
        uploaded_file.push({
            "filename": input_upload_image.name,
            "base64_file": base64_str,
        });

        upload_welcome_image();
    };

    reader.onerror = function (error) {
        console.log('Error: ', error);
    };
});

async function upload_welcome_image() {
    var response = await upload_image();

    if (response && response.status == 200) {
        src = response.src;
        compressed_src = response["compressed_image_path"]
        document.getElementById("uploaded-bot-welcome-image").src = src;
        document.getElementById("uploaded-bot-welcome-image").dataset.compressed_src = compressed_src;
        document.getElementById("uploaded-bot-welcome-image").style.display = "inline-block";
        document.getElementById('input_upload_image_bot_welcome_message2').value = "";
        document.getElementById('input_upload_image_bot_welcome_message').value = "";
        try {
            $("#remove-bot-welcome-image").show()
        } catch {
            $("#remove-bot-welcome-image").attr("disabled", false);
        }
    }
}

$(document).on("click", "#remove-bot-welcome-image", function (e) {
    document.getElementById("uploaded-bot-welcome-image").src = "";
    document.getElementById("uploaded-bot-welcome-image").style.display = "none";
    try {
        $("#remove-bot-welcome-image").hide()
    } catch {
        $("#remove-bot-welcome-image").attr("disabled", true);
    }
});

function check_file_extention() {
    var fileElement = document.getElementById("input-upload-files");
    var fileExtension = "";
    if (fileElement.value.lastIndexOf(".") > 0) {
        fileExtension = fileElement.value.substring(fileElement.value.lastIndexOf(".") + 1, fileElement.value.length);
    }

    if (fileExtension.toLowerCase() == "gif") {
        return true;
    } else if (fileExtension.toLowerCase() == "jpg") {
        return true;
    } else if (fileExtension.toLowerCase() == "jpeg") {
        return true;
    } else if (fileExtension.toLowerCase() == "png") {
        return true;
    } else if (fileExtension.toLowerCase() == "pdf") {
        return true;
    } else if (fileExtension.toLowerCase() == "doc") {
        return true;
    } else if (fileExtension.toLowerCase() == "docx") {
        return true;
    } else if (fileExtension.toLowerCase() == "ppt") {
        return true;
    } else if (fileExtension.toLowerCase() == "pptx") {
        return true;
    } else {
        return false;
    }

}

function upload_selected_files_at_drive() {

    var input_uploaded_files = ($("#input-upload-files"))[0].files;

    if (input_uploaded_files.length == 0) {
        M.toast({
            "html": "Please select at least one file to upload."
        }, 2000);
        return;
    }

    if (input_uploaded_files.length > 10) {
        M.toast({
            "html": "At max 10 files are allowed at a time."
        }, 2000);
        return;
    }

    for (var idx = 0; idx < input_uploaded_files.length; idx++) {
        if (check_malicious_file(input_uploaded_files[idx].name)) {
            return;
        }
    }

    file_check = check_file_extention()
    if (file_check == false) {
        M.toast({
            "html": "You can only upload Images, PPTs, Docs, PDFs into EasyChat Drive."
        }, 2000);
        return;
    }

    var formData = new FormData();
    $.each(input_uploaded_files, function (i, file) {
        formData.append("file", file);
    });

    $("#easychat-drive-files-preloader").show();
    $.ajax({
        url: "/chat/upload-files-into-drive/",
        type: "POST",
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
            $("#easychat-drive-files-preloader").hide();
            if (response["status"] == 200) {
                $("#modal-upload-files").modal('close');
                M.toast({
                    "html": "Files Uploaded Successfully!"
                }, 2000);

                setTimeout(function () {
                    window.location.reload();
                }, 1000);
            } else if (response["status"] == 300) {
                M.toast({
                    "html": "Unable to upload files. File format not supported. Please do not use .(dot) in filename except for extension."
                }, 2000);
            } else if (response["status"] == 302) {
                M.toast({
                    "html": response["message"]
                }, 2000);
            } else {
                M.toast({
                    "html": "Unable to upload the files!"
                }, 2000);
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            M.toast({
                "html": "Unable to upload the files! Please check your internet"
            }, 2000);
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
            $("#easychat-drive-files-preloader").hide();
        }
    });
}

function show_intent_upload_button() {
    is_checked = false;
    easychat_drive_file_checkboxes = document.getElementsByClassName("checkbox-easychat-drive-file");
    for (var i = 0; i < easychat_drive_file_checkboxes.length; i++) {
        id = easychat_drive_file_checkboxes[i].id;
        if (document.getElementById(id).checked) {
            is_checked = true;
            break;
        }
    }

    if (is_checked) {
        $("#btn-delete-file-from-drive").show();
        $("#btn-add-files-to-bot").show();
    } else {
        $("#btn-delete-file-from-drive").hide();
        $("#btn-add-files-to-bot").hide();
    }
}

function show_intent_selection_button() {
    is_checked = false;
    easychat_drive_file_checkboxes = document.getElementsByClassName("checkbox-easychat-drive-file");
    for (var i = 0; i < easychat_drive_file_checkboxes.length; i++) {
        id = easychat_drive_file_checkboxes[i].id;
        if (document.getElementById(id).checked) {
            is_checked = true;
            break;
        }
    }

    if (is_checked && ($("#selected-Bot-for-insert-file").val()) != "None") {
        $("#intent-select").show();

        bot_id = $("#selected-Bot-for-insert-file").val();
        var json_string = JSON.stringify({
            bot_id: bot_id
        })
        json_string = EncryptVariable(json_string);

        $.ajax({
            url: "/chat/get-intent-list-drive/",
            type: "POST",
            data: {
                json_string: json_string,
                // "user_id": user_id
            },
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                intent_list = response["intent_objs"];
                var intent_html = `<option value="None">Choose intent from following list</option>`;
                for (i = 0; i < intent_list.length; i++) {

                    intent_html += `<option value="` + intent_list[i]["pk"] + `">` + intent_list[i]["name"] + ` </option>`;
                }

                document.getElementById("selected-intent-for-insert-file").innerHTML = intent_html;
                document.getElementById("jstree-drive-data").innerHTML = "";
                $("#selected-intent-for-insert-file").select2({
                    dropdownParent: $("#modal-add-to-bot"),
                    width: "100%",
                });

            },
            error: function (jqXHR, exception) { },
        });

    } else {
        $("#btn-add-files-to-intent").hide();
    }
}

function delete_selected_files_from_drive() {

    file_id_list = [];
    easychat_drive_file_checkboxes = document.getElementsByClassName("checkbox-easychat-drive-file");
    for (var i = 0; i < easychat_drive_file_checkboxes.length; i++) {
        id = easychat_drive_file_checkboxes[i].id;
        if (document.getElementById(id).checked) {
            count_id = id.split("-")[4];
            file_id_list.push(count_id);
        }
    }

    if (file_id_list.length == 0) {
        return;
    }

    json_string = JSON.stringify({
        "file_id_list": file_id_list
    });
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/delete-files-drive/",
        type: "POST",
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Files removed from drive successfully."
                }, 2000);
                setTimeout(function () {
                    window.location.reload();
                }, 1000);
            } else {
                M.toast({
                    "html": "Unable to delete files from the drive."
                }, 2000);
            }
        },
        error: function (jqXHR, exception) { },
    });
}


function search_files_into_drive() {
    var query_value = $("#easychat_drive_search").val();
    easychat_drive_images_name = document.getElementsByClassName("file-name-collection");

    for (var i = 0; i < easychat_drive_images_name.length; i++) {
        id = easychat_drive_images_name[i].id;
        image_count_id = id.split("-")[2];
        document.getElementById("easychat-drive-file-card-container-" + image_count_id).style.display = "block";
    }

    for (var i = 0; i < easychat_drive_images_name.length; i++) {
        id = easychat_drive_images_name[i].id;
        image_count_id = id.split("-")[2];
        media_name = document.getElementById("file-name-" + image_count_id).innerHTML;
        if (media_name.toUpperCase().indexOf(query_value.toUpperCase()) != -1) {
            document.getElementById("easychat-drive-file-card-container-" + image_count_id).style.display = "block";
        } else {
            document.getElementById("easychat-drive-file-card-container-" + image_count_id).style.display = "none";
        }
    }
}

var selected_drive_image_intent_pk = null;
var selected_drive_image_tree_pk = null;
var selected_drive_image_parent_pk = null;

function set_selected_drive_image_for_insert(tree_pk, parent_pk, intent_pk) {
    selected_drive_image_intent_pk = intent_pk;
    selected_drive_image_tree_pk = tree_pk;
    selected_drive_image_parent_pk = parent_pk;
}

function reset_select_to_default(select_element_id) {
    $("#" + select_element_id + " option").prop("selected", function () {
        return this.defaultSelected;
    });
}

function insert_selected_files_into_intent() {

    if (selected_drive_image_tree_pk == null || selected_drive_image_parent_pk == null || selected_drive_image_intent_pk == null) {
        M.toast({
            "html": "Kindly select valid intent or child intent for media file insertion!"
        }, 2000);
        return;
    }

    file_id_list = [];
    easychat_drive_file_checkboxes = document.getElementsByClassName("checkbox-easychat-drive-file");
    for (var i = 0; i < easychat_drive_file_checkboxes.length; i++) {
        id = easychat_drive_file_checkboxes[i].id;
        if (document.getElementById(id).checked) {
            count_id = id.split("-")[4];
            file_id_list.push(count_id);
        }
    }

    if (file_id_list.length == 0) {
        return;
    }

    json_string = JSON.stringify({
        "intent_id": selected_drive_image_intent_pk,
        "tree_id": selected_drive_image_tree_pk,
        "parent_id": selected_drive_image_parent_pk,
        "file_id_list": file_id_list
    });
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/insert-files-intent/",
        type: "POST",
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Files added successfully!"
                }, 2000);
            } else {
                M.toast({
                    "html": "Unable to insert images into selected intent!"
                }, 2000);
            }
            $("#modal-add-to-bot").modal("close");
            reset_select_to_default("selected-Bot-for-insert-file");
            $("#intent-select").hide();
        },
        error: function (jqXHR, exception) {
            console.log(jqXHR, exception);
            $("#modal-add-to-intent").modal("close");
        }
    });

    selected_drive_image_intent_pk = null;
    selected_drive_image_tree_pk = null;
    selected_drive_image_parent_pk = null;
}


function renderRecursiveTreeStructureIntoDrive(subtree, intent_pk, parent_pk) {
    var tree_name = subtree["tree_name"]
    tree_name = tree_name.replace(/<\/?("[^"]*"|'[^']*'|[^>])*(>|$)/g, "");
    var tree_pk = subtree["tree_pk"]
    var key = intent_pk + "_" + parent_pk + "_" + tree_pk

    html = `
    <ul>
      <li>
      <span id="` + key + `">
        <a href="javascript:void(0)" class="black-text" onclick="set_selected_drive_image_for_insert('` + tree_pk + `', '` + parent_pk + `', '` + intent_pk + `')">
        <span id="` + key + `_tree_name_container" value="` + tree_name + `">
          &nbsp;&nbsp;
          ` + tree_name + `
        </span>
        </a>
      </span>`;

    if (!isDictEmpty(subtree["subtree"])) {
        for (var key in subtree["subtree"]) {
            html += renderRecursiveTreeStructureIntoDrive(subtree["subtree"][key], intent_pk, tree_pk);
        }
    }

    html += `</li></ul>`;

    return html;
}

function renderTreeStructureIntoDrive(response, intent_pk) {
    tree_html = renderRecursiveTreeStructureIntoDrive(response["1"], intent_pk, -1);

    $("#easychat-drive-modal-render-tree-structure-container").empty();
    document.getElementById("easychat-drive-modal-render-tree-structure-container").innerHTML = '<div id="jstree-drive-data"></div>';

    $("#jstree-drive-data").empty();
    $("#jstree-drive-data").html(tree_html);
    $('#jstree-drive-data').jstree({
        "core": {
            "themes": {
                "icons": false
            }
        }
    });
    // $("#jstree-drive-data").on("activate_node.jstree", function(e,data){
    //    var href = data.node.text.match(/href="([^"]*)/)[1];
    //    href = href.replace(/amp;/gi, '');
    //    window.location.href = href;
    // });
    $("#jstree-drive-data").jstree("open_all");
}


function show_intent_tree_structure() {
    selected_intent_pk = $("#selected-intent-for-insert-file").val();

    if (selected_intent_pk == "None") {
        M.toast({
            "html": "Please select valid intent."
        }, 2000);
        return;
    }

    response = fetchIntentTreeStructureByIntentID(selected_intent_pk);
    renderTreeStructureIntoDrive(response, selected_intent_pk);
}

// if(window.location.pathname.indexOf("/chat/message-history")!=-1){
//   $(document).ready(function(){
//       $('#message-history-info-table').DataTable({
//           "bPaginate": false
//       });
//   });
// }

// if(window.location.pathname.indexOf("/chat/mis-dashboard")!=-1){
//   $(document).ready(function(){
//       $('#mis-dashboard-info-table').DataTable({
//           "bPaginate": false
//       });
//   });
// }

if (window.location.pathname.indexOf("/chat/easychat-drive") != -1) {
    $(document).ready(function () {
        $('#easychat-drive-file-table').DataTable({
            "bPaginate": false,
            "ordering": false,
        });
    });
}

function validateEmail(emailField) {
    const reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/
    if (reg.test(emailField.value) == false) {
        return false;
    }
    return true;
}

function validateEmailAddr(emailAddress) {
    const reg = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,4})$/
    if (reg.test(emailAddress) == false) {
        return false;
    }
    return true;
}

$(document).on("click", "#get_data_collect_link", function (e) {
    data_bot_id = $("#select-data-entry-bot").val();
    if (data_bot_id != "None") {
        $("#data-entry-link-input").val(location.origin + "/bot-data-collect/?id=" + data_bot_id)
        $('.modal').modal();
        $("#data-entry-link-modal").modal('open')
    } else {
        alert("Please Select Bot ")
    }
});
$(document).on("click", "#data-collect-entry-delete-selected", function (e) {
    $(".delete_data_collect_entry").attr("id", "none")
    $('.modal').modal();
    $("#delete_data_collect_entry-modal").modal('open')
});

$(document).on("click", ".delete_data_collect_entry", function (e) {
    if ($(this).attr("id") == "none") {
        elements = $(".modify-data-collect-entry-checkbox:checked")
        entry_selected = ""
        for (var i = 0; i < elements.length; i++) {
            entry_selected = entry_selected + "," + elements[i].id.replace("modify-data-collect-entry-checkbox-", "")
        }
        if (entry_selected != "") {
            delete_data_entry_by_id(entry_selected)
        }
    } else {
        entry_selected = $(this).attr("id").replace("delete_entry_pk_", "");
        delete_data_entry_by_id(entry_selected)
    }

});

function delete_data_entry_by_id(entry_id) {

    var json_string = JSON.stringify({
        date_entry_pk: entry_id
    })
    json_string = EncryptVariable(json_string);

    var response = $.ajax({
        url: '/delete-data-collect/',
        type: "POST",
        async: false,
        data: {
            json_string: json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                alert("Entry Deleted!", 2000);
                window.location.reload();
            } else {
                alert("Error", 2000);;
            }
        }
    }).responseJSON;

    return response;
}

$(document).on("click", "#download_excel_data_collect", function (e) {
    data_bot_id = $("#select-data-entry-bot").val();
    var json_string = JSON.stringify({
        bot_id: data_bot_id
    })
    json_string = EncryptVariable(json_string);

    var response = $.ajax({
        url: '/download-excel-data-collect/',
        type: "POST",
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                console.log(response)
                var file_url = response["file_url"];
                window.open(file_url)
            } else { }
        }
    }).responseJSON;

});


$(document).on("click", ".delete_data_entry", function (e) {
    data_entry_id = ($(this).attr('id')).replace("entry_", "");
    $(".delete_data_collect_entry").attr("id", "delete_entry_pk_" + data_entry_id)
    $('.modal').modal();

    $("#delete_data_collect_entry-modal").modal('open')
});


$(document).on("click", ".add-data-entry-to-intent", function (e) {
    data_entry_id = ($(this).attr('id')).replace("add-data-entry-to-intent-pk-", "");
    entry_qstn = $("#entry_id_pk_" + data_entry_id).html()
    $("#selected_entry_qstn").html(entry_qstn)
    $('.modal').modal();
    $("#add_to_intent_data_collect_entry-modal").modal('open')
});

$(document).on("click", ".add-training-qstn-to-intent-data-entry", function (e) {
    selected_intent = $("#select-add-to-intent").val();

    if (selected_intent == null || selected_intent == undefined || selected_intent == "") {
        M.toast({
            "html": "Please select Intent."
        }, 2000);
        return;
    }

    selected = $("#selected_entry_qstn").html().replace(RegExp("<br>", 'g'), ",")

    window.open("/chat/edit-intent/?val=" + selected + "&intent_pk=" + selected_intent, '_blank')

});

$("#modify-data-collect-entry-select-all-checkbox").change(function (e) {
    var status = document.getElementById("modify-data-collect-entry-select-all-checkbox").checked;
    var inputs = document.getElementsByTagName("input");
    for (var i = 0; i < inputs.length; i++) {
        if (inputs[i].id.indexOf('modify-data-collect-entry-checkbox-') == 0) {
            data_id = inputs[i].id;
            document.getElementById(data_id).checked = status;
        }
    }
});

$("#modify-data-collect-entry-select-all-checkbox,.modify-data-collect-entry-checkbox").change(function (e) {
    if ($(".modify-data-collect-entry-checkbox:checked").length > 1) {
        $("#data-collect-entry-delete-selected").show();
        $("#data-collect-entry-add-to-intent-selected").show();
        $(".entry-options").hide();
    } else {
        $("#data-collect-entry-delete-selected").hide();
        $("#data-collect-entry-add-to-intent-selected").hide();
        $(".entry-options").show();
    }
});


$(document).on("click", "#data-collect-entry-add-to-intent-selected", function (e) {
    elements = $(".modify-data-collect-entry-checkbox:checked")
    entry_qstn = ""
    for (var i = 0; i < elements.length; i++) {
        entry_qstn = entry_qstn + $("#entry_id_pk_" + elements[i].id.replace("modify-data-collect-entry-checkbox-", "")).html()
        if (i != elements.length - 1) {
            entry_qstn = entry_qstn + "<br>"
        }
    }
    $("#selected_entry_qstn").html(entry_qstn)
    $('.modal').modal();
    $("#add_to_intent_data_collect_entry-modal").modal('open')
});

$('.add-input-to-form').click(function () {
    div_cnt = $(".data-entry-form-div").length + 1
    html_string = `<div class="row data-entry-form-div" id="data-entry-form-div-` + div_cnt + `" style="border: 1px solid black;padding: 1em 0;position: relative;">`
    html_string += `<span class="close-div" id="delete-div-` + div_cnt + `"><i class="material-icons">delete</i></span>`
    html_string += `<div class="input-field col s4" style="margin: 0">`
    html_string += `  <input id="data-entry-input-name-` + div_cnt + `" type="text">`
    html_string += ` <label for="data-entry-input-name-` + div_cnt + `">Input Name</label>
      </div>
      <div class="input-field col s3" style="margin: 0; margin-top: 1rem">`
    html_string += `<select class="select-data-entry-input-type" id="select-data-entry-input-type-` + div_cnt + `">`
    html_string += `<option value="None">---Choose Input Type---</option>`
    html_string += `<option value="data-entry-form-input-text">Text Field</option>`
    html_string += `<option value="data-entry-form-input-number">Number Field</option>
        <option value="data-entry-form-input-dropdown">DropDown</option>
      </select>
      </div>
      <div class="input-field col s2" style="margin: 0">
      <label>`
    html_string += `<input type="checkbox" id="data-entry-input-necessary-` + div_cnt + `"/>`
    html_string += `<span>Mandatory field</span>
      </label>
      </div>
      <div class="input-field col s12" id = "data-entry-dropdown-options-div-` + div_cnt + `"style="display:none">
      <input id="data-entry-dropdown-options-` + div_cnt + `" type="text">
      <label for="data-entry-dropdown-options-` + div_cnt + `">Dropdown options (Saparated by comma(,))</label>
      </div>`
    html_string += `</div>`
    $('.data-entry-form-modal-content').append(html_string)
    $('select:not(.non-select2)').select2({
        width: "100%"
    });
    M.updateTextFields();

})

$(document).on("click", ".close-div", function (e) {
    div_id = ($(this).attr("id")).split("-")[2]
    $("#data-entry-form-div-" + div_id).remove()
});

$(document).on("change", ".select-data-entry-input-type", function (e) {
    div_id = ($(this).attr("id")).split("-")[5]
    if ($(this).val() == "data-entry-form-input-dropdown") {
        $("#data-entry-dropdown-options-div-" + div_id).show()
    } else {
        $("#data-entry-dropdown-options-div-" + div_id).hide()
    }
});


$(document).on("click", "#data-entry-form-data-save", function (e) {
    data_entry_form_info_list = []
    for (var i = 0; i < $('.data-entry-form-div').length; i++) {
        token_id = $('.data-entry-form-div')[i].id.split("-")[4]
        input_name = $.trim($("#data-entry-input-name-" + token_id).val())
        input_type = $.trim($("#select-data-entry-input-type-" + token_id).val())
        input_is_necessary = $("#data-entry-input-necessary-" + token_id).is(':checked')
        dropdown_options = $.trim($("#data-entry-dropdown-options-" + token_id).val())
        if (input_name == "" && input_type == "None") {
            continue
        }
        if (input_name != "" && input_type != "None") {
            if (input_type == "data-entry-form-input-dropdown") {
                if (dropdown_options == "") {
                    alert("Please Provide Dropdown Options")
                    return
                }
                dropdown_options = dropdown_options.split(",")
            } else {
                dropdown_options = []
            }
            data_entry_form_info_list.push({
                "input_name": input_name,
                "input_type": input_type,
                "input_is_necessary": input_is_necessary,
                "dropdown_options": dropdown_options
            })
        } else {
            alert("Please Provide Input Name/ Input Type")
            return
        }
    }
    bot_pk = $("#select-data-entry-bot").val();
    json_string = JSON.stringify({
        bot_pk: bot_pk,
        form_ui_data: data_entry_form_info_list,
    });
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: '/save-data-collect-form-ui-data/',
        type: "POST",
        data: {
            json_string: json_string
        },
        dataType: "json",
        async: false,
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {
                M.toast({
                    'html': "Form saved successfully!"
                }, 2000);
                window.location.reload();
            } else {
                M.toast({
                    'html': "Unable to save the Form!"
                }, 2000);
            }
        }
    });
});

function getCsrfToken() {
    var CSRF_TOKEN = $('input[name="csrfmiddlewaretoken"]').val();
    return CSRF_TOKEN;
}

function showToast(message, duration) {
    M.toast({
        "html": message,
        classes: 'rounded'
    }, duration);
}


function delete_query_filter_option() {
    div = document.getElementById("query-div");
    div.parentNode.removeChild(div);
    document.getElementById("select-message-answer-filter").value = ""
    $('#select-message-answer-filter').trigger('change');
}

function delete_feedback_filter_option() {
    div = document.getElementById("feedback-div");
    div.parentNode.removeChild(div);
    document.getElementById("select-message-feedback-filter").value = ""
    $('#select-message-feedback-filter').trigger('change');
}

function delete_channels_filter_option() {
    div = document.getElementById("channels-div");
    div.parentNode.removeChild(div);
    document.getElementById("select-message-channels-filter").value = ""
    $('#select-message-channels-filter').trigger('change');
}

function delete_sentiment_filter_option() {
    div = document.getElementById("sentiment-div");
    div.parentNode.removeChild(div);
    document.getElementById("select-message-sentiment-filter").value = ""
    $('#select-message-sentiment-filter').trigger('change');
}

function delete_timestamp_filter_option() {
    div = document.getElementById("timestamp-div");
    div.parentNode.removeChild(div);
    document.getElementById("select-message-timestamp-filter").value = ""
}

function delete_location_city_filter_option() {
    div = document.getElementById("location-city-div");
    div.parentNode.removeChild(div);
    document.getElementById("select-message-location-city-filter").value = ""
    $('#select-message-location-city-filter').trigger('change');
}

function delete_location_state_filter_option() {
    div = document.getElementById("location-state-div");
    div.parentNode.removeChild(div);
    document.getElementById("select-message-location-state-filter").value = ""
    $('#select-message-location-state-filter').trigger('change');
}

function delete_location_pincode_filter_option() {
    div = document.getElementById("location-pincode-div");
    div.parentNode.removeChild(div);
    document.getElementById("select-message-location-pincode-filter").value = ""
    $('#select-message-location-pincode-filter').trigger('change');
}

function add_filter_option() {
    var value = document.getElementById("check-filter-select").value;
    var location_option = document.getElementById("select-message-location-filter").value;
    if (value == "") {
        showToast("Kindly select a valid filter", 2000);
        return;
    }
    if (value == "1") {
        query_value = document.getElementById("select-message-answer-filter").value;
        if (query_value == "1") {
            query_value = "All Queries"
        } else if (query_value == "2") {
            query_value = "Unanswered Queries"
        } else if (query_value == "3") {
            query_value = "Answered Queries"
        }
        var flag = false;
        try {
            val = document.getElementById("add-query-key").value
            flag = false
        } catch {
            flag = true
        }
        if (flag == true) {
            if (value != "" && query_value != "") {
                html = '<div class="row" id="query-div" style="margin-top: 1.5em;"><div class="col s4">'
                html += '<input id="add-query-key" value="Filter by queries" disabled>'
                html += '</div>'
                html += '<div class="col s4">'
                html += '<input id="add-query-value" value="' + query_value + '" disabled>'
                html += '</div><a class="red-text text-darken-3" onclick="delete_query_filter_option()"><i class="material-icons">delete</i></a></div>'
                div_html = document.getElementById("add-filter-buttons")
                div_html.insertAdjacentHTML('beforeend', html);
            } else {
                showToast("Kindly select a valid filter", 2000);
                return;
            }
        } else {
            showToast("This filter is already present.", 2000);
            return;
        }
    } else if (value == "2") {
        feedback_value = document.getElementById("select-message-feedback-filter").value;
        if (feedback_value == "") {
            showToast("Kindly select a valid filter", 2000);
            return;
        }
        if (feedback_value == "1") {
            feedback_value = "No Feedback"
        } else if (feedback_value == "2") {
            feedback_value = "Positive Feedback"
        } else if (feedback_value == "3") {
            feedback_value = "Negative Feedback"
        }
        var flag = false;
        try {
            val = document.getElementById("add-feedback-key").value
            flag = false
        } catch {
            flag = true
        }
        if (flag == true) {
            if (value != "" && feedback_value != "") {
                html = '<div class="row" id="feedback-div" style="margin-top: 1.5em;"><div class="col s4">'
                html += '<input id="add-feedback-key" value="Filter by feedback" disabled>'
                html += '</div>'
                html += '<div class="col s4">'
                html += '<input id="add-feedback-value" value= " ' + feedback_value + ' " disabled>'
                html += '</div><a class="red-text text-darken-3" onclick="delete_feedback_filter_option()"><i class="material-icons">delete</i></a></div>'
                div_html = document.getElementById("add-filter-buttons")
                div_html.insertAdjacentHTML('beforeend', html);
            } else {
                showToast("Kindly select a valid filter.", 2000);
                return;
            }
        } else {
            showToast("This filter is already present.", 2000);
            return;
        }
    } else if (value == "3") {
        channel_value = document.getElementById("select-message-channels-filter").value;
        if (channel_value == "") {
            showToast("Kindly select a valid filter", 2000);
            return;
        }
        if (channel_value == "1") {
            channel_value = "Web"
        } else if (channel_value == "2") {
            channel_value = "WhatsApp"
        } else if (channel_value == "3") {
            channel_value = "GoogleHome"
        } else if (channel_value == "4") {
            channel_value = "Alexa"
        } else if (channel_value == "5") {
            channel_value = "Android"
        } 
        var flag = false;
        try {
            val = document.getElementById("add-channels-key").value
            flag = false
        } catch {
            flag = true
        }
        if (flag == true) {
            if (value != "" && channel_value != "") {
                html = '<div class="row" id="channels-div" style="margin-top: 1.5em;"><div class="col s4">'
                html += '<input id="add-channels-key" value="Filter by Channel" disabled>'
                html += '</div>'
                html += '<div class="col s4">'
                html += '<input id="add-channels-value" value= " ' + channel_value + ' " disabled>'
                html += '</div><a class="red-text text-darken-3" onclick="delete_channels_filter_option()"><i class="material-icons">delete</i></a></div>'
                div_html = document.getElementById("add-filter-buttons")
                div_html.insertAdjacentHTML('beforeend', html);
            } else {
                showToast("Kindly select a valid filter.", 2000);
                return;
            }
        } else {
            showToast("This filter is already present.", 2000);
            return;
        }
    } else if (value == "4") {
        sentiment_value = document.getElementById("select-message-sentiment-filter").value;
        if (sentiment_value == "") {
            showToast("Kindly select a valid filter", 2000);
            return;
        }
        var flag = false;
        try {
            val = document.getElementById("add-sentiment-key").value
            flag = false
        } catch {
            flag = true
        }
        if (flag == true) {
            if (value != "" && sentiment_value != "") {
                html = '<div class="row" id="sentiment-div" style="margin-top: 1.5em;"><div class="col s4">'
                html += '<input id="add-sentiment-key" value="Filter by Sentiment" disabled>'
                html += '</div>'
                html += '<div class="col s4">'
                html += '<input id="add-sentiment-value" value= " ' + sentiment_value + ' " disabled>'
                html += '</div><a class="red-text text-darken-3" onclick="delete_sentiment_filter_option()"><i class="material-icons">delete</i></a></div>'
                div_html = document.getElementById("add-filter-buttons")
                div_html.insertAdjacentHTML('beforeend', html);
            } else {
                showToast("Kindly select a valid filter.", 2000);
                return;
            }
        } else {
            showToast("This filter is already present.", 2000);
            return;
        }
    } else if (value == "5") {
        timestamp_date_value = document.getElementById("timestamp-date").value;
        if (timestamp_date_value == "") {
            showToast("Kindly enter a valid date.", 2000);
            return;
        }
        timestamp_start_time = document.getElementById("timestamp-start-time").value;
        if (timestamp_start_time == "") {
            showToast("Kindly enter a valid time.", 2000);
            return;
        }
        timestamp_end_time = document.getElementById("timestamp-end-time").value;
        if (timestamp_end_time == "") {
            showToast("Kindly enter a valid time.", 2000);
            return;
        }

        if (timestamp_start_time > timestamp_end_time) {
            showToast("Start time should be less than end time.", 2000);
            return;
        }
        var flag = false;
        try {
            val = document.getElementById("add-timestamp-key").value
            flag = false
        } catch {
            flag = true
        }
        if (flag == true) {
            if (value != "" && timestamp_date_value != "" && timestamp_start_time != "" && timestamp_end_time != "") {
                html = '<div class="row" id="timestamp-div" style="margin-top: 1.5em;"><div class="col s4">'
                html += '<input id="add-timestamp-key" value="Filter by Timestamp" disabled>'
                html += '</div>'
                html += '<div class="col s4">'
                timestamp_date_value = change_date_format(timestamp_date_value)
                html += '<input id="add-timestamp-value" value= " ' + timestamp_date_value + ' " disabled>'
                html += '<input id="add-timestamp-value" value= " ' + timestamp_start_time + ' " disabled>'
                html += '<input id="add-timestamp-value" value= " ' + timestamp_end_time + ' " disabled>'
                html += '</div><a class="red-text text-darken-3" onclick="delete_timestamp_filter_option()"><i class="material-icons">delete</i></a></div>'
                div_html = document.getElementById("add-filter-buttons")
                div_html.insertAdjacentHTML('beforeend', html);
            } else {
                showToast("Kindly select a valid filter.", 2000);
                return;
            }
        } else {
            showToast("This filter is already present.", 2000);
            return;
        }
    } else if (value == "6" && location_option == "") {
        showToast("Kindly select a valid filter", 2000);
        return;
    } else if (value == "6" && location_option == "1") {
        location_city_value = document.getElementById("select-message-location-city-filter").value;
        if (location_city_value == "") {
            showToast("Kindly select a valid filter", 2000);
            return;
        }
        var flag = false;
        try {
            val = document.getElementById("add-location-city-key").value
            flag = false
        } catch {
            flag = true
        }
        if (flag == true) {
            if (value != "" && location_city_value != "") {
                html = '<div class="row" id="location-city-div" style="margin-top: 1.5em;"><div class="col s4">'
                html += '<input id="add-location-city-key" value="Filter by City" disabled>'
                html += '</div>'
                html += '<div class="col s4">'
                html += '<input id="add-location-city-value" value= " ' + location_city_value + ' " disabled>'
                html += '</div><a class="red-text text-darken-3" onclick="delete_location_city_filter_option()"><i class="material-icons">delete</i></a></div>'
                div_html = document.getElementById("add-filter-buttons")
                div_html.insertAdjacentHTML('beforeend', html);
            } else {
                showToast("Kindly select a valid filter.", 2000);
                return;
            }
        } else {
            showToast("This filter is already present.", 2000);
            return;
        }
    } else if (value == "6" && location_option == "2") {
        location_state_value = document.getElementById("select-message-location-state-filter").value;
        if (location_state_value == "") {
            showToast("Kindly select a valid filter", 2000);
            return;
        }
        var flag = false;
        try {
            val = document.getElementById("add-location-state-key").value
            flag = false
        } catch {
            flag = true
        }
        if (flag == true) {
            if (value != "" && location_state_value != "") {
                html = '<div class="row" id="location-state-div" style="margin-top: 1.5em;"><div class="col s4">'
                html += '<input id="add-location-state-key" value="Filter by State" disabled>'
                html += '</div>'
                html += '<div class="col s4">'
                html += '<input id="add-location-state-value" value= " ' + location_state_value + ' " disabled>'
                html += '</div><a class="red-text text-darken-3" onclick="delete_location_state_filter_option()"><i class="material-icons">delete</i></a></div>'
                div_html = document.getElementById("add-filter-buttons")
                div_html.insertAdjacentHTML('beforeend', html);
            } else {
                showToast("Kindly select a valid filter.", 2000);
                return;
            }
        } else {
            showToast("This filter is already present.", 2000);
            return;
        }
    } else if (value == "6" && location_option == "3") {
        location_pincode_value = document.getElementById("select-message-location-pincode-filter").value;
        if (location_pincode_value == "") {
            showToast("Kindly select a valid filter", 2000);
            return;
        }
        var flag = false;
        try {
            val = document.getElementById("add-location-pincode-key").value
            flag = false
        } catch {
            flag = true
        }
        if (flag == true) {
            if (value != "" && location_pincode_value != "") {
                html = '<div class="row" id="location-pincode-div" style="margin-top: 1.5em;"><div class="col s4">'
                html += '<input id="add-location-pincode-key" value="Filter by Pincode" disabled>'
                html += '</div>'
                html += '<div class="col s4">'
                html += '<input id="add-location-pincode-value" value= " ' + location_pincode_value + ' " disabled>'
                html += '</div><a class="red-text text-darken-3" onclick="delete_location_pincode_filter_option()"><i class="material-icons">delete</i></a></div>'
                div_html = document.getElementById("add-filter-buttons")
                div_html.insertAdjacentHTML('beforeend', html);
            } else {
                showToast("Kindly select a valid filter.", 2000);
                return;
            }
        } else {
            showToast("This filter is already present.", 2000);
            return;
        }
    }
}

function change_date_format(date) {
    var dateParts = date.split("-");
    date = dateParts[2] + "-" + dateParts[1] + "-" + dateParts[0];
    return date.trim();
}

function check_filter() {
    var value = document.getElementById("check-filter-select").value;
    if (value == "1") {
        document.getElementById("div-message-answer").style.display = "block"
        document.getElementById("div-message-feedback").style.display = "none"
        document.getElementById("div-message-channels").style.display = "none"
        document.getElementById("div-message-sentiment").style.display = "none"
        document.getElementById("div-message-timestamp").style.display = "none"
        document.getElementById("div-message-location").style.display = "none"
        show_location_data()
    } else if (value == "2") {
        document.getElementById("div-message-feedback").style.display = "block"
        document.getElementById("div-message-answer").style.display = "none"
        document.getElementById("div-message-sentiment").style.display = "none"
        document.getElementById("div-message-channels").style.display = "none"
        document.getElementById("div-message-timestamp").style.display = "none"
        document.getElementById("div-message-location").style.display = "none"
        show_location_data()
    } else if (value == "3") {
        document.getElementById("div-message-channels").style.display = "block"
        document.getElementById("div-message-sentiment").style.display = "none"
        document.getElementById("div-message-feedback").style.display = "none"
        document.getElementById("div-message-answer").style.display = "none"
        document.getElementById("div-message-timestamp").style.display = "none"
        document.getElementById("div-message-location").style.display = "none"
        show_location_data()
    } else if (value == "4") {
        document.getElementById("div-message-sentiment").style.display = "block"
        document.getElementById("div-message-channels").style.display = "none"
        document.getElementById("div-message-feedback").style.display = "none"
        document.getElementById("div-message-answer").style.display = "none"
        document.getElementById("div-message-timestamp").style.display = "none"
        document.getElementById("div-message-location").style.display = "none"
        show_location_data()
    } else if (value == "5") {
        document.getElementById("div-message-timestamp").style.display = "block"
        document.getElementById("div-message-sentiment").style.display = "none"
        document.getElementById("div-message-channels").style.display = "none"
        document.getElementById("div-message-feedback").style.display = "none"
        document.getElementById("div-message-answer").style.display = "none"
        document.getElementById("div-message-location").style.display = "none"
        show_location_data()
    } else if (value == "6") {
        document.getElementById("div-message-location").style.display = "block"
        document.getElementById("div-message-sentiment").style.display = "none"
        document.getElementById("div-message-channels").style.display = "none"
        document.getElementById("div-message-feedback").style.display = "none"
        document.getElementById("div-message-answer").style.display = "none"
        document.getElementById("div-message-timestamp").style.display = "none"
        show_location_data()
    } else {
        document.getElementById("div-message-channels").style.display = "none"
        document.getElementById("div-message-feedback").style.display = "none"
        document.getElementById("div-message-answer").style.display = "none"
        document.getElementById("div-message-sentiment").style.display = "none"
        document.getElementById("div-message-timestamp").style.display = "none"
        document.getElementById("div-message-location").style.display = "none"
        show_location_data()
    }
}

function show_location_data() {
    var location_option = document.getElementById("select-message-location-filter").value;
    var value = document.getElementById("check-filter-select").value;
    if (location_option == 1 && value == 6) {
        document.getElementById("div-message-location-city").style.display = "block"
        document.getElementById("div-message-location-state").style.display = "none"
        document.getElementById("div-message-location-pincode").style.display = "none"
    } else if (location_option == 2 && value == 6) {
        document.getElementById("div-message-location-city").style.display = "none"
        document.getElementById("div-message-location-state").style.display = "block"
        document.getElementById("div-message-location-pincode").style.display = "none"
    } else if (location_option == 3 && value == 6) {
        document.getElementById("div-message-location-city").style.display = "none"
        document.getElementById("div-message-location-state").style.display = "none"
        document.getElementById("div-message-location-pincode").style.display = "block"
    } else {
        document.getElementById("div-message-location-city").style.display = "none"
        document.getElementById("div-message-location-state").style.display = "none"
        document.getElementById("div-message-location-pincode").style.display = "none"
    }

}

function location_details_change() {
    var selected_element = document.getElementById("location-dropdown");
    var location_option = selected_element.value;
    if (location_option == "city") {
        $('.client-location-city').css('display', 'table-cell');
        $('.client-location-state').css('display', 'none');
        $('.client-location-pincode').css('display', 'none');
    } else if (location_option == "state") {
        $('.client-location-city').css('display', 'none');
        $('.client-location-state').css('display', 'table-cell');
        $('.client-location-pincode').css('display', 'none');
    } else if (location_option == "pincode") {
        $('.client-location-city').css('display', 'none');
        $('.client-location-state').css('display', 'none');
        $('.client-location-pincode').css('display', 'table-cell');
    }
}

function select_message_filter() {
    bot_id = document.getElementById("selected-bot-message-history").value;
    var answer_filter_value = ""
    answer_filter = document.getElementById("select-message-answer-filter").value;
    if (answer_filter == "1") {
        answer_filter_value = "&all"
    } else if (answer_filter == "2") {
        answer_filter_value = "&unanswered"
    } else if (answer_filter == "3") {
        answer_filter_value = "&answered"
    }
    var feedback_filter_value = ""
    feedback_filter = document.getElementById("select-message-feedback-filter").value;
    if (feedback_filter == "1") {
        feedback_filter_value = "&no_feedback"
    } else if (feedback_filter == "2") {
        feedback_filter_value = "&possitive_feedback"
    } else if (feedback_filter == "3") {
        feedback_filter_value = "&negative_feedback"
    }
    var channels_filter_value = ""
    channels_filter = document.getElementById("select-message-channels-filter").value;
    if (channels_filter == "1") {
        channels_filter_value = "&channel_name=Web"
    } else if (channels_filter == "2") {
        channels_filter_value = "&channel_name=WhatsApp"
    } else if (channels_filter == "3") {
        channels_filter_value = "&channel_name=GoogleHome"
    } else if (channels_filter == "4") {
        channels_filter_value = "&channel_name=Alexa"
    } else if (channels_filter == "5") {
        channels_filter_value = "&channel_name=Android"
    }
    var sentiment_filter_value = ""
    sentiment_filter = document.getElementById("select-message-sentiment-filter").value;
    if (sentiment_filter != "") {
        sentiment_filter_value = "&sentiment=" + sentiment_filter
    }
    var timestamp_filter_value = ""
    timestamp_date = document.getElementById("timestamp-date").value;
    timestamp_start_time = document.getElementById("timestamp-start-time").value;
    timestamp_end_time = document.getElementById("timestamp-end-time").value;
    if (timestamp_date != "" && timestamp_start_time != "" && timestamp_end_time != "") {
        timestamp_filter_value = "&timestamp_date=" + timestamp_date + "&timestamp_start_time=" + timestamp_start_time + "&timestamp_end_time=" + timestamp_end_time;
    }

    var location_city_filter_value = ""
    location_city_filter = document.getElementById("select-message-location-city-filter").value;
    if (location_city_filter != "") {
        location_city_filter_value = "&location_city=" + location_city_filter
    }

    var location_state_filter_value = ""
    location_state_filter = document.getElementById("select-message-location-state-filter").value;
    if (location_state_filter != "") {
        location_state_filter_value = "&location_state=" + location_state_filter
    }

    var location_pincode_filter_value = ""
    location_pincode_filter = document.getElementById("select-message-location-pincode-filter").value;
    if (location_pincode_filter != "") {
        location_pincode_filter_value = "&location_pincode=" + location_pincode_filter
    }

    if (answer_filter_value == "" && feedback_filter_value == "" && channels_filter_value == "" && sentiment_filter == "" && timestamp_filter_value == "" && location_city_filter_value == "" && location_state_filter_value == "" && location_pincode_filter_value == "") {
        showToast("Kindly select a valid filter", 2000);
        return;
    }

    value = channels_filter_value + answer_filter_value + feedback_filter_value + sentiment_filter_value + timestamp_filter_value + location_city_filter_value + location_state_filter_value + location_pincode_filter_value;
    window.location = window.location.origin + window.location.pathname + "?bot_id=" + bot_id + value;
}

$(".easychat_processor_collapsible").click(function(){
        $(this).toggleClass("active");
        $(this).next(".easychat_processor_content").slideToggle();
        $(this).parent().toggleClass("active-list")
});

function start_crawling() {

    var url = document.getElementById("crawl-url").value.trim()
    if (url == "") {
        showToast("Kindly enter a URL to start crawling", 2000);
        return;
    }
    if (isValidURL(url) == false) {
        showToast("Kindly enter a valid URL.", 2000);
        return;
    }

    bot_id = window.location.href.split("/")[6]

    var json_string = JSON.stringify({
        url: url,
        bot_id: bot_id,
    })
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/search/start-crawling/",
        type: "POST",
        headers: {
            "X-CSRFToken": getCsrfToken()
        },
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                showToast("Crawling Started Successfully.", 2000);
                window.location.reload();
            } else if (response["status"] == 305) {
                showToast("Please Save it before crawling.", 2000);
            } else {
                console.log(response);
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });
}

function save_e_search() {
    bot_id = window.location.href.split("/")[6]
    var json_string = JSON.stringify({
        bot_id: bot_id
    })
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/search/enable-e-search/",
        type: "POST",
        headers: {
            "X-CSRFToken": getCsrfToken()
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status_code"] == 200) {
                showToast("E Search Enable Successfully.", 2000);
            } else {
                console.log(response);
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });
}

function save_g_search() {
    bot_id = window.location.href.split("/")[6]
    search_cx = document.getElementById("search-cx").value;
    if (search_cx == "") {
        showToast("Kindly enter the CX ID.", 2000);
        return;
    }
    var json_string = JSON.stringify({
        "bot_id": bot_id,
        "search_cx": search_cx
    })
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/search/enable-g-search/",
        type: "POST",
        headers: {
            "X-CSRFToken": getCsrfToken()
        },
        data: {
            data: json_string
        },
        success: function (response) {
            console.log(response)
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status_code"] == 200) {
                showToast("G Search Enable Successfully.", 2000);
                window.location.reload();
            } else {
                console.log(response);
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });
}

function refreshCrawledLinks() {
    window.location.reload();
}


//////////////////////////////////////////////

// Carousel

//////////////////////////////////////////////

banner_redirection_count = 0

function checkImageURL(url) {
    url = url.toLowerCase()
    return (url.match(/\.(jpeg|jpg|gif|png)$/) != null);
}

function add_banner_details() {


    img_url = $("#add_banner_url_data").val().trim()

    if (img_url == "") {
        M.toast({
            "html": "Please provide valid image url"
        }, 2000);
        return;
    }

    if (!checkImageURL(img_url)) {
        M.toast({
            "html": "Please provide valid image url"
        }, 2000);
        return;
    }

    if (isValidURL(img_url) == false) {
        M.toast({
            "html": "Please provide valid image url"
        }, 2000);
        return;
    }

    rd_url = $("#add_redirection_url_data").val();
    var pattern = /^((http|https|ftp):\/\/)/;
    if (!pattern.test(rd_url)) {
        M.toast({
            "html": "Please enter valid redirect url."
        }, 2000);
        return;
    }

    if (rd_url.trim() == "") {
        M.toast({
            "html": "Please enter valid redirect url."
        }, 2000);
        return;
    }

    AddBannerRedirectionUrl(img_url, rd_url);
}

function get_image_data(image_path) {
    var received_data = null;
    var json_string = JSON.stringify({
        "image_path": image_path,
    })
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/get-image-data/",
        type: "POST",
        headers: {
            "X-CSRFToken": getCsrfToken()
        },
        data: {
            json_string: json_string
        },
        async: false,
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                data = {
                    x: response["x"],
                    y: response["y"],
                    width: response["width"],
                    height: response["height"],
                };
                received_data = data;
            } else {
                received_data = null;
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            received_data = null;
        }
    });
    return received_data;
}

function set_image_data(x, y, width, height, image_path) {
    var json_string = JSON.stringify({
        "x": x,
        "y": y,
        "width": width,
        "height": height,
        "image_path": image_path
    });
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/set-image-data/",
        type: "POST",
        headers: {
            "X-CSRFToken": getCsrfToken()
        },
        data: {
            json_string: json_string
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });
}

function open_modal_image_crop(image_source) {

    var modal_id = "#image-crop-modal";
    var image_id = "#image-crop-modal-img-id";
    var extention = image_source.substring(image_source.lastIndexOf('.'), image_source.length) || image_source;

    if (extention == image_source) {
        M.toast({
            "html": "Image source is not valid"
        }, 2000)
        return;
    }

    original_image_source = image_source.substring(0, image_source.lastIndexOf('.')) + "_original" + extention;
    $.ajax({
        url: original_image_source,
        error: function (data) {
            save_duplicate_image(image_source, original_image_source);
        }
    });

    image_data = get_image_data(image_source)

    setTimeout(function () {
        $(image_id).attr("src", original_image_source)

        var $image = $(document.getElementById("image-crop-modal-img-id"));

        $(modal_id).modal("open");

        setTimeout(function () {
            $image.cropper({
                viewMode: 1,
                aspectRatio: 8 / 5,
                minCropBoxWidth: 100,
                minCropBoxHeight: 100,
                data: image_data
            })
                .on('zoom', function (e) {
                    e.preventDefault();
                });
        }, 50);

    }, 300);
}

function edit_image(id) {
    event.preventDefault();
    var image_source = document.getElementById(id).querySelector("img").src;
    destroy_cropper();
    open_modal_image_crop(image_source);
}

function edit_rdurl(id, rd_url, str_id1) {

    welcome_banner_edit_element = document.getElementById("redurl_" + str_id1)

    $('#edit-welcome-banner-redirecturl-modal').modal('open');
    document.getElementById("welcome-banner-redirect-url").value = document.getElementById("redurl_" + str_id1).value;

}


function save_image() {
    var image_id = "image-crop-modal-img-id"
    event.preventDefault();
    var $image = $(document.getElementById(image_id));

    var cropData = $image.cropper("getData");
    var x = cropData["x"];
    var y = cropData["y"];
    var height = cropData["height"];
    var width = cropData["width"];
    var image_path = document.getElementById(image_id).src;
    image_crop(x, y, height, width, image_path);
}

function destroy_cropper() {
    event.preventDefault();
    var image_id = "image-crop-modal-img-id"
    var $image = $(document.getElementById(image_id));
    $image.cropper("destroy");
}

function image_crop(x, y, height, width, image_path) {
    var n = image_path.lastIndexOf("_original");
    var target_path = image_path.slice(0, n) + image_path.slice(n).replace("_original", "");
    var json_string = JSON.stringify({
        "x": x,
        "y": y,
        "width": width,
        "height": height,
        "image_path": image_path,
        "target_path": target_path,
    })
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/image-crop/",
        type: "POST",
        headers: {
            "X-CSRFToken": getCsrfToken()
        },
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                set_image_data(x, y, width, height, target_path);
                $("#save-web-channel").click();
            } else {
                M.toast({
                    "html": "Not able to crop image."
                }, 2000)
                window.location.reload();
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });
}

function AddBannerRedirectionUrl(img_url, rd_url, cmp_img_url) {

    var id = "image_url_" + banner_redirection_count.toString();
    var str_id = "str_image_url_" + banner_redirection_count.toString();
    var str_id1 = "str_rd_url_" + banner_redirection_count.toString();
    var img_name = img_url.split("/")
    img_name = img_name[img_name.length - 1]

    if (cmp_img_url) {
        image_compressed_path = cmp_img_url;
    }


    if (image_compressed_path.toString().trim() == "") {
        image_compressed_path = img_url
    }


    var html = `
    		<div class="welcome-banner-image-tile" id="` + id + `">
    				<div style="display:none;">
			        <input id="imageurl_` + str_id + `" type="text" data-length="100" value="` + img_url + `" style="width: 80%" required>
			        <input id="imageurl_compressed_` + str_id + `" type="text" data-length="100" value="` + image_compressed_path + `" style="width: 80%" required>
			        <label for="` + str_id + `"></label>
			        </div>
			        <div style="display:none;">
			        <input id="redurl_` + str_id1 + `" type="text" data-length="100" value="` + rd_url + `" style="width: 80%" required disabled>
			        <label for="` + str_id1 + `"></label>
			        </div>
                    <div class="image-div">
                        <img id="img1" src="` + img_url + `">
                    </div>
                    <div class="image-name-div">
                        ` + img_name + `
                    </div>
                    <button class="eye-icon tooltip" onclick="image_modal_open('` + img_url + `','` + rd_url + `')"><img src= "/static/EasyChatApp/img/eye-icon.svg">
                        <span class="tooltiptext" style="margin-left: -66px;">View Banner</span>
                    </button>
                    <button type="button" class="edit-icon tooltip" data-target="edit-welcome-banner-redirecturl-modal" onclick="edit_rdurl( '` + id + `','` + rd_url + `','` + str_id1 + `' )"  ><img src="/static/EasyChatApp/img/edit-icon.svg">
                       <span class="tooltiptext"  style="margin-left: -50px;">Edit URL</span>
                      </button>
                    <button class="cross-icon delete-button-image-redirection-url tooltip" id="` + id + `" ><img src="/static/EasyChatApp/img/cross-icon.svg">
                        <span class="tooltiptext"  style="margin-left: -82px;">Remove Banner</span>
                    </button>
        	</div>

    `
    image_compressed_path = ""
    $(html).appendTo($("#welcome-banner-list"));
    $("#add_banner_url_data").val("")
    $("#add_redirection_url_data").val("")
    banner_redirection_count += 1;
    preview_banner_button = document.getElementById("preview-banner")
    preview_banner_button.style.opacity = "1";
    preview_banner_button.disabled = false;
    preview_banner_button.style.cursor = "pointer";


}



function save_duplicate_image(origional, duplicate) {
    origional = origional.replace(window.location.protocol + "//" + window.location.host + "/", "");
    duplicate = duplicate.replace(window.location.protocol + "//" + window.location.host + "/", "");

    var csrf_token = $('input[name="csrfmiddlewaretoken"]').val();
    $.ajax({
        url: "/chat/duplicate-image/",
        type: "POST",
        headers: {
            'X-CSRFToken': csrf_token
        },
        data: {
            image_source: origional,
            duplicate_image_source: duplicate
        },
        async: false,
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });
}

var upload_file_limit_size = 5120000;
var image_compressed_path = "";

//Quick Menu Image Upload
$(document).on("click", "#upload_quick_menu_image", function (e) {
    e.preventDefault();

    if (document.getElementById("input_upload_quick_menu_image2").value == "") {
        M.toast({
            "html": "Please select a file"
        }, 2000);

        setTimeout(function () {
            $('#modal-upload-quick-menu-image').modal('open');
        }, 200);
        return false;
    }

    var input_upload_image = ($("#input_upload_quick_menu_image"))[0].files[0]

    if (input_upload_image == null || input_upload_image == undefined) {
        M.toast({
            "html": "Please select a file"
        }, 2000);

        setTimeout(function () {
            $('#modal-upload-quick-menu-image').modal('open');
        }, 200);
        return false;
    }
    if (input_upload_image.name.match(/\.(jpeg|jpg|gif|png)$/) == null) {
        M.toast({
            "html": "Please upload valid image"
        }, 2000);
        setTimeout(function () {
            $('#modal-upload-quick-menu-image').modal('open');
        }, 200);
        return false;
    }
    if (input_upload_image.size > upload_file_limit_size) {
        M.toast({
            "html": "Size limit exceed(should be less than 5 MB)."
        }, 2000);

        setTimeout(function () {
            $('#modal-upload-quick-menu-image').modal('open');
        }, 200);

        return false;
    }

    if (check_malicious_file(input_upload_image.name) == true) {

        setTimeout(function () {
            $('#modal-upload-quick-menu-image').modal('open');
        }, 200);
        return false;
    }

    var reader = new FileReader();
    reader.readAsDataURL(input_upload_image);
    reader.onload = function () {

        base64_str = reader.result.split(",")[1];

        uploaded_file = [];
        uploaded_file.push({
            "filename": input_upload_image.name,
            "base64_file": base64_str,
        });

        upload_quick_menu_image();
    };

    reader.onerror = function (error) {
        console.log('Error: ', error);
    };
});

async function upload_quick_menu_image() {
    var response = await upload_image();

    if (response && response.status == 200) {
        src = window.location.protocol + "//" + window.location.host + response["src"];
        $("#icon-name-quick").click()
        $("#icon-name-quick").val(src);
        document.getElementById('input_upload_quick_menu_image2').value = "";
        current_quick_img_src = response["src"]
        $("#quick_menu_preview_image").attr("src", response["src"]);
    }
}

$(document).on("click", ".delete-button-image-redirection-url", function (e) {
    e.preventDefault();
    element = "#" + this.id;
    $(element).remove();

    welcome_banner_elements_count = document.getElementById('welcome-banner-list').childElementCount;
    if (welcome_banner_elements_count < 1) {
        preview_banner_button = document.getElementById("preview-banner")
        preview_banner_button.style.opacity = "0.5";
        preview_banner_button.disabled = true;
        preview_banner_button.style.cursor = "not-allowed";

    }


});


function load_edit_static_content(element) {

    var editor = ace.edit("editor-code");
    var filename = document.getElementById("static-filename").value;
    csrf_token = get_csrf_token();

    json_string = JSON.stringify({
        filename: filename
    });
    json_string = EncryptVariable(json_string);

    element.innerHTML = "loading..."
    $.ajax({
        url: "/chat/load-static-file/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                editor.setValue(response["code"]);
                $("#save-script-btn").removeAttr("disabled", "disabled");
            } else {
                M.toast({
                    "html": response["message"]
                }, 2000);
            }
            element.innerHTML = "Load Script"
        },
        error: function (jqXHR, exception) {
            console.log(jqXHR, exception);
            element.innerHTML = "Load Script"
        }
    });
}

function append_form_widget_data(form_name, form_data_misdashboard, pk_of_mis) {
    let html = '<div class = "easychat-form-container" style="width: 360px;float: right"><h5>' + form_name + '</h5>';
    dict_length = Object.keys(form_data_misdashboard).length
    iterator = 0
    for (key in form_data_misdashboard) {
        iterator = iterator + 1
        html += '<p class= "revert-existing easychat-form-label" style="width:100%; word-break: break-word; float:unset;display:block !important;border-radius:unset !important;color:#4d4d4d !important; background:#FBFBFB !important;color: #4d4d4d !important;margin-left: 10px !important;font-size: 14px !important;">' + key + '</p>'

        let value = form_data_misdashboard[key];
        let input_type = value[0];
        let input_val = value[1];

        if (Array.isArray(input_val)) {
            for (let i = 0; i < input_val.length; ++i) {
                html += '<p class="revert-existing easychat-form-value" style="width:100%; word-break: break-word; float:unset;display:block !important;border-radius:unset !important;color:#2d2d2d !important;background:#FBFBFB !important;color: #2d2d2d !important;font-size: 13px !important;margin-left: 10px;!important;">' + sanitize_html(input_val[i]) + '</p>';
            }
        } else {
            if (input_type == 'file_attach') {
                let file_name = input_val.split('/');
                file_name = file_name[file_name.length - 1];
                html += '<p class="revert-existing easychat-form-value" style="width:100%; word-break: break-word; float:unset;display:block !important;border-radius:unset !important;color:#2d2d2d !important;background:#FBFBFB !important;color: #2d2d2d !important;font-size: 13px !important;margin-left: 10px;!important;"><a href=' + input_val + '>' + sanitize_html(file_name) + '</a></p>';
            } else {
                html += '<p class="revert-existing easychat-form-value" style="width:100%; word-break: break-word; float:unset;display:block !important;border-radius:unset !important;color:#2d2d2d !important;background:#FBFBFB !important;color: #2d2d2d !important;font-size: 13px !important;margin-left: 10px;!important;">' + sanitize_html(input_val) + '</p>';
            }
        }
        if (iterator != dict_length) {
            html += '<hr style = "border: 1px solid #e6e6e6">';
        }
    }
    html += "<a href='/chat/download-form-data-excel/?pk_of_mis=" + pk_of_mis + "' style='float:right'>Download Excel</a>"
    html += '</div>';
    return html
}

function save_edit_static_content(element) {

    var editor = ace.edit("editor-code");
    var filename = document.getElementById("static-filename").value;
    var code = editor.getValue();

    //utf_message = EasyChatCryptoJS.enc.Utf8.parse(code);
    //code = EasyChatCryptoJS.enc.Base64.stringify(utf_message);

    csrf_token = get_csrf_token();
    json_string = JSON.stringify({
        filename: filename,
        code: code
    });
    json_string = EncryptVariable(json_string);

    element.innerHTML = "saving..."
    $.ajax({
        url: "/chat/save-static-file/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Script Saved Successfully."
                }, 2000);
            } else {
                M.toast({
                    "html": response["message"]
                }, 2000);
            }
            element.innerHTML = "Save Script"
        },
        error: function (jqXHR, exception) {
            console.log(jqXHR, exception);
            element.innerHTML = "Save Script"
        }
    });
}

if (window.location.pathname.indexOf("/chat/user-filtered/") != -1) {
    let search_user_id = document.getElementById("search-user-input");
    if(search_user_id) {
        search_user_id.addEventListener("keydown", function (e) {
            if (e.keyCode === 13) {
                get_search_result();
            }
        });
    }
    search_user_id = search_user_id ? search_user_id : document.getElementById("search-user-input-static")
    if(search_user_id) {
        search_user_id.addEventListener("keyup", function (e) {
            if (search_user_id.value == ""){
                document.getElementsByClassName("message-history-clear-input-div")[0].style.display = "none";
            } else {
                document.getElementsByClassName("message-history-clear-input-div")[0].style.display = "block";
            }
        });
    }
}

function get_search_result() {
    var text = document.getElementById("search-user-input").value;

    if (text.trim() == "") {

        M.toast({
            "html": "User ID cannot be empty."
        }, 2000);
        return;
    }
    document.getElementById("chat-pagination").style.display = "none";
    document.getElementById("loader-user-id").style.display = "flex";
    $('#user-contacts').css('height', 'calc(100vh - 250px)')

    var bot_id = get_url_vars()["bot_id"]
    csrf_token = get_csrf_token();
    json_string = JSON.stringify({
        "user_id": text,
        "bot_id": bot_id
    });
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/get-mis-user/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            document.getElementById("loader-user-id").style.display = "none";
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status_code"] == 200) {
                html = ''
                for(var index = 0; index < response["results"].length; index++) {
                    // html += "<li class=\"contact\"><div class=\"wrap\" onclick=\"get_user_messages('" + response["results"][index] + "')\">"
                    html += '<li class="easychat-user-chat-contacts-list-item" onclick=get_user_messages("' + response["results"][index][0] + '")>'
                    html += '<div class="user-chat-contacts-list-item-img">'+
                                   '<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">'+
                                    '<g filter="url(#filter0_dd_232_13545)">'+
                                    '<rect x="4.00024" y="2" width="32" height="32" rx="16" fill="#F6F6F6"/>'+
                                    '<rect x="4.50024" y="2.5" width="31" height="31" rx="15.5" stroke="#EBEBEB"/>'+
                                    '</g>'+
                                    '<g clip-path="url(#clip0_232_13545)">'+
                                    '<circle cx="20.0788" cy="14.6304" r="3.12377" stroke="#2D2D2D" stroke-width="1.42442"/>'+
                                    '<path d="M15.4971 24.6039C15.375 23.209 15.7168 20.3355 18.0603 20.0007H22.0882C23.0646 20.0007 24.9443 20.9214 24.6514 24.6039" stroke="#2D2D2D" stroke-width="1.42442" stroke-linecap="round"/>'+
                                    '</g>'+
                                    '<defs>'+
                                    '<filter id="filter0_dd_232_13545" x="0.000244141" y="0" width="40" height="40" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">'+
                                    '<feFlood flood-opacity="0" result="BackgroundImageFix"/>'+
                                    '<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>'+
                                    '<feOffset dy="2"/>'+
                                    '<feGaussianBlur stdDeviation="2"/>'+
                                    '<feColorMatrix type="matrix" values="0 0 0 0 0.196487 0 0 0 0 0.196487 0 0 0 0 0.279476 0 0 0 0.06 0"/>'+
                                    '<feBlend mode="multiply" in2="BackgroundImageFix" result="effect1_dropShadow_232_13545"/>'+
                                    '<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>'+
                                    '<feOffset/>'+
                                    '<feGaussianBlur stdDeviation="1"/>'+
                                    '<feColorMatrix type="matrix" values="0 0 0 0 0.196487 0 0 0 0 0.196487 0 0 0 0 0.279476 0 0 0 0.06 0"/>'+
                                    '<feBlend mode="multiply" in2="effect1_dropShadow_232_13545" result="effect2_dropShadow_232_13545"/>'+
                                    '<feBlend mode="normal" in="SourceGraphic" in2="effect2_dropShadow_232_13545" result="shape"/>'+
                                    '</filter>'+
                                    '<clipPath id="clip0_232_13545">'+
                                    '<rect width="15.8889" height="15.8889" fill="white" transform="translate(12 10)"/>'+
                                    '</clipPath>'+
                                    '</defs>'+
                                    '</svg>'+
                                    '</div>'
                    // html += '<img src="/static/EasyChatApp/img/botIcon.svg" alt="" />'
                    html += '<div class="user-chat-contacts-id-wrapper">'+
                                '<div class="user-chat-contacts-id-text">'+
                                    response["results"][index][0] + '' +
                                    '</div>'+
                                    '<div class="user-chat-contacts-response-text">'+
                                    response["results"][index][1] + '' +
                                '</div>'+
                            '</div></li>'
                    // html += '<div class="meta">'
                    // html += '<p class="preview">' + response["results"][index].slice(0, 15) + '...</p>'
                    // html += '</div></div></li><hr>'
                }
                document.getElementById("user-contacts").innerHTML = html
                document.getElementById("no-data-found-div").style.display = "none"
                document.getElementById("user-contacts").style.display = "block"
                document.getElementById("chat-pagination").style.display = "none";
                $(".easychat-user-chat-contacts-list-item").click(function () {
                    $(".easychat-user-chat-contacts-list-item").removeClass("easychat-user-active-chat");
                    $(this).addClass("easychat-user-active-chat");
                });
            } else if (response["status_code"] == 404) {
                document.getElementById("chat-pagination").style.display = "none"
                document.getElementById("no-data-found-div").style.display = "flex"
                document.getElementById("user-contacts").style.display = "none"
                M.toast({
                    "html": "No user found with this User ID."
                }, 2000);
            } else {
                document.getElementById("chat-pagination").style.display = "flex";
                M.toast({
                    "html": "Some error occured"
                }, 2000);
            }
        },
        error: function (jqXHR, exception) {
            console.log(jqXHR, exception);
        }
    });
}

if (window.location.pathname.indexOf("/chat/user-filtered/") != -1) {
    let user_id = get_url_vars()["user_id"];
    let session_id = get_url_vars()["session_id"]
    let static_page = get_url_vars()["static_page"]
    if (user_id != "" && user_id != null && user_id != undefined) {
        if (static_page == 'true') {
            get_user_messages_static(user_id, session_id);
        } else {
            get_user_messages(user_id, session_id);
        }
    }
}

function is_image(attached_file_src) {
    var file_ext = attached_file_src.split(".");
    file_ext = attached_file_src.split(".")[file_ext.length - 1];
    file_ext = file_ext.toUpperCase();

    if (
        ["PNG", "JPG", "JPEG", "SVG", "BMP", "GIF", "TIFF", "EXIF", "JFIF"].indexOf(file_ext) != -1
    ) {
        return true;
    }

    return false;
}

function is_video(attached_file_src) {
    var file_ext = attached_file_src.split(".");
    file_ext = attached_file_src.split(".")[file_ext.length - 1];
    file_ext = file_ext.toUpperCase();
    if (
        [
            "WEBM",
            "MPG",
            "MP2",
            "MPEG",
            "MPE",
            "MPV",
            "OGG",
            "MP4",
            "M4P",
            "M4V",
            "AVI",
            "WMV",
            "MOV",
            "QT",
            "FLV",
            "SWF",
            "AVCHD",
        ].indexOf(file_ext) != -1
    ) {
        return true;
    }

    return false;
}

function close_preview_image() {
    $('#preview-big-image-modal').modal("close");
    document.getElementById("preview-big-image").src = "";
}
var download_button_html = '<div class="chat-history-attachment-download-btn"><svg width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11.875 11.25H3.125C2.77982 11.25 2.5 11.5298 2.5 11.875C2.5 12.2202 2.77982 12.5 3.125 12.5H11.875C12.2202 12.5 12.5 12.2202 12.5 11.875C12.5 11.5298 12.2202 11.25 11.875 11.25Z" fill="#757575"></path><path d="M2.5 10.625V11.875C2.5 12.2202 2.77982 12.5 3.125 12.5C3.47018 12.5 3.75 12.2202 3.75 11.875V10.625C3.75 10.2798 3.47018 10 3.125 10C2.77982 10 2.5 10.2798 2.5 10.625Z" fill="#757575"></path><path d="M11.25 10.625V11.875C11.25 12.2202 11.5298 12.5 11.875 12.5C12.2202 12.5 12.5 12.2202 12.5 11.875V10.625C12.5 10.2798 12.2202 10 11.875 10C11.5298 10 11.25 10.2798 11.25 10.625Z" fill="#757575"></path> \
                               <path d="M7.50003 9.375C7.37046 9.37599 7.24378 9.33667 7.13753 9.2625L4.63753 7.5C4.50279 7.40442 4.41137 7.25937 4.38326 7.09658C4.35515 6.93379 4.39264 6.76649 4.48753 6.63125C4.5349 6.56366 4.59518 6.50611 4.66491 6.46194C4.73463 6.41777 4.81242 6.38785 4.89377 6.37391C4.97512 6.35996 5.05843 6.36227 5.13889 6.38069C5.21934 6.39911 5.29535 6.43329 5.36253 6.48125L7.50003 7.975L9.62503 6.375C9.75764 6.27555 9.92432 6.23284 10.0884 6.25628C10.2525 6.27973 10.4006 6.36739 10.5 6.5C10.5995 6.63261 10.6422 6.7993 10.6187 6.96339C10.5953 7.12749 10.5076 7.27555 10.375 7.375L7.87503 9.25C7.76685 9.33114 7.63526 9.375 7.50003 9.375Z" fill="#757575"></path>   \
                             <path d="M7.5 8.125C7.33424 8.125 7.17527 8.05915 7.05806 7.94194C6.94085 7.82473 6.875 7.66576 6.875 7.5V2.5C6.875 2.33424 6.94085 2.17527 7.05806 2.05806C7.17527 1.94085 7.33424 1.875 7.5 1.875C7.66576 1.875 7.82473 1.94085 7.94194 2.05806C8.05915 2.17527 8.125 2.33424 8.125 2.5V7.5C8.125 7.66576 8.05915 7.82473 7.94194 7.94194C7.82473 8.05915 7.66576 8.125 7.5 8.125Z" fill="#757575"></path></svg></div>'

function preview_big_image(elem) {
    document.getElementById("preview-big-image").src = ""
    image_src = elem.src
    $('#preview-big-image-modal').modal("open");
    document.getElementById("preview-big-image").src = image_src;
}

function get_image_path_html(file_name, attached_file_path) {
    return "<div class='easychat-user-message-image-container'><img onclick='preview_big_image(this)' src='" + attached_file_path + "'><a class='chat-history-attachment-widget' href='" + attached_file_path + "' target='_blank' download><div class='easychat-customer-attchment-file-name-div' style='color:gray;padding-left:10px;'>" + file_name + "</div>" + download_button_html + "</a></div>"
}

function get_vedio_path_html(file_name, attached_file_path) {
    return '<div class="easychat-user-message-video-container" ><video style="width:100%;height: 100%;" controls><source src="' + attached_file_path + '" type="video/mp4"></video><a class="chat-history-attachment-widget" href="' + attached_file_path + '" target="_blank"><div class="easychat-customer-attchment-file-name-div" style="color:gray;padding-left:10px;">' + file_name + '</div>' + download_button_html + '</a></div>'
}

function get_doc_path_html(file_name, attached_file_path) {
    return '<div class="easychat-user-message-image-container"><img src="/static/LiveChatApp/img/document.png"></img><a class="chat-history-attachment-widget" href="' + attached_file_path + '" target="_blank"><div class="easychat-customer-attchment-file-name-div" style="color:gray;padding-left:10px;">' + file_name + '</div>' + download_button_html + '</a></div>'
}

function get_html_for_message_hitory_attachment(file_name, attached_file_src) {
    let html = ""
    if (is_image(file_name)) {
        html += get_image_path_html(file_name, attached_file_src)
    } else if (is_video(file_name)) {
        html += get_vedio_path_html(file_name, attached_file_src)
    } else {
        html += get_doc_path_html(file_name, attached_file_src)
    }
    return html
}

function get_recomendation_object_from_string(recomendation, is_last) {
    try {
        if (!is_last) {
            recomendation = recomendation + " }"
        }
        recomendation = recomendation.replace(/'/g, '"')
        recomendation_obj = JSON.parse(recomendation)
        return recomendation_obj
    } catch (err) {
        console.log(err)
        return {
            "name": ""
        }
    }

}

///////////////////  API Integration in Console ////////////////////////

function go_full_screen_mode() {
    if (editor.container.mozRequestFullScreen) {
        editor.container.mozRequestFullScreen();
    } else {
        editor.container.webkitRequestFullscreen();
    }
}

function get_configure_api_mailer_data_email_list(){
    let email_list = []
    let email_els = $(".api-mailer-configure-email-id-data")
    for(let i =0 ; i<email_els.length;i++){
        email_list.push(email_els[i].innerText);
    }
    return email_list
}

function handleSaveEmail(elem) {
    easychat_bot_id = get_url_vars()["bot_pk"].split("#")
    bot_pk = easychat_bot_id[0]

    mail_sender_time_interval = $("#mail_sender_time_interval_input_editor").val()
    if(mail_sender_time_interval.length > 4){
        M.toast({
            "html": "API Fail Email Configuration Time interval should be less than 10000"
        }, 3000);
        return;
    }
    let isnum = /^\d+$/.test(mail_sender_time_interval.trim());
    if (!isnum) {
        M.toast({
            "html": "Invalid time input."
        }, 2000);
        return;
    }

    if (mail_sender_time_interval == undefined || mail_sender_time_interval == "" || mail_sender_time_interval <= 0) {

        alert("Kindly enter a valid time interval")
        return
    }

    email_addr_list = get_configure_api_mailer_data_email_list()
    mail_sent_to_list_editor = email_addr_list
    if (!email_addr_list.length) {
        alert("Kindly enter an Email ID to proceed")
        return
    }
    for (var i = 0; i < email_addr_list.length; i++) {
        if (!validateEmailAddr(email_addr_list[i])) {
            alert("Please provide valid Email ID")
            return
        }
    }
    csrf_token = get_csrf_token()

    json_string = JSON.stringify({
        "bot_id": bot_pk,
        "mail_sender_time_interval": mail_sender_time_interval,
        "mail_sent_to_list": email_addr_list,
        "from_processor": "true"
    });
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/save-api-fail-email-config/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Email Configuration saved."
                })

                if (!response["email_configured"]) {
                    $("#modal-api-fail-email-config").modal('open');
                } else {
                    $("#modal-api-fail-email-config").modal('close');
                }

                elem.classList.add("modal-close");
                var html=`In case of an API Failure, an email will be sent out to `

                for(var c =0 ; c < mail_sent_to_list_editor.length; c++)
                {
                    if(mail_sent_to_list_editor.length <= 3)
                    {
                        if(c == mail_sent_to_list_editor.length -1)
                        {
                            html = html + mail_sent_to_list_editor[c] + ". "
                        }
                        else {
                            html = html + mail_sent_to_list_editor[c] +", "
                        }
                    } else
                    {

                        if(c == 2)
                        {
                            var count = mail_sent_to_list_editor.length - 3;
                            html = html + mail_sent_to_list_editor[c] + ", +" + count + ". "
                            break;

                        }
                        else {
                            html = html + mail_sent_to_list_editor[c] +", "
                        }
                    } 
                }

                document.getElementById("email-config-message").innerHTML = html + `<a class="modal-trigger" href="#modal-api-fail-email-config">Configure Now</a>`;

                document.getElementById("api-mailer-btn").setAttribute('style', 'opacity:0.9;border: 1px solid #10B981;background: #ECFDF5 !important;pointer-events:none;');
                document.getElementById("api-mailer-btn").innerHTML=`<svg width="16" height="17" viewBox="0 0 16 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M8 0.5C12.4183 0.5 16 4.08172 16 8.5C16 12.9183 12.4183 16.5 8 16.5C3.58172 16.5 0 12.9183 0 8.5C0 4.08172 3.58172 0.5 8 0.5ZM8 1.5C4.13401 1.5 1 4.63401 1 8.5C1 12.366 4.13401 15.5 8 15.5C11.866 15.5 15 12.366 15 8.5C15 4.63401 11.866 1.5 8 1.5ZM11.3584 6.14645C11.532 6.32001 11.5513 6.58944 11.4163 6.78431L11.3584 6.85355L7.35355 10.8584C7.17999
                11.032 6.91056 11.0513 6.71569 10.9163L6.64645 10.8584L4.64645 8.85842C4.45118 8.66316 4.45118 8.34658 4.64645 8.15131C4.82001 7.97775 5.08944 7.95846 5.28431 8.09346L5.35355 8.15131L7 9.798L10.6513 6.14645C10.8466 5.95118 11.1632 5.95118 11.3584 6.14645Z" fill="#059669"/>
                </svg>      
                <p>API Mailer</p>`;
                document.getElementById("api-mailer-btn").setAttribute("disabled","");

                document.getElementById("save-processor-btn").setAttribute('data-tooltip', 'API Mailer Configured');
                if(document.getElementById("processor-name").value != ""){
                    $("#save-processor-btn").css("opacity", 1)
		            $("#save-processor-btn").css("cursor", "pointer")
                }
                window.api_fail_email_configured_editor = "True"
            } else if (response["status"] == 300) {
                M.toast({
                    "html": response["msg"]
                })
            } else {
                M.toast({
                    "html": "Not Able To Save Api Mailer Configurations. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        }
    });

}






$(document).on("click", "#go-intent-processor", function (e) {

    active_url = window.location.href.replace("#", "");

    active_url = active_url.replace("!", "");

    // intent_pk = active_url.substring(active_url.indexOf("intent_pk=") + "intent_pk=".length, );
    // intent_pk = intent_pk.split("&")[0]
    intent_pk = get_url_vars()["intent_pk"];

    if (intent_pk == undefined || intent_pk == null) {
        M.toast({
            "html": "You can edit the post/pipe/api tree after creating intent only."
        }, 2000);
        return;
    }

    tree_pk = node_intent_data[selected_node].tree_pk;

    processor = document.getElementById("select-intent-processor").value;

    if (processor == "package-manager") {
        window.open("/chat/package-installer/", "_blank");
        return;
    }

    if (processor == "") {

        M.toast({
            "html": "Please select one processor."
        }, 2000);
        return;
    }

    if (processor == "data") {

        window.open('/chat/data-model-entries/?bot_pk=' + SELECTED_BOT_PK, '_blank');
        return;
    }

    if (processor == "log") {

        window.open('/chat/log-analytics/?bot_pk=' + SELECTED_BOT_PK, '_blank');
        return;
    }

    if (processor == "whatsapp-history") {
        window.open('/chat/whatsapp-history/', '_blank');
        return;
    }
    if (processor == "whatsapp-simulator") {
        window.open('/chat/whatsapp-simulator/', '_blank');
        return;
    }
    if (processor == "whatsapp-webhook-extra") {
        window.open('/chat/whatsapp-webhook-function-console/?bot_pk=' + SELECTED_BOT_PK, '_blank');
        return;
    }

    if (processor == "common-utils") {
        window.open('/chat/common-utils/?bot_pk=' + SELECTED_BOT_PK, '_blank');
        return;
    }

    if (processor == "api-integration-v1") {
        window.open('/chat/api-integration/?intent_pk=' + intent_pk + '&tree_pk=' + tree_pk + '&type=rest', '_blank');
        return;
    }

    if (processor == "api-integration-v2") {
        window.location = "/automated-api/build/?tree_id=" + tree_pk + "&previous_location=" + encodeURIComponent(window.location.pathname + window.location.search);
        return;
    }

    if (processor == "api-list-collection") {
        window.open('/chat/api-list-collection/?bot_pk=' + SELECTED_BOT_PK, '_blank');
        return;
    }

    if (processor == "chatbot-custom-js") {
        window.open('/chat/chatbot-custom-js/?bot_pk=' + SELECTED_BOT_PK, '_blank');
        return;
    }

    if (processor == "chatbot-custom-css") {
        window.open('/chat/chatbot-custom-css/?bot_pk=' + SELECTED_BOT_PK, '_blank');
        return;
    }

    if (processor == "export") {
        $("#modal-export-intent-instruction").modal('open')
        return;
    }

    if (processor == "external-trigger-intent") {
        $("#easychat_extent_trigger_intent_modal").modal('open')
        return;
    }

    window.open('/chat/edit-processor/?intent_pk=' + intent_pk + '&tree_pk=' + tree_pk + '&processor=' + processor + '&bot_pk=' + SELECTED_BOT_PK, '_blank');

});

function export_intent_json() {
    window.location = '/chat/bot/export-intent/' + intent_pk
    return;
}

function save_whatsapp_webhooks_function(bot_id) {
    var editor = ace.edit("editor-extra-code-whatsapp");
    var code = editor.getValue();

    if (check_for_system_commands(code)) {
        M.toast({
            "html": "Code contains system-commands. Please remove them and save again."
        }, 2000);
        document.getElementById("easychat-processor-status").value = "\n\nError(s):";
        show_processor_errors();
        return;
    };
    csrf_token = get_csrf_token();
    var json_string = JSON.stringify({
        code: code,
        bot_id: bot_id,
    })
    json_string = EncryptVariable(json_string);
    json_string = encodeURIComponent(json_string);
    var xhttp = new XMLHttpRequest();
    var params = 'json_string=' + json_string
    xhttp.open("POST", "/chat/save-whatsapp-webhook-function-code/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Changes saved successfully."
                }, 2000);
                setTimeout(function (e) {
                    window.location.reload();
                }, 2000);
            } else if (response["status"] == 300) {
                M.toast({
                    "html": response["message"]
                })
            } else if (response["status"] == 400) {

                M.toast({
                    "html": response["message"]
                })
            } else {
                M.toast({
                    "html": "An Error occured cannot save the function."
                })
            }
        }
    }
    xhttp.send(params);
}

function check_for_system_commands(code) {
    var Range = ace.require('ace/range').Range;
    var code_lines = code.split('\n')
    var contains_system_commands = false;

    for (var i = 0; i < code_lines.length; ++i) {
        var line = code_lines[i];
        for (cmd of system_commands) {
            var err_index = line.indexOf(cmd);
            if (err_index != -1) {
                contains_system_commands = true;

                if (!highlighted_lines[i]) {
                    var id = editor.session.addMarker(new Range(i, 0, i, 1), "my-marker", "fullLine");
                    highlighted_lines[i] = id;
                    processor_errors[i] = "Line " + (i + 1) + " : " + err_index + " Contains " + cmd + " command which is a system command.";
                }

                document.getElementById('system-command-error').style.display = 'block';
                break;
            } else {
                editor.session.removeMarker(highlighted_lines[i]);
                highlighted_lines[i] = undefined;
                processor_errors[i] = "";
            }
        }
    }

    return contains_system_commands;
}

function show_processor_errors() {
    processor_output_text_area = document.getElementById("easychat-processor-status");

    for (key in processor_errors) {
        if (processor_errors[key] != "") {
            processor_output_text_area.value += '\n\n' + processor_errors[key];
        }
    }

    processor_output_text_area.style.display = 'block';
}

var processor = "";
var tree_pk = 0;
var name = "";

function save_processor_content(processor, tree_pk, name, is_autosave = false) {


    if(window.api_fail_email_configured_editor + "" != "True"){
        // for debugging
        console.log("api mailer needs to be configured first")
        return;
    }
    
    if (document.getElementById("processor-name").value.toString().trim() == "") {
        M.toast({
            "html": "Processor name can't be empty."
        }, 2000);
        return;
    }

    if (document.getElementById("api-mailer-btn") != null) {

        if (!document.getElementById("api-mailer-btn").style.opacity == "0.7") {
            return;
        }
    }

    var editor = ace.edit("editor-code");
    var code = editor.getValue();

    if (check_for_system_commands(code)) {
        M.toast({
            "html": "Code contains system-commands. Please remove them and save again."
        }, 2000);
        document.getElementById("easychat-processor-status").value = "\n\nError(s):";
        show_processor_errors();
        return;
    };

    document.getElementById("easychat-processor-status").style.display = 'none';
    document.getElementById('system-command-error').style.display = 'none';

    var is_new = false;
    var selected_lang = $("#select-processor-language").val()
    if (name == "asdhs524fdbghdagfht52eg2fc") {
        is_new = true
    }
    name = document.getElementById("processor-name").value

    var api_collection = $('#api_collection li input[type=text]')

    api_collection_list = []

    api_collection.each(function () {
        api_collection_list.push($(this).attr('value'));
    });

    csrf_token = get_csrf_token();

    let field_id = '';
    if (processor == 'field') {
        field_id = get_url_vars()["field_id"];
    }

    var json_string = JSON.stringify({
        code: code,
        processor: processor,
        tree_pk: tree_pk,
        name: name,
        is_new: is_new,
        selected_lang: selected_lang,
        api_collection: api_collection_list,
        original_processor_name: original_processor_name,
        field_id: field_id,
    })

    json_string = EncryptVariable(json_string);
    json_string = encodeURIComponent(json_string);

    var xhttp = new XMLHttpRequest();
    var params = 'json_string=' + json_string
    xhttp.open("POST", "/chat/save-processor-content/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function () {

        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                if (is_autosave == false) {

                    M.toast({
                        "html": "Changes saved successfully."
                    }, 2000);
                    console.log("Changes saved successfully!");
                    setTimeout(function (e) {
                        window.location.reload();
                    }, 2000);
                } else {
                    clearTimeout(autosave_session_timer)
                    document.getElementById("easychat-autosave-span").style.display = "inline-block";
                    setTimeout(function (e) {
                        document.getElementById("easychat-autosave-span").style.display = "none";
                    }, 2000)
                }
            } else if (response["status"] == 300) {

                M.toast({
                    "html": response["message"]
                })
                console.log(response["message"])
            } else if (response['status'] == 400) {
                if (check_for_system_commands(code)) {
                    M.toast({
                        "html": "Code contains system-commands. Please remove them and save again."
                    }, 2000);
                    document.getElementById("easychat-processor-status").value = "\n\nError(s):";
                    show_processor_errors();
                }
            }
        }
    }
    xhttp.send(params);



}

function delete_processor_content(processor, tree_pk, name) {
    csrf_token = get_csrf_token();
    let field_id = '';
    if (processor == 'field') {
        field_id = get_url_vars()['field_id'];
    }
    var json_string = JSON.stringify({
        processor: processor,
        tree_pk: tree_pk,
        name: name,
        field_id: field_id,
    })
    json_string = EncryptVariable(json_string);
    json_string = encodeURIComponent(json_string);

    var xhttp = new XMLHttpRequest();
    var params = 'json_string=' + json_string
    xhttp.open("POST", "/chat/delete-processor-content/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                setTimeout(function (e) {
                    window.location.reload();
                }, 2000);
            }
        }
    }
    xhttp.send(params);
}

// ####################### Processor  ################
var processor = ""

function run_processor(processor) {

    processor = processor;
    var dynamic_variables = document.getElementsByClassName("easychat_dynamic_variable")

    for (var i = 0; i < dynamic_variables.length; i++) {

        if (dynamic_variables[i].value == "") {

            display_dynamic_variable_modal();
            return;
        }
    }
    run_processor_easychat(processor)
    return;
}

function run_processor_easychat(processor) {

    var dynamic_variables_list = {};
    var dynamic_variables = document.getElementsByClassName("easychat_dynamic_variable")

    for (var i = 0; i < dynamic_variables.length; i++) {

        dynamic_variables_list[dynamic_variables[i].name] = dynamic_variables[i].value;
    }
    document.getElementById("easychat-processor-status").style.display = "block"
    document.getElementById("easychat-processor-status").value = "Running ..."

    parameter = ""
    if (processor == "post" || processor == "pipe" || processor == "get_otp" || processor == "verify_otp" || processor == "field") {

        parameter = document.getElementById("easychat-processor-input").value
    }
    selected_lang = $("#select-processor-language").val();

    if (!selected_lang) {
        selected_lang = '1';
    }

    var editor = ace.edit("editor-code");
    var code = editor.getValue();

    if (check_for_system_commands(code)) {
        M.toast({
            "html": "Code contains system-commands. Please remove them and save again."
        }, 2000);
        document.getElementById("easychat-processor-status").value = "\n\nError(s):";
        show_processor_errors();
        return;
    }

    csrf_token = get_csrf_token();
    var json_string = JSON.stringify({
        code: code,
        parameter: parameter,
        processor: processor,
        selected_lang: selected_lang,
        dynamic_variables_list: dynamic_variables_list,
    })
    json_string = EncryptVariable(json_string);
    json_string = encodeURIComponent(json_string);

    var xhttp = new XMLHttpRequest();
    var params = 'json_string=' + json_string
    xhttp.open("POST", "/chat/easychat-processor-run/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                document.getElementById("easychat-processor-status").style.display = "block";
                processor_output_text_area = document.getElementById("easychat-processor-status")
                processor_output_text_area.value = "  Output:\n\n"
                processor_output_text_area.value += "Excecution time: " + response["elapsed_time"] + "\n\n"
                for (item in response["message"]) {
                    if (typeof response["message"][item] == 'object') {
                        processor_output_text_area.value += "  " + item + ": {\n"
                        for (items in response["message"][item]) {
                            processor_output_text_area.value += "    " + items + ": " + response["message"][item][items] + "\n";
                        }
                        processor_output_text_area.value += "     }\n\n"
                    } else {
                        processor_output_text_area.value += "  " + item + ": " + response["message"][item] + "\n\n";
                    }
                }
                scroll_to_bottom()
                // console.log(response["message"]);
            } else if (response["status"] == 300) {

                document.getElementById("easychat-processor-status").style.display = "block";
                processor_output_text_area = document.getElementById("easychat-processor-status");
                processor_output_text_area.value = "Output:\n\n";
                processor_output_text_area.value += "Excecution time: " + response["elapsed_time"] + "\n\n";
                processor_output_text_area.value += "Error(s):\n\n";
                processor_output_text_area.value += response["message"];
                scroll_to_bottom();
            } else if (response["status"] == 302) {

                document.getElementById("easychat-processor-status").style.display = "block";
                processor_output_text_area = document.getElementById("easychat-processor-status");
                processor_output_text_area.value = "Output:\n\n";
                processor_output_text_area.value += "Time Limit Exceded Error(s):\n\n";
                processor_output_text_area.value += response["status_message"];
                scroll_to_bottom();
            } else if (response["status"] == 400) {

                if (check_for_system_commands(response["code"])) {

                    M.toast({
                        "html": "Code contains system-commands. Please remove them and save again."
                    }, 2000);
                    show_processor_errors();
                }
            }
        }
    }
    xhttp.send(params);
}

function scroll_to_bottom() {

    var objDiv = document.getElementById("easychat-processor-container");
    objDiv.scrollTop = objDiv.scrollHeight;
}


function display_dynamic_variable_modal() {

    var dynamic_variables = document.getElementsByClassName("easychat_dynamic_variable")

    var html = '';
    for (var i = 0; i < dynamic_variables.length; i++) {

        html += `<div class="col s6 easychat-processor-dynamic-variable-wrapper">
            <div class="easychat-processor-dynamic-variable-header">` + dynamic_variables[i].name + `<span class="red-text">*</span></div>
            <input class="easychat_dynamic_variable_modal input" name="` + dynamic_variables[i].name + `" value="` + dynamic_variables[i].value + `" placeholder="Enter value here">
          </div>`
    }

    document.getElementById("easychat-dynamic-variables-content").innerHTML = html;
    $("#easychat-dynamic-variables").modal("open");
    // $("#easychat-dynamic-variables").show();
}

function update_dynamic_variables() {

    var dynamic_variables_modal = document.getElementsByClassName("easychat_dynamic_variable_modal")
    var dynamic_variables = document.getElementsByClassName("easychat_dynamic_variable")

    for (var i = 0; i < dynamic_variables_modal.length; i++) {

        if (dynamic_variables_modal[i].value == "") {

            M.toast({
                "html": "Please fill all fields"
            }, 200);
            return;
        }
        dynamic_variables[i].value = dynamic_variables_modal[i].value;
    }
    // run_processor_easychat(processor);
}

function get_url_vars() {
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
        vars[key] = value;
    });
    return vars;
}

$(document).on("change", "#multiple-select-intent-type-filter-intent-list, #select-category-filter-intent-list", function (e) {
    value = document.getElementById("multiple-select-intent-type-filter-intent-list").value;
    category = document.getElementById("select-category-filter-intent-list").value;
    if (value != undefined) {

        bot_pk = get_url_vars()["bot_pk"];
        // selected_bot_pk = document.getElementById("multiple-select-intent-filter-bot-list").value;
        selected_bot_pk = bot_pk;

        if (bot_pk == undefined) {
            if (selected_bot_pk == undefined) {
                return;
            } else {
                bot_pk = selected_bot_pk;
            }
        }
        let selected_language = get_url_vars()['selected_language']
        if (selected_language == "" || selected_language == undefined || selected_language == null) {
            selected_language = "en";
        }

        var location = "/chat/intent/?bot_pk=" + bot_pk + "&selected_language=" + selected_language + "&intent_type=" + value;

        if (category != undefined) {
            location += "&category=" + category;
        }

        window.location = location
    }
});

function generate_table() {
    table_list_element = document.getElementById('table_list_of_list');
    if (table_list_element == null || table_list_element == undefined) {
        return;
    }
    table_matrix = document.getElementById('table_list_of_list').innerHTML;
    table_matrix = JSON.parse(table_matrix)["items"];
    if (table_matrix != "None" && table_matrix != "") {
        rows = table_matrix.length;
        columns = table_matrix[0].length;
        tableSpace = document.getElementById('table-generation-space');
        tableSpace.innerHTML = "";
        if (columns <= 4) {
            var theader = '<table style="table-layout: fixed;">\n';
            var tbody = '';

            for (var i = 0; i < rows; i++) {
                // create each row
                tbody += '<tr>';

                for (var j = 0; j < columns; j++) {
                    // create cell
                    tbody += '<td contenteditable="true"id=' + '"cell-id-' + i.toString() + j.toString() + '"' + '>';
                    tbody += un_entity(table_matrix[i][j]);
                    tbody += '</td>'
                }

                // closing row table
                tbody += '</tr>\n';

            }
            var tfooter = '</table>';

            tableSpace.innerHTML = (theader + tbody + tfooter);
        }
    }
};

function tree_generate_table() {
    table_list_element = document.getElementById('tree_table_list_of_list');
    if (table_list_element == null || table_list_element == undefined) {
        return;
    }
    table_matrix = table_list_element.innerHTML;
    table_matrix = JSON.parse(table_matrix)["items"];
    if (table_matrix != "None" && table_matrix != "") {
        rows = table_matrix.length;
        columns = table_matrix[0].length;
        tableSpace = document.getElementById('tree-table-generation-space');
        tableSpace.innerHTML = "";
        if (columns <= 4) {
            var theader = '<table style="table-layout: fixed;">\n';
            var tbody = '';

            for (var i = 0; i < rows; i++) {
                // create each row
                tbody += '<tr>';

                for (var j = 0; j < columns; j++) {
                    // create cell
                    tbody += '<td contenteditable="true"id=' + '"cell-id-' + i.toString() + j.toString() + '"' + '>';
                    tbody += un_entity(table_matrix[i][j]);
                    tbody += '</td>'
                }

                // closing row table
                tbody += '</tr>\n';

            }
            var tfooter = '</table>';

            tableSpace.innerHTML = (theader + tbody + tfooter);
        }
    }
};


function isFloatValue(value) {
    if (!isNaN(value) && value.toString().indexOf('.') != -1) {
        return true;
    } else {
        return false;
    }
}

$(document).on("click", "#create-table-from-given", function (e) {
    tableSpace = document.getElementById('table-generation-space');
    rows = document.getElementById('number-of-rows-table').value;
    columns = document.getElementById('number-of-columns-table').value;
    if (rows == "") {
        M.toast({
            "html": "No of rows cannot be empty."
        }, 2000);
        return;
    }

    if (columns == "") {
        M.toast({
            "html": "No of columns cannot be empty."
        }, 2000);
        return;
    }

    if (rows <= 0) {
        M.toast({
            "html": "No of rows should be greater than 0."
        }, 2000);
        return;
    }

    if (columns <= 0) {
        M.toast({
            "html": "No of columns should be greater than 0."
        }, 2000);
        return;
    }

    if (isFloatValue(rows)) {
        M.toast({
            "html": "No of rows cannot be float."
        }, 2000);
        return;
    }

    if (isFloatValue(columns)) {
        M.toast({
            "html": "No of columns cannot be float."
        }, 2000);
        return;
    }


    if (columns <= 4) {
        var conformation_to_table_overwrite = true;

        if (tableSpace.innerHTML != "" && tableSpace.innerHTML.indexOf('</table>') > -1) {
            var conformation_to_table_overwrite = confirm("Your previous table will be overwritten!");
        }

        if (conformation_to_table_overwrite == true) {
            tableSpace.innerHTML = "";
            var theader = '<table style="table-layout: fixed;">\n';
            var tbody = '';

            for (var i = 0; i < rows; i++) {
                // create each row
                tbody += '<tr>';

                for (var j = 0; j < columns; j++) {
                    // create cell
                    tbody += '<td contenteditable="true" id=' + '"cell-id-' + i.toString() + j.toString() + '"' + 'placeholder=' + '"' + i.toString() + j.toString() + '"' + '>';
                    tbody += '</td>';
                }

                // closing row table
                tbody += '</tr>\n';

            }
            var tfooter = '</table>';

            tableSpace.innerHTML = (theader + tbody + tfooter);
        }
    } else {
        M.toast({
            "html": "Number of columns should not exceed four."
        }, 2000);
        return;
    };
});

$(document).on("click", "#delete-table-from-given", function (e) {
    document.getElementById("create-table-from-given").disabled = false;
    rows = document.getElementById('number-of-rows-table');
    columns = document.getElementById('number-of-columns-table');
    rows.value = 0;
    columns.value = 0;
    document.getElementById("table-generation-space").innerHTML = "";
    $(".edit-intent-table-input-div input").val("")
    node_intent_data[selected_node].intent_response.table_list_of_list = '{"items": []}'
    // document.getElementById("save-intent").click();
});

$(document).on("click", "#tree-create-table-from-given", function (e) {
    tableSpace = document.getElementById('tree-table-generation-space');
    rows = document.getElementById('tree-number-of-rows-table').value;
    columns = document.getElementById('tree-number-of-columns-table').value;

    if (rows == "") {
        M.toast({
            "html": "No of rows cannot be empty."
        }, 2000);
        return;
    }

    if (columns == "") {
        M.toast({
            "html": "No of columns cannot be empty."
        }, 2000);
        return;
    }

    if (rows <= 0) {
        M.toast({
            "html": "No of rows should be greater than 0."
        }, 2000);
        return;
    }

    if (columns <= 0) {
        M.toast({
            "html": "No of columns should be greater than 0."
        }, 2000);
        return;
    }

    if (isFloatValue(rows)) {
        M.toast({
            "html": "No of rows cannot be float."
        }, 2000);
        return;
    }

    if (isFloatValue(columns)) {
        M.toast({
            "html": "No of columns cannot be float."
        }, 2000);
        return;
    }

    if (columns <= 4) {

        var conformation_to_table_overwrite = true;

        if (tableSpace.innerHTML != "" && tableSpace.innerHTML.indexOf('</table>') > -1) {
            var conformation_to_table_overwrite = confirm("Your previous table will be overwritten!");
        }

        if (conformation_to_table_overwrite == true) {
            tableSpace.innerHTML = "";
            var theader = '<table style="table-layout: fixed;">\n';
            var tbody = '';

            for (var i = 0; i < rows; i++) {
                // create each row
                tbody += '<tr>';

                for (var j = 0; j < columns; j++) {
                    // create cell
                    tbody += '<td contenteditable="true" id=' + '"cell-id-' + i.toString() + j.toString() + '"' + 'placeholder=' + '"' + i.toString() + j.toString() + '"' + '>';
                    tbody += '</td>';
                }

                // closing row table
                tbody += '</tr>\n';

            }
            var tfooter = '</table>';

            tableSpace.innerHTML = (theader + tbody + tfooter);
        }
    } else {
        alert("Number of columns should not exceed four");
        return;
    };
});

$(document).on("click", "#tree-delete-table-from-given", function (e) {
    document.getElementById("tree-create-table-from-given").disabled = false;

    rows = document.getElementById('tree-number-of-rows-table');
    columns = document.getElementById('tree-number-of-columns-table');
    rows.value = 0;
    columns.value = 0;
    document.getElementById("tree-table-generation-space").innerHTML = ""
    // document.getElementById("save-tree").click();
});

// **********************************   Termination Keyword   ****************

function check_for_chips() {
    var termination_keyword_list = M.Chips.getInstance($('#flow_termination_keywords')).chipsData;
    if (termination_keyword_list.length) {
        $('#flow_termination_bot_response').trumbowyg('enable');
    } else {
        $('#flow_termination_bot_response').trumbowyg('html', '');
        $('#flow_termination_bot_response').trumbowyg('disable');

    }
}
if (window.location.pathname.indexOf("/chat/channels/web") != -1) {

    $("#welcome-banner-list").sortable({
        containment: 'parent',
    })

    add_language_extend_button_event_listner()
}

if (window.location.pathname.indexOf("/chat/bot/edit") != -1) {

    $(document).ready(function () {
        try {

            if (IS_PDF_SEARCH_ACCESS_ALLOWED != "True") {
                document.getElementById("easychat-checkbox-pdfsearch-enable").disabled = true;
            }
            if (IS_LEAD_GENRATION_ACCESS_ALLOWED != "True") {
                document.getElementById("checkbox-bot-lead-generation-enabled").disabled = true;
            }

        } catch (err) {
            console.log(err)
        }
    });

}


if (window.location.pathname.indexOf("/chat/bot/edit") != -1) {

    $('#bot_settings_tab').on('click', function () {
        if (!build_bot_timer) {
            track_build_bot_progress();
            build_bot_timer = setInterval(track_build_bot_progress, 5000);
        }
    })

    try {
        selected_channels_list_nps = $('#multi-select-channels').val();
        const WhatsAppValue = selected_channels_list_nps.some(element => {
            return element.toLowerCase() === "WhatsApp".toLowerCase();
        });
        const ViberValue = selected_channels_list_nps.some(element => {
            return element.toLowerCase() === "Viber".toLowerCase();
        });
        const WebValue = selected_channels_list_nps.some(element => {
            return element.toLowerCase() === "Web".toLowerCase();
        });
        if (WhatsAppValue) {
            document.getElementById("whatsapp-nps-timer").style.display = 'table-row';
        } else {
            document.getElementById("whatsapp-nps-timer").style.display = 'none';
        }

        if (ViberValue) {
            document.getElementById("viber-nps-timer").style.display = 'table-row';
        } else {
            document.getElementById("viber-nps-timer").style.display = 'none';
        }

        if (WebValue) {
            document.getElementById("csat-configuration").style.display = 'table-row';
        } else {
            document.getElementById("csat-configuration").style.display = 'none';
        }

        $('#multi-select-channels').on('change', function () {
            var selected_channels = $('#multi-select-channels').val();
            const WebValue = selected_channels.some(element => {
                return element.toLowerCase() === "Web".toLowerCase();
            });
            if (WebValue) {
                document.getElementById("csat-configuration").style.display = 'table-row';
            } else {
                document.getElementById("csat-configuration").style.display = 'none';
            }
        })

    } catch { }
    $('#easychat_order_of_responses').sortable({
        scroll: true,
        scrollSensitivity: 10,
        containment: 'parent',
    })

    //Sortable.mount(new AutoScroll());

    var stop_words, added_words = [],
        deleted_words = [];
    var selected_bot_pk = window.location.href.split("/")[6]
    $("#flow_termination_keywords").chips({
        onChipAdd: check_for_chips,
        onChipDelete: check_for_chips,
    });
    let selected_language = get_url_vars()['selected_language']
    if (selected_language.length > 2) {
        selected_language = selected_language.substring(0, 2)
    }
    if (selected_language == undefined || selected_language == null) {
        selected_language = "en"
    }

    csrf_token = get_csrf_token();
    json_string = JSON.stringify({
        selected_bot_pk: selected_bot_pk,
        selected_language: selected_language,
    });

    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/bot/get-general-details/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                keywords = response["flow_termination_keywords"]
                data = []
                for (var i = 0; i < keywords.length; i++) {

                    data.push({
                        "tag": keywords[i]
                    });
                }
                setTimeout(function () {

                    $("#flow_termination_bot_response").trumbowyg({
                        tagsToKeep: [],
                        defaultLinkTarget: '_blank',
                        allowTagsFromPaste: {
                            allowedTags: ['h4', 'p', 'br']
                        },
                        minimalLinks: true,
                        btns: [
                            // ['viewHTML'],
                            ['strong', 'em'],
                            ['link'],
                            ['unorderedList', 'orderedList'],
                            ['underline'],
                            ['emoji'],
                        ],
                    }).on('tbwinit', function () {
                        $('#flow_termination_bot_response').trumbowyg('html', response["flow_termination_bot_response"]);
                    });

                    $("#flow_termination_confirmation_display_message").trumbowyg({
                        tagsToKeep: [],
                        defaultLinkTarget: '_blank',
                        allowTagsFromPaste: {
                            allowedTags: ['h4', 'p', 'br']
                        },
                        minimalLinks: true,
                        btns: [
                            // ['viewHTML'],
                            ['strong', 'em'],
                            ['link'],
                            ['unorderedList', 'orderedList'],
                            ['underline'],
                            ['emoji'],
                        ],
                    }).on('tbwinit', function () {
                        $('#flow_termination_confirmation_display_message').trumbowyg('html', response["flow_termination_confirmation_display_message"]);
                    });


                    if (keywords.length) {
                        // $('.chips').chips();
                        is_flow_termination_bot_response_required = true
                        $("#flow_termination_keywords").chips({
                            data: data,
                            onChipAdd: check_for_chips,
                            onChipDelete: check_for_chips,
                        });
                        $('#flow_termination_confirmation_display_message').trumbowyg('enable');


                    } else {
                        $('#flow_termination_confirmation_display_message').trumbowyg('html', '');
                        $('#flow_termination_confirmation_display_message').trumbowyg('disable');

                    }

                    $(".emoji-response").trumbowyg({
                        tagsToKeep: [],
                        defaultLinkTarget: '_blank',
                        allowTagsFromPaste: {
                            allowedTags: ['h4', 'p', 'br']
                        },
                        minimalLinks: true,
                        btns: [
                            // ['viewHTML'],
                            ['strong', 'em'],
                            ['link'],
                            ['unorderedList', 'orderedList'],
                            ['underline'],
                            ['emoji'],
                        ],
                    }).on('tbwinit', function () {
                        $('#angry-emoji-response').trumbowyg('html', response["emoji_angry_response_text"]);
                        $('#happy-emoji-response').trumbowyg('html', response["emoji_happy_response_text"]);
                        $('#neutral-emoji-response').trumbowyg('html', response["emoji_neutral_response_text"]);
                        $('#sad-emoji-response').trumbowyg('html', response["emoji_sad_response_text"]);
                    });
                    var add_intent_livechat_object = JSON.parse(response["add_livechat_intent"])
                    enable_emoji_livechat_checkbox(window.is_livechat_enabled, add_intent_livechat_object)

                }, 1500)




                try {
                    stop_words = response['stop_words'];
                    configure_stop_words()



                    default_order_of_response = response['default_order_of_response'];
                    configure_default_order_of_response();
                } catch (err) {
                    console.log(err)
                }
            }
        },
        error: function (jqXHR, exception) {
            console.log(jqXHR, exception);
        }
    });
    try {

        try {
            var easy_search_value = document.getElementById("search-filter").value;
        } catch { }
        if (easy_search_value == "1") {
            document.getElementById("e-search-functionality").style.display = "block"
            document.getElementById("g-search-functionality").style.display = "none"
        } else if (easy_search_value == "2") {
            document.getElementById("g-search-functionality").style.display = "block"
            document.getElementById("e-search-functionality").style.display = "none"
        }
        // }catch{}


        add_tms_categories();
        // //////////////

        // ///////////
        var feedback_config_elem = document.getElementById('checkbox-csat-feedback');
        toggle_csat_feedback_checkbox(feedback_config_elem)

        document.getElementById("add_drop_down_tms_cat")
            .addEventListener("keyup", function (event) {
                event.preventDefault();
                if (event.keyCode === 13) {
                    value = document.getElementById("add_drop_down_tms_cat").value;
                    value = value.trim()
                    regex = /^[a-zA-Z0-9_ ]+$/
                    var tms_cat_drop_down_list = get_tms_cat_drop_down_list()
                    if (tms_cat_drop_down_list.includes(value.toLowerCase())) {
                        showToast("Category with the same name already exists.", 2000)
                    } else if (!regex.test(value)) {
                        showToast("Category Name should contain only Alphabets and Numbers.Special Characters are not allowed", 2000)
                    } else if (value.length > tms_cat_limit) {
                        showToast("Category Name should be less than " + tms_cat_limit + " Characters", 2000)
                    } else {
                        add_tms_drop_down_cat_collection(value);
                    }
                    document.getElementById("add_drop_down_tms_cat").value = "";
                }
            });
    } catch { }
    let url_selected_language = get_url_vars()['selected_language']
    $(document).ready(function () {
        create_language_custom_dropdowns_for_bot_configuration();
        if (NEED_TO_SHOW_AUTO_FIX_MODAL == "True") {
            setTimeout(function () {
                $('#edit-response-language-settings-modal').modal('open');
            }, 300)
        }

        try {
            auto_grow_textarea(document.getElementById("bot-response-delay-msg"))
        } catch { }
        try {
            auto_grow_textarea(document.getElementById("bot-inactivity-msg"))
        } catch { }


    });
    add_language_selction_event_for_bot_configuration()
    add_language_dropdown_search_event()

    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event_configurations()
    $(document).on("click", "#ignore-non-primary-bot-configuration", function (e) {
        ignore_bot_configuration_changes_in_non_primary_languages(selected_bot_pk);
    });
    $(document).on("click", "#auto-fix-non-primary-bot-configuration", function (e) {
        auto_fix_bot_configuration_changes_in_non_primary_languages(selected_bot_pk);
    });
}


function enable_emoji_livechat_checkbox(is_enabled_livechat, add_intent_livechat_object) {

    if (add_intent_livechat_object["angry"] == "True") {
        document.getElementById("angry-emoji-response-livechat").checked = true
    }

    if (add_intent_livechat_object["happy"] == "True") {
        document.getElementById("happy-emoji-response-livechat").checked = true
    }

    if (add_intent_livechat_object["neutral"] == "True") {
        document.getElementById("neutral-emoji-response-livechat").checked = true
    }

    if (add_intent_livechat_object["sad"] == "True") {
        document.getElementById("sad-emoji-response-livechat").checked = true
    }


}

function check_for_duplicates_in_tms_cat(toast_text = "") {
    let cat_list = get_tms_cat_drop_down_list()
    let map = {};
    let result = false;
    regex = /^[a-zA-Z0-9_ ]+$/
    if (cat_list.length == 0) {
        showToast("At least one choice in TMS Dropdown Category is required.", 2000)
        return true
    }
    for (let i = 0; i < cat_list.length; i++) {
        cat_list[i] = cat_list[i].trim().toLowerCase()
        if (!regex.test(cat_list[i])) {
            showToast("Category Name should contain only Alphabets and Numbers.Special Characters are not allowed", 2000)
            return true
        }
        if (map[cat_list[i]]) {
            result = true;
            break;
        }
        map[cat_list[i]] = true;
    }
    if (result) {
        if (toast_text == "") {
            toast_text = "Category with the same name already exists."
        }
        showToast(toast_text, 2000)
        return true
    } else {
        $('#modal-add-tms-category').modal('close');
    }
    return false
}

function add_tms_categories() {
    let values = window.tms_cat_drop_down_choices_value.split("_")
    if (values != []) {
        for (var i = 0; i < values.length; i++) {
            value = values[i];
            add_tms_drop_down_cat_collection(value)
        }
    }
}

$(document).on("change", "#checkbox-bot-form-assist-enabled", function (e) {
    checkbox_form_assist_enbaled = document.getElementById("checkbox-bot-form-assist-enabled").checked;
    if (checkbox_form_assist_enbaled == false) {
        document.getElementById("is-form-assist-auto-popup-allowed").checked = false;
        $("#is-bot-auto-popup-allowed").removeAttr("disabled", "disabled");
    }
});

function configure_default_order_of_response() {
    if (default_order_of_response.length == 0) {
        default_order_of_response = ['text', 'image', 'table', 'video', 'link_cards', 'intent_level_feedback', 'quick_recommendations', 'drop_down', 'date_picker', 'checkbox', 'radio_button', 'range_slider', 'form', 'time_picker', 'calendar_picker', 'file_attach', 'video_record', 'phone_number'];
    }

    let order_div = document.getElementById('easychat_order_of_responses');
    let drag_img = '<span class="easychat-drag-response"><img src="/static/EasyChatApp/img/dragger.svg"></span>';
    let response_item;

    order_div.innerHTML = ''
    for (res of default_order_of_response) {
        response_item = '<div class="easychat-intent-response-item">' + res + drag_img + '</div>';
        $(order_div).append(response_item);
    }
}

function save_default_response() {
    $('#modal-configure-default-response').modal('close');
}

function cancel_default_response() {
    configure_default_order_of_response();
    $('#modal-configure-default-response').modal('close');
}

function configure_stop_words() {
    $('#stop_words_div').chips({
        onChipDelete: function (e, data) {
            delete_stop_words(e, data)
        },
        onChipAdd: function (e, data) {
            add_stop_words(e, data)
        }
    });

    var alphabets = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
    var html = '';
    for (alphabet of alphabets) {
        html += '<option value = ' + alphabet + '>' + alphabet + '</option>';
    }

    document.getElementById('filter-stop-words').innerHTML = html;
    if (typeof stop_words == 'string') {
        stop_words = stop_words.replace('[', '');
        stop_words = stop_words.replace(']', '');
        stop_words = stop_words.split(',');
    }

    var elem = $('#stop_words_div');
    var instance = M.Chips.getInstance(elem)
    for (let i = 0; i < stop_words.length; ++i) {
        stop_word = stop_words[i].trim();

        if (stop_word.charAt(0) == '"') {
            stop_word = stop_word.replace(/"/g, "");

        } else {
            stop_word = stop_word.replace(/'/g, "");
        }

        stop_words[i] = stop_word;

        if (stop_word.charAt(0) == 'a' || stop_word.charAt(0) == 'A') {
            instance.addChip({
                tag: stop_word
            });
        }
    }
}

function stop_words_filter(elem) {
    if (elem == undefined) {
        elem = document.getElementById('filter-stop-words');
    }
    var selected_alphabet = elem.value;

    var elem = $('#stop_words_div');
    elem.chips({
        data: [],
        onChipDelete: function (e, data) {
            delete_stop_words(e, data)
        },
        onChipAdd: function (e, data) {
            add_stop_words(e, data)
        }
    });
    var instance = M.Chips.getInstance(elem)
    for (stop_word of stop_words) {
        if (stop_word.charAt(0) == selected_alphabet.toLowerCase() || stop_word.charAt(0) == selected_alphabet) {
            instance.addChip({
                tag: stop_word
            });
        }
    }
}

function delete_stop_words(e, data) {
    var deleted_word = data.childNodes[0].textContent;

    if (stop_words.includes(deleted_word) == true) {
        deleted_words.push(deleted_word);
    }
}

function add_stop_words(e, data) {
    var added_word = data.childNodes[0].textContent;
    var selected_alphabet = document.getElementById('filter-stop-words').value;
    var need_to_delete = false;
    var alphabets = /^[A-Za-z/']+$/;

    if (!added_word.match(alphabets)) {
        M.toast({
            "html": "Invalid input!"
        },
            2000)

        need_to_delete = true;

    } else if (added_word[0].toLowerCase() != selected_alphabet.toLowerCase()) {
        M.toast({
            "html": "Invalid input. Please enter stop words starting with " + selected_alphabet + " only"
        },
            2000)

        need_to_delete = true;
    } else if (stop_words.includes(added_word) == false && stop_words.join('|').toLowerCase().split('|').includes(added_word.toLowerCase())) {
        need_to_delete = true;
    } else if (added_words.join('|').toLowerCase().split('|').includes(added_word.toLowerCase())) {
        need_to_delete = true;
    }

    if (need_to_delete) {
        var added_el = e[0].M_Chips.chipsData
        var ind = added_el[added_el.length - 1]
        var elem = $('#stop_words_div');
        var instance = M.Chips.getInstance(elem);
        instance.deleteChip(added_el.length - 1);
    }

    if (!need_to_delete && stop_words.includes(added_word) == false) {
        added_words.push(added_word);
    }
}

function go_back_stop_words_modal() {
    document.getElementById('stop-words-modal-content-before').style.display = 'block';
    document.getElementById('stop-words-modal-content-after').style.display = 'none';
    document.getElementById('stop-words-modal-cancel').style.display = 'inline-block';
    document.getElementById('save-all-intents-modal-cancel').style.display = 'none';
    document.getElementById('stop-words-modal-save').style.display = 'inline-block';
    document.getElementById('stop-words-modal-save-all-intents').style.display = 'none';
    document.getElementById('stop-words-modal-go-back').style.display = 'none';
}

function go_to_next_stop_words_modal() {
    document.getElementById('stop-words-modal-content-before').style.display = 'none';
    document.getElementById('stop-words-modal-content-after').style.display = 'block';
    document.getElementById('stop-words-modal-cancel').style.display = 'none';
    document.getElementById('save-all-intents-modal-cancel').style.display = 'inline-block'
    document.getElementById('stop-words-modal-save').style.display = 'none';
    document.getElementById('stop-words-modal-save-all-intents').style.display = 'inline-block';
    document.getElementById('stop-words-modal-go-back').style.display = 'inline-block';
}

function resave_all_intents() {
    document.getElementById('stop-words-modal-content-saving').style.display = 'block';
    document.getElementById('stop-words-modal-content-after').style.display = 'none';
    document.getElementById('stop-words-modal-save').style.display = 'none';
    document.getElementById('stop-words-modal-cancel').style.display = 'none';
    document.getElementById('stop-words-modal-save-all-intents').style.display = 'none';
    document.getElementById('stop-words-modal-go-back').style.display = 'none';
    document.getElementById('save-all-intents-modal-cancel').style.display = 'none';

    let bot_id = window.location.pathname.split("/")[4];
    json_string = JSON.stringify({
        "bot_id": bot_id,
    });
    json_string = EncryptVariable(json_string)

    $.ajax({
        url: "/chat/resave-all-intents/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response);
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "All intents have been resaved!"
                }, 2000);

                $('#modal-configure-stop-words').modal('close');
                go_back_stop_words_modal();

                setTimeout(function () {
                    window.location.reload();
                }, 3000);
            } else {
                M.toast({
                    "html": "Some error occured"
                }, 2000);
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log(xhr);
            console.log(textstatus);
            console.log(errorthrown);
        }
    });

}

function save_stop_words() {
    var words_to_add = [];
    for (stop_word of stop_words) {
        if (deleted_words.includes(stop_word) == false) {
            words_to_add.push(stop_word);
        }
    }

    for (added_word of added_words) {
        if (deleted_words.includes(added_word) == false) {
            words_to_add.push(added_word);
        }
    }

    bot_id = window.location.pathname.split("/")[4];

    json_string = JSON.stringify({
        "bot_id": bot_id,
        "bot_stop_keywords": words_to_add,
    });
    json_string = EncryptVariable(json_string)

    $.ajax({
        url: "/chat/save-stop-words/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                go_to_next_stop_words_modal();
            } else {
                M.toast({
                    "html": "Unable to save stop words"
                }, 2000);
            }
        },
        error: function (xhr, textstatus, errorthrown) { }
    });
}

function cancel_save_all_intents_modal() {
    go_back_stop_words_modal();
    $('#modal-configure-stop-words').modal('close');

    setTimeout(function () {
        window.location.reload();
    }, 3000);
}

function cancel_stop_words_modal() {
    deleted_words = [];
    added_words = [];
    go_back_stop_words_modal();
    $('#modal-configure-stop-words').modal('close');
}

function disable_small_talk(bot_id) {
    csrf_token = get_csrf_token();
    json_string = JSON.stringify({
        "bot_id": bot_id
    });
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/disable-small-talk/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Small Talk has been disabled successfully."
                }, 2000);
                setTimeout(function () {
                    window.location.reload();
                }, 2000);
            } else {
                M.toast({
                    "html": response["message"]
                }, 2000);
            }
        },
        error: function (jqXHR, exception) {
            console.log(jqXHR, exception);
        }
    });
}

function enable_small_talk(bot_id) {
    csrf_token = get_csrf_token();
    json_string = JSON.stringify({
        "bot_id": bot_id
    });
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/enable-small-talk/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Small Talk has been enabled successfully."
                }, 2000);
                setTimeout(function () {
                    window.location.reload();
                }, 2000);
            } else {
                M.toast({
                    "html": response["message"]
                }, 2000);
            }
        },
        error: function (jqXHR, exception) {
            console.log(jqXHR, exception);
        }
    });
}

function create_flow_excel() {
    editor.events.nodeUnselected.listeners[0](selected_node)

    intent_id = get_url_vars()["intent_pk"]

    var my_excel_file = ($("#my_excel_file"))[0].files[0];

    if (my_excel_file == undefined || my_excel_file == null) {
        M.toast({
            "html": "Please provide excel sheet in required format."
        }, 2000);
        return;
    }

    if (check_malicious_file(my_excel_file.name) == true) {
        return;
    }

    var formData = new FormData();
    formData.append("my_excel_file", my_excel_file);
    formData.append("intent_id", intent_id);
    $.ajax({
        url: "/chat/create-flow-excel/",
        type: "POST",
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
            console.log(response)
            if (response['status'] == 200) {
                M.toast({
                    'html': response["message"]
                }, 2000);
                const tree_structure = fetchIntentTreeStructureByIntentID(intent_id, SELECTED_LANGUAGE)
                editor.clear()
                editor.nodeId = 1
                node_intent_data = {}
                build_initial_flow(tree_structure[1], true, null, window.outerWidth / 6)
                update_flow()
                update_node_vertical_positions(1)
                $("#modal-add-from-templates").modal("close")
            } else if (response['status'] == 101) {
                M.toast({
                    'html': response["message"]
                }, 2000);
            } else if (response['status'] == 300) {
                M.toast({
                    'html': response["message"]
                }, 2000);
            } else {
                try {
                    M.toast({
                        'html': response["status_message"]
                    }, 2000);
                } catch (e) {
                    console.log(e)
                    // M.toast({'html':"Please check excel file format"}, 2000);
                }
                //M.toast({'html':"Please check excel file format"}, 2000);
            }
            $("#modal-add-from-templates").modal("close")
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });
}

function show_select(bot_id) {
    selected_misdashboard_list = document.getElementsByClassName("selected-misdashboard");
    // console.log(selected_misdashboard_list);
    chosen_bot_id = ""
    for (var i = 0; i < selected_misdashboard_list.length; i++) {
        id = selected_misdashboard_list[i].id;
        flag = false;
        // if (document.getElementById(id).checked == true) {
        //     message_history_id = id.split('-')[4];
        //     console.log(message_history_id);
        //     bot_id = document.getElementById("message-history-bot-id-"+message_history_id).getAttribute('value');
        //     console.log(bot_id);
        //     if(chosen_bot_id == "")
        //     {
        //       chosen_bot_id = bot_id;
        //     }
        //     else if(chosen_bot_id != bot_id && mess)
        //     {
        //       flag == true;
        //       alert("The messages should belong to same bot!");
        //     }
        // }

        chosen_bot_id = bot_id;
        if (flag == false) {
            $(".modal-message-history-action").modal();
            $("#modal-message-history-action").modal('open');
            document.getElementById("match-intent-btn").disabled = true;
            $.ajax({
                url: '/fetch-intents-of-bot-selected/',
                type: "POST",
                headers: {
                    "X-CSRFToken": get_csrf_token()
                },
                data: {
                    'bot_pk': chosen_bot_id,
                },
                success: function (response) {
                    if (response["status"] == 200) {

                        intents = response["intents"];
                        intent_list = '';
                        intent_list += "<option value= 'select_intent' selected> Select Intent </option>";
                        for (var i = 0; i < intents.length; i++) {
                            intent_list += "<option value=" + intents[i]['pk'] + ">" + intents[i]["name"] + "</option>";
                        }
                        document.getElementById("select-show-bot-intent").innerHTML = intent_list;
                        $("#select-show-bot-intent").select2({
                            dropdownParent: $("body"),
                            width: "100%",
                        });
                    }
                },
                error: function (xhr, textstatus, errorthrown) {
                    console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
                }
            });

        }
    }
    document.getElementById("show-bot-intent").style.display = "block";
}

function show_select_message_history(bot_id) {
    selected_misdashboard_list = document.getElementsByClassName("selected-misdashboard");
    // console.log(selected_misdashboard_list);
    chosen_bot_id = ""
    flag = false;


    chosen_bot_id = bot_id;
    if (flag == false) {
        $(".modal-message-history-action").modal();
        $("#modal-message-history-action").modal('open');
        document.getElementById("match-intent-btn").disabled = true;
        $.ajax({
            url: '/fetch-intents-of-bot-selected/',
            type: "POST",
            headers: {
                "X-CSRFToken": get_csrf_token()
            },
            data: {
                'bot_pk': chosen_bot_id,
            },
            success: function (response) {
                if (response["status"] == 200) {

                    intents = response["intents"];
                    intent_list = '';
                    intent_list += "<option value= 'select_intent' selected> Select Intent </option>";
                    for (var i = 0; i < intents.length; i++) {
                        intent_list += "<option value=" + intents[i]['pk'] + ">" + intents[i]["name"] + "</option>";
                    }
                    document.getElementById("select-show-bot-intent").innerHTML = intent_list;
                    $("#select-show-bot-intent").select2({
                        dropdownParent: $("body"),
                        width: "100%",
                    });

                }
            },
            error: function (xhr, textstatus, errorthrown) {
                console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
            }
        });

    }

    document.getElementById("show-bot-intent").style.display = "block";
}

function disable_submit_btn() {

    select_option_value = document.getElementById("select-show-bot-intent").value;

    if (select_option_value == 'select_intent') {

        $('#match-intent-btn').attr('disabled', 'disabled');
    } else {

        $('#match-intent-btn').removeAttr('disabled')

    }

}

function map_message_to_intent() {
    chosen_intent_pk = document.getElementById("select-show-bot-intent").value;
    chosen_intent_name = document.getElementById("select-show-bot-intent").textContent;
    if(chosen_intent_pk == "select_intent") {
        M.toast({
            "html": "Please select a valid intent!"
        });
        return;
    }
    message_history_ids = [];
    for (var i = 0; i < selected_misdashboard_list.length; i++) {
        id = selected_misdashboard_list[i].id;
        flag = false;
        if (document.getElementById(id).checked == true) {
            message_history_id = id.split('-')[4];
            message_history_ids.push(parseInt(message_history_id))
        }
    }
    $.ajax({
        url: '/match-message-with-intent/',
        type: "POST",
        headers: {
            "X-CSRFToken": get_csrf_token()
        },
        data: {
            'message_history_ids': message_history_ids,
            'intent_pk': chosen_intent_pk,
        },
        success: function (response) {
            console.log(response)
            if (response["status"] == 200) {
                $("#modal-message-history-action").modal('close');
                $("#modal-message-history-action-warning").modal('open');


            } else if (response["status"] == 300) {
                $("#modal-message-history-action").modal('close');
                $("#modal-message-history-action-error").modal('open');
                unmatched_message_list = response["message_not_matched"]
                message_list = ''
                for (var i = 0; i < unmatched_message_list.length; i++) {
                    message_list += '<li style="list-style-type:disc;margin-left:10%">';
                    message_list += unmatched_message_list[i];
                    message_list += '</li>';
                }
                document.getElementById("unmatched-message-list").innerHTML = message_list;
                $('[data-toggle="tooltip"]').tooltip();
                $('.tooltipped').tooltip();
            } else {
                $("#modal-message-history-action").modal('close');
                M.toast({
                    "html": "Internal Server Error. Try again later!"
                });
            }
            action_taken_dict = response['action_taken'];
            for (var i = 0; i < message_history_ids.length; i++) {
                id = message_history_ids[i];
                action_taken_string = ''
                action_taken_string += '<li>';
                action_taken_string += action_taken_dict[id]['match']['message'];
                action_taken_string += '</li>';

                document.getElementById('message-history-action-taken-' + id).innerHTML = action_taken_string;
                $('.tooltipped').tooltip();
            }

        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });
}

function close_message_error_modal() {
    $("#modal-message-history-action-error").modal("close");
}

function close_message_warning_modal() {
    $("#modal-message-history-action-warning").modal("close");
}

//////////////////////// Variations Beta //////////////////////////////
// $(document).on('click', '#suggest-variations-btn', function () {
//     var selected_bot_pk = $("#multiple-select-bot-choice-pk-list").val()
//     var intent_name = $("#intent_name").val()
//     var json_string = JSON.stringify({
//         intent_name: intent_name,
//         bot_id: selected_bot_pk,
//         page_no: 1
//     });
//     document.getElementById("suggest-variations-btn").innerHTML = "Generating...."
//     setTimeout(function () {
//         json_string = EncryptVariable(json_string);
//         $.ajax({
//             url: '/chat/get-variations/',
//             type: "POST",
//             data: {
//                 json_string: json_string
//             },
//             dataType: "json",
//             async: false,
//             success: function (response) {
//                 response = custom_decrypt(response)
//                 response = JSON.parse(response);
//                 document.getElementById("suggest-variations-btn").innerHTML = '<i class="inline-icon material-icons">add</i> Suggest Variations <sup><b> BETA</b></sup>'
//                 if (response['status'] == 200) {
//                     variations = response["variation_list"]
//                     more_var = response["more_var"]
//                     $("#show-more-variations").hide()
//                     if (more_var) {
//                         temp_string = "add_more_variation('" + bot_id + "','" + intent_name + "',1)"
//                         document.getElementById("show-more-variations").setAttribute("onclick", temp_string)
//                         $("#show-more-variations").show()
//                     }
//                     if (variations.length > 0) {
//                         for (var i = 0; i < variations.length; i++) {
//                             addIntentTrainingDataIntoCollection(variations[i]);
//                         }
//                         M.toast({
//                             'html': "Variations added successfully!",
//                             'displayLength': 3000
//                         }, 2000);
//                     } else {
//                         M.toast({
//                             'html': "No Variations generated!",
//                             'displayLength': 3000
//                         }, 2000);
//                     }
//                 } else {
//                     M.toast({
//                         'html': "Error while generating Variations!",
//                         'displayLength': 3000
//                     }, 2000);
//                 }
//             }
//         });
//     }, 1000)
// });

// function add_more_variation(bot_pk, intent_name, page_no) {
//     // var selected_bot_pk = $("#multiple-select-bot-choice-pk-list").val()
//     // var intent_name = $("#intent_name").val()
//     var json_string = JSON.stringify({
//         intent_name: intent_name,
//         bot_id: bot_pk,
//         page_no: page_no
//     });
//     document.getElementById("show-more-variations").innerHTML = "Showing..."
//     setTimeout(function () {
//         json_string = EncryptVariable(json_string);
//         $.ajax({
//             url: '/chat/get-variations/',
//             type: "POST",
//             data: {
//                 json_string: json_string
//             },
//             dataType: "json",
//             async: false,
//             success: function (response) {
//                 response = custom_decrypt(response)
//                 response = JSON.parse(response);
//                 document.getElementById("suggest-variations-btn").innerHTML = '<i class="inline-icon material-icons">add</i> Suggest Variations <sup><b> BETA</b></sup>'
//                 if (response['status'] == 200) {
//                     variations = response["variation_list"]
//                     more_var = response["more_var"]
//                     document.getElementById("show-more-variations").innerHTML = "Show More"
//                     $("#show-more-variations").hide()
//                     if (more_var) {
//                         temp_string = "add_more_variation('" + bot_id + "','" + intent_name + "'," + (page_no + 1) + ")"
//                         document.getElementById("show-more-variations").setAttribute("onclick", temp_string)
//                         $("#show-more-variations").show()
//                     }
//                     if (variations.length > 0) {
//                         for (var i = 0; i < variations.length; i++) {
//                             addIntentTrainingDataIntoCollection(variations[i]);
//                         }
//                         M.toast({
//                             'html': "Variations added successfully!",
//                             'displayLength': 3000
//                         }, 2000);
//                     } else {
//                         M.toast({
//                             'html': "No Variations generated!",
//                             'displayLength': 3000
//                         }, 2000);
//                     }
//                 } else {
//                     document.getElementById("show-more-variations").innerHTML = "Show More"
//                     M.toast({
//                         'html': "Error while generating Variations!",
//                         'displayLength': 3000
//                     }, 2000);
//                 }
//             }
//         });
//     }, 1000)
// };

function submit_request_for_package_installation(element) {
    csrf_token = get_csrf_token();
    bot_id = document.getElementById("selected-bot-for-package").value;
    if (bot_id == "None") {
        showToast("Please select valid bot");
        return;
    }

    package = document.getElementById("new-package-name").value;
    if (package.trim() == "") {
        showToast("Please enter valid package name");
        return;
    }

    description = document.getElementById("new-package-description").value;
    if (description.trim() == "") {
        showToast("Please provide reason for package installation");
        return;
    }

    json_string = JSON.stringify({
        "bot_id": bot_id,
        "package": package,
        "description": description
    });

    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/submit-package-install-request/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response);
            response = JSON.parse(response);
            if (response.status == 200) {
                M.toast({
                    "html": "Request for package installation has been submitted!"
                }, 2000);
                setTimeout(function () {
                    window.location.reload();
                }, 2000);
            } else {
                M.toast({
                    "html": "Unable to submit your request"
                }, 2000);
            }
        },
        error: function (jqXHR, exception) {
            console.log(jqXHR, exception);
        }
    });
}

function take_package_installation_action(element, action, package_manager_id) {

    csrf_token = get_csrf_token();

    json_string = JSON.stringify({
        "package_manager_id": package_manager_id,
        "action": action
    });

    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/take-action-package-install/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response);
            response = JSON.parse(response);
            if (response.status == 200) {
                M.toast({
                    "html": "Review has been submitted!"
                }, 2000);
                setTimeout(function () {
                    window.location.reload();
                }, 2000);
            } else {
                M.toast({
                    "html": "Unable to submit your review"
                }, 2000);
            }
        },
        error: function (jqXHR, exception) {
            console.log(jqXHR, exception);
        }
    });
}

if (window.location.href.indexOf("/chat/package-installer") != -1) {
    $(document).ready(function () {
        $('#table-package-installation').DataTable({
            dom: 'Bfrtip',
            "pageLength": 200,
            "paging": true,
            "ordering": false,
        });
    });
}

function submit_filter_data_model(bot_pk) {
    var selected_user = $("#data-model-userid-filter").val()
    var selected_variable = $("#data-model-variable-filter").val()
    if(selected_user == ""){
        selected_user = "All"
    }
    if(selected_variable == ""){
        selected_variable = "All"
    }
    window.location = '/chat/data-model-entries/?bot_pk=' + bot_pk + '&selected_user=' + selected_user + '&selected_variable=' + selected_variable
}

function delete_filter_chosen(ele) {
    if ($(ele).parent().parent().attr("filter_parameter").indexOf("date_to") != -1) {
        $(ele).parent().parent().prev().remove();
    }
    ele.parentNode.parentNode.remove();
}

function show_import_intent_modal() {
    $("#modal-import-intent-json").modal('open');
}

function fetch_metadata() {
    var sso_metadata = String($("#sso_metadata_content").val())
    csrf_token = get_csrf_token()

    json_string = JSON.stringify({
        "sso_metadata": sso_metadata,
    });
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/sso-data-functionality/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "SSO metadata saved!"
                }, 2000)

            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        }
    });
}

function download_metadata_file() {
    window.location = "/chat/sso-data-functionality/"
}



///////////////// API analytics  //////////////////////
var filter_type = "last_month"


function submit_api_analytics_filter(bot_pk) {
    try {
        filter_type = document.getElementById("modal-api-analytics").value
    } catch {
        filter_type = document.getElementById("modal-api-statistics").value
    }
    var api_name = $("#select-api-name").val()
    var api_status = $("#select-api-status").val()
    var start_date = $("#api-analytics-default-start-date").val()
    var end_date = $("#api-analytics-default-end-date").val()
    var user_id = $("#select-api-user-id").val()
    var start_datetime = new Date(start_date);
    var end_datetime = new Date(end_date);
    if (start_datetime > end_datetime) {

        alert("\"Start Date\" should be less than \"End Date\"")
        return;
    }
    if (filter_type == "custom_timestamp") {
        var date = $("#api-analytics-timestamp-date").val()
        var start_time = $("#api-analytics-timestamp-start-time").val()
        var end_time = $("#api-analytics-timestamp-end-time").val()
        if (start_time > end_time) {
            alert("\"Start Date\" should be less than \"End Date\"")
            return;
        }
        if (user_id != "") {
            window.location.href = "?filter_type=" + filter_type + "&bot_pk=" + bot_pk + "&selected_api_status=" + api_status + "&selected_api_name=" + api_name + "&start_date=" + date + "&start_time=" + start_time + "&end_time=" + end_time + "&user_id=" + user_id;
        } else {
            window.location.href = "?filter_type=" + filter_type + "&bot_pk=" + bot_pk + "&selected_api_status=" + api_status + "&selected_api_name=" + api_name + "&start_date=" + date + "&start_time=" + start_time + "&end_time=" + end_time;
        }
    } else {
        if (user_id != "") {
            window.location.href = "?filter_type=" + filter_type + "&bot_pk=" + bot_pk + "&selected_api_status=" + api_status + "&selected_api_name=" + api_name + "&start_date=" + start_date + "&end_date=" + end_date + "&user_id=" + user_id;
        } else {
            window.location.href = "?filter_type=" + filter_type + "&bot_pk=" + bot_pk + "&selected_api_status=" + api_status + "&selected_api_name=" + api_name + "&start_date=" + start_date + "&end_date=" + end_date;
        }
    }
}

$(document).on("change", "#modal-api-statistics", function (e) {

    filter_type = document.getElementById("modal-api-statistics").value
    document.getElementById("modal-api-statistics-custom-date").style.display = "none"

    if (filter_type == "last_month") {

        document.getElementById("api-statistics-start-date").value = document.getElementById("api-statistics-start-date").getAttribute("value_last_month")
    } else if (filter_type == "last_week") {

        document.getElementById("api-statistics-start-date").value = document.getElementById("api-statistics-start-date").getAttribute("value_last_week")
    } else if (filter_type == "since_go_live") {

        document.getElementById("api-statistics-start-date").value = document.getElementById("api-statistics-start-date").getAttribute("value_golive")
    } else if (filter_type == "custom_date") {

        document.getElementById("modal-api-statistics-custom-date").style.display = "block"
        document.getElementById("api-statistics-start-date").value = document.getElementById("api-statistics-start-date").getAttribute("value")
    }
});

$(document).on("change", "#modal-api-analytics", function (e) {

    filter_type = document.getElementById("modal-api-analytics").value
    document.getElementById("modal-api-analytics-custom-date").style.display = "none"
    document.getElementById("modal-api-analytics-custom-timestamp-date").style.display = "none"
    document.getElementById("modal-api-analytics-custom-timestamp-time").style.display = "none"

    if (filter_type == "last_month") {

        document.getElementById("api-analytics-default-start-date").value = document.getElementById("api-analytics-default-start-date").getAttribute("value_last_month")
        document.getElementById("modal-api-analytics-custom-timestamp-date").style.display = "none"
        document.getElementById("modal-api-analytics-custom-timestamp-time").style.display = "none"
    } else if (filter_type == "last_week") {

        document.getElementById("api-analytics-default-start-date").value = document.getElementById("api-analytics-default-start-date").getAttribute("value_last_week")
        document.getElementById("modal-api-analytics-custom-timestamp-date").style.display = "none"
        document.getElementById("modal-api-analytics-custom-timestamp-time").style.display = "none"
    } else if (filter_type == "since_go_live") {

        document.getElementById("api-analytics-default-start-date").value = document.getElementById("api-analytics-default-start-date").getAttribute("value_golive")
        document.getElementById("modal-api-analytics-custom-timestamp-date").style.display = "none"
        document.getElementById("modal-api-analytics-custom-timestamp-time").style.display = "none"
    } else if (filter_type == "custom_date") {

        document.getElementById("modal-api-analytics-custom-date").style.display = "block"
        document.getElementById("api-analytics-default-start-date").value = document.getElementById("api-analytics-default-start-date").getAttribute("value")
        document.getElementById("modal-api-analytics-custom-timestamp-date").style.display = "none"
        document.getElementById("modal-api-analytics-custom-timestamp-time").style.display = "none"
    } else if (filter_type == "custom_timestamp") {

        document.getElementById("modal-api-analytics-custom-timestamp-date").style.display = "block"
        document.getElementById("modal-api-analytics-custom-timestamp-time").style.display = "block"
        document.getElementById("api-analytics-timestamp-date").value = document.getElementById("api-analytics-timestamp-date").getAttribute("value")
    }
});

function submit_api_statistics_filter() {

    var api_name = $("#select-api-name-statistics").val()
    var start_date = $("#api-statistics-start-date").val()
    var end_date = $("#api-statistics-end-date").val()
    var start_datetime = new Date(start_date);
    var end_datetime = new Date(end_date);
    if (start_date > end_date) {

        alert("\"Start Date\" should be less than \"End Date\"")
        return;
    }

    window.location.href = "?filter_type=" + filter_type + "&bot_pk=" + SELECTED_BOT_PK + "&selected_api_name=" + api_name + "&start_date=" + start_date + "&end_date=" + end_date
}

$(document).on("change", "#logs-to-statistics-switch", function () {

    var status = document.getElementById("logs-to-statistics-switch").checked

    if (status) {

        window.location = "/chat/easychat-api-statistics/?bot_pk=" + SELECTED_BOT_PK
    } else {

        window.location = "/chat/easychat-api-analytics/?bot_pk=" + SELECTED_BOT_PK
    }
});


////////////////// Logtailer  ///////////////////////////////////////


function download_easychat_logs() {

    window.location = "/chat/download-easychat-logs/"
}

function save_analytics_monitoring_config(e, bot_pk) {

    // active_hours_start = Math.round($("#active_hours_start").val())
    // active_hours_end = Math.round($("#active_hours_end").val())

    active_hours_start = $("#active_hours_start").val()
    active_hours_end = $("#active_hours_end").val()

    if (active_hours_start == undefined || active_hours_start == "") {

        alert("Kindly enter a valid starting active hour")
        return
    }
    if (active_hours_end == undefined || active_hours_end == "") {

        alert("Kindly enter a valid Ending active hour")
        return
    }

    if (active_hours_start > active_hours_end) {
        alert("Kindly select a valid start and end time")
        return;
    }

    email_addr_list = []
    var email_addr_chip_elmts = M.Chips.getInstance($('#analytics-monitoring-email-address')).chipsData;
    for (var i = 0; i < email_addr_chip_elmts.length; i++) {

        email_addr_list.push(email_addr_chip_elmts[i]["tag"]);
    }
    if (!email_addr_list.length) {

        alert("Kindly enter an Email ID to proceed")
        return
    }
    for (var i = 0; i < email_addr_list.length; i++) {
        if (!validateEmailAddr(email_addr_list[i])) {
            alert("Please provide valid Email ID")
            return
        }
    }

    analytics_monitoring_msg_limit = $("#analytics-monitoring-message-limit").val()
    if (analytics_monitoring_msg_limit == undefined || analytics_monitoring_msg_limit == "" || analytics_monitoring_msg_limit <= 0) {

        alert("Kindly enter a valid expected no of messages")
        return
    }
    analytics_monitoring_consecutive_hrs = $("#analytics-monitoring-consecutive-hrs").val()
    if (analytics_monitoring_consecutive_hrs == undefined || analytics_monitoring_consecutive_hrs == "" || analytics_monitoring_consecutive_hrs <= 0) {

        alert("Kindly enter a valid no of consecutive hours")
        return
    }
    csrf_token = get_csrf_token()

    json_string = JSON.stringify({
        "bot_id": bot_pk,
        "consecutive_hours": analytics_monitoring_consecutive_hrs,
        "message_limit": analytics_monitoring_msg_limit,
        "email_addr_list": email_addr_list,
        "start_hour": active_hours_start,
        "end_hour": active_hours_end,
    });
    e.innerHTML = "Saving..."
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/save-analytics-monitorig-setting/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            e.innerHTML = "Save"
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Analytics Monitoring Configuration saved."
                })
                $("#save-bot-general-settings-btn").click()
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        }
    });

}

//////////////////  API Fail Email Configuration /////////////////////

function save_api_fail_email_configuration(e, bot_pk) {
    mail_sender_time_interval = $("#mail_sender_time_interval_input").val()
    let isnum = /^\d+$/.test(mail_sender_time_interval.trim());
    if (!isnum) {
        M.toast({
            "html": "Invalid time input."
        }, 2000);
        return;
    }

    if (mail_sender_time_interval == undefined || mail_sender_time_interval == "" || mail_sender_time_interval < 0) {

        alert("Kindly enter a valid time interval")
        return
    }

    email_addr_list = []
    var email_addr_chip_elmts = M.Chips.getInstance($('#api-fail-email-config-email-address')).chipsData;
    for (var i = 0; i < email_addr_chip_elmts.length; i++) {

        email_addr_list.push(email_addr_chip_elmts[i]["tag"]);
    }
    if (!email_addr_list.length) {

        alert("Kindly enter an Email ID to proceed")
        return
    }
    for (var i = 0; i < email_addr_list.length; i++) {
        if (!validateEmailAddr(email_addr_list[i])) {
            alert("Please provide valid Email ID")
            return
        }
    }
    csrf_token = get_csrf_token()

    json_string = JSON.stringify({
        "bot_id": bot_pk,
        "mail_sender_time_interval": mail_sender_time_interval,
        "mail_sent_to_list": email_addr_list,
    });
    e.innerHTML = "Saving..."
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/save-api-fail-email-config/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            e.innerHTML = "Save"
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Email Configuration saved."
                })
                if (response["email_configured"]) {
                    $("#test-api-fail-email-config").show();
                } else {
                    $("#test-api-fail-email-config").hide();
                }
            } else if (response["status"] == 300) {
                M.toast({
                    "html": response["msg"]
                })
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        }
    });

}

$(document).on("change", "#checkbox-is-api-fail-email-notifiication-enabled", function () {

    var status = document.getElementById("checkbox-is-api-fail-email-notifiication-enabled").checked
    if (status) {

        $("#edit-api-fail-email-config").show()
        if (API_FAIL_EMAIL_CONFIGURED == "true" || API_FAIL_EMAIL_CONFIGURED == "True") {

            $("#test-api-fail-email-config").show()
        }
    } else {

        $("#edit-api-fail-email-config").hide()
        if (API_FAIL_EMAIL_CONFIGURED == "true" || API_FAIL_EMAIL_CONFIGURED == "True") {

            $("#test-api-fail-email-config").hide()
        }
    }
});

function send_api_fail_test_email(bot_pk) {

    csrf_token = get_csrf_token()

    json_string = JSON.stringify({
        "bot_id": bot_pk,
    });

    json_string = EncryptVariable(json_string);
    $("#test-api-fail-email-config").val("Sending test mail...")
    $.ajax({
        url: "/chat/send-api-fail-test-email/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            $("#test-api-fail-email-config").val("Test API Failure Mail")
            $("#modal-api-fail-email-config").modal('close');
            if (response["status"] == 200) {
                M.toast({
                    "html": "Test mail sent!"
                })
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        }
    });
}


//////////////////  Endpoint Failure Email Configuration /////////////////////

function save_whatsapp_email_configuration(e, bot_channel_pk) {

    mail_sender_time_interval = $("#mail_sender_time_interval_input_whatsapp").val()

    email_addr_list = []
    var email_addr_chip_elmts = M.Chips.getInstance($('#whatsapp-email-config-email-address')).chipsData;
    for (var i = 0; i < email_addr_chip_elmts.length; i++) {

        email_addr_list.push(email_addr_chip_elmts[i]["tag"]);
    }
    for (var i = 0; i < email_addr_list.length; i++) {
        if (!validateEmailAddr(email_addr_list[i])) {
            alert("Please provide valid email id")
            return
        }
    }
    e.innerHTML = "Saving..."
    csrf_token = get_csrf_token()

    json_string = JSON.stringify({
        "bot_channel_pk": bot_channel_pk,
        "mail_sender_time_interval": mail_sender_time_interval,
        "mail_sent_to_list": email_addr_list,
    });

    json_string = EncryptVariable(json_string);

    $.ajax({
        url: "/chat/save-whatsapp-email-config/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            e.innerHTML = "Save"
            if (response["status"] == 200) {
                M.toast({
                    "html": "Email Configuration saved."
                })
                if (response["email_configured"]) {

                    $("#test-whatsapp-email-config").show();
                } else {

                    $("#test-whatsapp-email-config").hide();
                }
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        }
    });

}

$(document).on("change", "#checkbox-is-whatsapp-email-notifiication-enabled", function () {

    var status = document.getElementById("checkbox-is-whatsapp-email-notifiication-enabled").checked
    if (status) {

        $("#edit-whatsapp-email-config").show()
        if (API_FAIL_EMAIL_CONFIGURED == "true" || API_FAIL_EMAIL_CONFIGURED == "True") {

            $("#test-whatsapp-email-config").show()
        }
    } else {

        $("#edit-whatsapp-email-config").hide()
        if (API_FAIL_EMAIL_CONFIGURED == "true" || API_FAIL_EMAIL_CONFIGURED == "True") {

            $("#test-whatsapp-email-config").hide()
        }
    }
});

function send_whatsapp_test_email(bot_channel_pk) {

    csrf_token = get_csrf_token()

    json_string = JSON.stringify({
        "bot_channel_pk": bot_channel_pk,
    });

    json_string = EncryptVariable(json_string);
    $("#test-whatsapp-email-config").val("Sending test mail...")
    $.ajax({
        url: "/chat/send-whatsapp-test-email/",
        type: "POST",
        headers: {
            "X-CSRFToken": csrf_token
        },
        data: {
            data: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            $("#test-whatsapp-email-config").val("Send Test Mail");
            $("#modal-whatsapp-email-config").modal('close');
            if (response["status"] == 200) {
                M.toast({
                    "html": "Test mail sent!"
                })
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        }
    });
}


function copyToClipboardfromPreTag(id, request_type) {
    var copyText = document.getElementById(id).textContent;
    if (navigator.clipboard) {
        navigator.clipboard.writeText(copyText)
    } else {
        var textArea = document.createElement('textarea');
        textArea.textContent = copyText;
        document.body.append(textArea);
        textArea.select();
        document.execCommand("copy");
        textArea.remove()
    }
    M.toast({
        "html": request_type + " packet has been copied"
    }, 2000);
}

function DownloadAsJSON(api_pk, type) {

    window.location = '/chat/download-api-analytics-data/?api_pk=' + api_pk + '&type=' + type
}

function show_screenshot(img_source) {
    console.log(img_source);
    $("#modal-general-feedback-view-screenshot").modal("open");
    screenshot_html = '<center><img class="responsive-img" src="' + img_source + '"></center>';
    document.getElementById("general-feedback-screenshot").innerHTML = screenshot_html;
}

/////////////// FILTER LOGS BY DATE START //////////////////////////
$(document).on("click", "#filter-by-date", function (e) {
    date_start = $("#date_start").val();
    time_start = $("#time_start").val();
    date_end = $("#date_end").val();
    time_end = $("#time_end").val();
    if (new Date(date_start).getTime() <= new Date(date_end).getTime()) {
        if (! (new Date().setHours(0, 0, 0, 0) >= new Date(date_end).setHours(0, 0, 0, 0))) {
            M.toast({
                "html": "End Date should not be Future Date"
            });
            $("#filter-by-date").attr("href", "#")
            $("#filter-by-date").removeAttr("download")
            return;
        }
    } else {
        M.toast({
            "html": "Start Date should be smaller than End Date"
        });
        $("#filter-by-date").attr("href", "#")
        $("#filter-by-date").removeAttr("download")
        return;
    }
    json_string = JSON.stringify({
        date_start: date_start,
        time_start: time_start,
        date_end: date_end,
        time_end: time_end
    });
    csrf_token = get_csrf_token();
    json_string = EncryptVariable(json_string);

    if (time_start == '' || time_end == '') {
        $("#filter-by-date").attr("href", "#")
        $("#filter-by-date").removeAttr("download")
        M.toast({
            "html": "Please enter valid start/end time."
        })
        return;
    }

    date_start_final = date_start.concat(" ")
    date_start_final = date_start_final.concat(time_start)

    date_end_final = date_end.concat(" ")
    date_end_final = date_end_final.concat(time_end)

    var D1 = new Date(Date.parse(date_start_final))
    var D2 = new Date(Date.parse(date_end_final))

    if (D1 < D2) {
        var response = $.ajax({
            url: '/chat/download-easychat-logs/',
            type: 'POST',
            headers: {
                'X-CSRFToken': csrf_token,
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            async: false,
            data: {
                json_string: json_string
            },
            success: function () {
                $("#filter-by-date").attr("href", "/files/private/app.log")
                $("#filter-by-date").attr("download")
            },
            error: function (error) {
                console.log(error)
            }
        })
    } else {
        $("#filter-by-date").attr("href", "#")
        $("#filter-by-date").removeAttr("download")
        M.toast({
            "html": "Kindly select a end date greater than the start date"
        })
    }
});

/////////////// FILTER LOGS BY DATE END //////////////////////////

/////////////////// COMMON UTILS FILE START ///////////////////////
function last_edit(bot_id) {
    var editor = ace.edit("editor_common_utils");
    var code = editor.getValue();
    csrf_token = get_csrf_token();
    window.open('/chat/common-utils/?bot_pk=' + bot_id + '&checklastedit=' + 'true', '_blank')
}

function save_common_utils(bot_id) {
    var editor = ace.edit("editor_common_utils");
    var code = editor.getValue();

    if (check_for_system_commands(code)) {
        M.toast({
            "html": "Code contains system-commands. Please remove them and save again."
        }, 2000);
        document.getElementById("easychat-processor-status").value = "\n\nError(s):";
        show_processor_errors();
        return;
    };
    csrf_token = get_csrf_token();

    var json_string = JSON.stringify({
        code: code,
        bot_pk: bot_id,
        to_save: "True"
    })
    json_string = EncryptVariable(json_string);
    var response = $.ajax({
        url: '/chat/common-utils/?bot_pk=' + bot_id,
        type: 'POST',
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: json_string
        },
        success: function () {

            M.toast({
                "html": "Your function has been saved"
            })
            setTimeout(function () {
                window.location.reload();
            }, 2000);
        },
        error: function (error) {
            console.log(error)
        }
    })
}

/////////////// COMMON UTILS FILE END //////////////////


function save_chatbot_custom_js(bot_id) {
    var editor = ace.edit("editor_custom_js");
    var code = editor.getValue();
    csrf_token = get_csrf_token();

    var json_string = JSON.stringify({
        code: code,
        bot_id: bot_id,
        to_save: "True"
    })
    json_string = EncryptVariable(json_string);
    var response = $.ajax({
        url: '/chat/save-custom-chatbot-js/?bot_pk=' + bot_id,
        type: 'POST',
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: json_string
        },
        success: function () {
            M.toast({
                "html": "Your function has been saved"
            })
            setTimeout(function () {
                window.location.reload();
            }, 2000);
        },
        error: function (error) {
            console.log(error)
        }
    })
}


function save_chatbot_custom_css(bot_id) {
    var editor = ace.edit("editor_custom_css");
    var code = editor.getValue();
    csrf_token = get_csrf_token();

    var json_string = JSON.stringify({
        code: code,
        bot_id: bot_id,
        to_save: "True"
    })
    json_string = EncryptVariable(json_string);
    var response = $.ajax({
        url: '/chat/save-custom-chatbot-css/',
        type: 'POST',
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            json_string: json_string
        },
        success: function () {
            M.toast({
                "html": "Changes has been saved"
            })
            setTimeout(function () {
                window.location.reload();
            }, 2000);
        },
        error: function (error) {
            console.log(error)
        }
    })
}


////////////// NO CODE API INTEGRATION START ///////////////

var request_packet = ""
var response_packet = ""
var url = ""
var header = ""
var url_access_token = ""
var header_access_token = ""
var username_basic_authorization = ""
var password_basic_authorization = ""
var intent = ""

function access_token(intent_pk, tree_pk, parent_tree_pk, type_of_request) {
    url_access_token = ace.edit('url_access_token').getValue()
    header_access_token = ace.edit('header_access_token').getValue()
    var access_token_html = document.getElementById("access_token_html")
    access_token_html.style.display = "none"
    var api_integration_one = document.getElementById("api_integration_part_one")
    api_integration_one.style.display = "block"
    intent = intent_pk
}

function api_integration(tree_pk, parent_tree_pk, type_of_request) {
    url = ace.edit('url').getValue();
    header = ace.edit('header').getValue();
    username_basic_authorization = document.getElementById("username-basic-authorization").value
    password_basic_authorization = document.getElementById("password-basic-authorization").value

    if (type_of_request == "rest") {
        request_packet = ace.edit("request").getValue()
        response_packet = ace.edit("response").getValue()
        error_response_packet = ace.edit("error_response").getValue()
    } else {
        request_packet = String(ace.edit("request").getValue())
        request_packet = request_packet.replace(/(\r\n|\n|\r)/gm, "")
        request_packet = request_packet
        response_packet = String(ace.edit("response").getValue())
        response_packet = response_packet.replace(/(\r\n|\n|\r)/gm, "")
        error_response_packet = String(ace.edit("error_response").getValue())
        error_response_packet = error_response_packet.replace(/(\r\n|\n|\r)/gm, "")

    }
    var json_string = JSON.stringify({
        "tree_pk": tree_pk,
        "parent_tree_pk": parent_tree_pk,
        "type_of_request": type_of_request,
        "request_packet": request_packet,
        "response_packet": response_packet,
        "error_response_packet": error_response_packet
    })
    csrf_token = get_csrf_token();
    json_string = EncryptVariable(json_string);
    var response = $.ajax({
        url: '/chat/request-response-trees/',
        type: 'POST',
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            data: json_string
        },
        success: function (response) {
            if (response['status_code'] == 200) {
                var api_integration_one = document.getElementById("api_integration_part_one")
                api_integration_one.style.display = "none"
                ace.edit("request_packet_two").setValue(response['request_packet'])
                ace.edit("request_packet_two").clearSelection()
                ace.edit("response_packet_two").setValue(response['response_packet'])
                ace.edit("response_packet_two").clearSelection()
                ace.edit("error_response_packet_two").setValue(response['error_response_packet'])
                ace.edit("error_response_packet_two").clearSelection()

                document.getElementById("request_tree_html").innerHTML = response['request_tree_html']
                document.getElementById("response_tree_html").innerHTML = response['response_tree_html']
                document.getElementById("html_error_response").innerHTML = response['html_error_response']
                var toggler = document.getElementsByClassName("caret");
                var toggler_incrementer;

                for (toggler_incrementer = 0; toggler_incrementer < toggler.length; toggler_incrementer++) {
                    toggler[toggler_incrementer].addEventListener("click", function (e) {
                        e.preventDefault();
                        this.parentElement.querySelector(".nested").classList.toggle("active");
                        this.classList.toggle("caret-down");
                    });
                }
                var api_integration_two = document.getElementById("api_integration_part_two")
                api_integration_two.style.display = "block"
            } else if (response['status_code'] == 500) {
                M.toast({
                    "html": "Kindly check the formats of the packets."
                })
            }
        },
        error: function (error) {
            console.log(error)
        }
    })
}

function request_values(tree_pk, parent_tree_pk, type_of_request) {

    var request_dict = {}
    $("select").each(function () {
        if ($(this).val() != null) {
            ID = this.id.replace('jpd', '')
            request_dict[ID] = $(this).val()
        }
    })
    var response_dict = {}
    var error_response_dict = {}
    $("input").each(function () {
        if ($(this).val() != null) {
            if (this.id != "bot-response-variable" || this.id != "bot-response-value" || this.id != "bot-error-response-value") {
                if (this.id.includes("error_response_key") == true) {
                    error_response_dict[this.id.replace("error_response_key", "")] = $(this).val()
                } else {
                    response_dict[this.id] = $(this).val()
                }
            }
        }
    })
    var bot_response_variable = document.getElementById("bot-response-variable").value
    var bot_response_value = document.getElementById("bot-response-value").value
    var bot_error_response_value = document.getElementById("bot-error-response-value").value

    var json_string = JSON.stringify({
        "url_access_token": url_access_token,
        "header_access_token": header_access_token,
        "request_packet": request_packet,
        "response_packet": response_packet,
        "error_response_packet": error_response_packet,
        "url": url,
        "header": header,
        "request_dict": request_dict,
        "response_dict": response_dict,
        "error_response_dict": error_response_dict,
        "tree_pk": tree_pk,
        "parent_tree_pk": parent_tree_pk,
        "type_of_request": type_of_request,
        "username_basic_authorization": username_basic_authorization,
        "password_basic_authorization": password_basic_authorization,
        "bot_response_variable": bot_response_variable,
        "bot_response_value": bot_response_value,
        "bot_error_response_value": bot_error_response_value
    })
    csrf_token = get_csrf_token();
    json_string = EncryptVariable(json_string);
    var response = $.ajax({
        url: '/chat/save-api-code/',
        type: 'POST',
        headers: {
            'X-CSRFToken': csrf_token,
            'Content-Type': 'application/x-www-form-urlencoded'
        },
        async: false,
        data: {
            data: json_string
        },
        success: function (response) {
            if (response['status_code'] == 200) {
                M.toast({
                    "html": "Your API code has been generated."
                })
                setTimeout(function () {
                    window.location = '/chat/edit-intent/?intent_pk=' + intent;
                }, 2000);

            } else if (response['status_code'] == 500) {
                M.toast({
                    "html": "Internal server error. Please report this error."
                })
            }
        },
        error: function (error) {
            console.log(error)
        }
    })
}

//////////////// NO CODE API INTEGRATION END ///////////////////////

/* WHATSAPP SIMULATOR START */

function get_current_time(date) {
    var hours = date.getHours();
    var minutes = date.getMinutes();
    var ampm = hours >= 12 ? 'pm' : 'am';
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    minutes = minutes < 10 ? '0' + minutes : minutes;
    var strTime = hours + ':' + minutes + ' ' + ampm;
    return strTime;
}

function run_whatsapp_simulator() {
    end_point = document.getElementById("whatsapp-bot-end-point").value;
    if (end_point == "") {
        showToast("Please enter the WhatsApp Webhook URL");
        return;
    }
    mobile_number = document.getElementById("whatsapp_mobile_number").value;
    if (mobile_number == "") {
        showToast("Please enter a mobile number.")
        return;
    }
    var editor = ace.edit("editor-code-request-packet");
    var code = editor.getValue();
    if (code == "") {
        showToast('Please write the request packet.');
        return;
    }

    if (document.getElementById("whatsapp-simulator").style.display == "block") {
        showToast("Simulator is already running.")
    } else {
        document.getElementById("whatsapp-simulator").style.display = "block";
    }
}

if (window.location.href.indexOf("/chat/whatsapp-simulator/") != -1) {
    var form = document.querySelector('.conversation-compose');
    var conversation = document.querySelector('.conversation-container');
    form.addEventListener('submit', send_whatsapp_message);
}

function get_whatsapp_response(message, mobile_number, end_point) {
    document.getElementById("whatsapp_status").innerHTML = "typing..."
    var editor = ace.edit("editor-code-request-packet");
    var request_packet = editor.getValue();

    json_string = JSON.stringify({
        "message": message,
        "mobile_number": mobile_number,
        "end_point": end_point,
        "request_packet": request_packet
    })
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/get-whatsapp-simulator-response/",
        type: "POST",
        data: {
            data: json_string
        },
        success: function (response) {
            document.getElementById("whatsapp_status").innerHTML = "online"
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                var msg = response["response_message"];
                var mesg_list = msg.split("$$$")
                for (var i = 0; i < mesg_list.length; i++) {

                    var received_message = recieved_message_ui(mesg_list[i]);
                    conversation.appendChild(received_message)
                    conversation.scrollTop = conversation.scrollHeight;
                }
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
                console.log("Internal Server Error")
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        }
    });
}

function send_whatsapp_message(e) {
    var input = e.target.input;
    if (input.value) {
        mobile_number = document.getElementById("whatsapp_mobile_number").value;
        end_point = document.getElementById("whatsapp-bot-end-point").value;
        get_whatsapp_response(input.value, mobile_number, end_point)

        var message = sent_message_ui(input.value);

        conversation.appendChild(message);

        animate_message(message);
    }

    input.value = '';
    conversation.scrollTop = conversation.scrollHeight;
    e.preventDefault();
}

function sent_message_ui(text) {
    var element = document.createElement('div');
    element.classList.add('message', 'sent');
    var today = new Date();
    current_time = get_current_time(today)
    element.innerHTML = text +
        '<span class="metadata">' +
        '<span class="time">' + current_time + '</span>' +
        '<span class="tick tick-animation">' +
        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="15" id="msg-dblcheck" x="2047" y="2061"><path d="M15.01 3.316l-.478-.372a.365.365 0 0 0-.51.063L8.666 9.88a.32.32 0 0 1-.484.032l-.358-.325a.32.32 0 0 0-.484.032l-.378.48a.418.418 0 0 0 .036.54l1.32 1.267a.32.32 0 0 0 .484-.034l6.272-8.048a.366.366 0 0 0-.064-.512zm-4.1 0l-.478-.372a.365.365 0 0 0-.51.063L4.566 9.88a.32.32 0 0 1-.484.032L1.892 7.77a.366.366 0 0 0-.516.005l-.423.433a.364.364 0 0 0 .006.514l3.255 3.185a.32.32 0 0 0 .484-.033l6.272-8.048a.365.365 0 0 0-.063-.51z" fill="#92a58c"/></svg>' +
        '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="15" id="msg-dblcheck-ack" x="2063" y="2076"><path d="M15.01 3.316l-.478-.372a.365.365 0 0 0-.51.063L8.666 9.88a.32.32 0 0 1-.484.032l-.358-.325a.32.32 0 0 0-.484.032l-.378.48a.418.418 0 0 0 .036.54l1.32 1.267a.32.32 0 0 0 .484-.034l6.272-8.048a.366.366 0 0 0-.064-.512zm-4.1 0l-.478-.372a.365.365 0 0 0-.51.063L4.566 9.88a.32.32 0 0 1-.484.032L1.892 7.77a.366.366 0 0 0-.516.005l-.423.433a.364.364 0 0 0 .006.514l3.255 3.185a.32.32 0 0 0 .484-.033l6.272-8.048a.365.365 0 0 0-.063-.51z" fill="#4fc3f7"/></svg>' +
        '</span>' +
        '</span>';
    return element;
}

function recieved_message_ui(text) {
    var element = document.createElement('div');
    var today = new Date();
    current_time = get_current_time(today)

    element.classList.add('message', 'received');
    element.innerHTML = text + '<span class="metadata">' +
        '<span class="time">' + current_time + '</span>';

    return element;

}

function animate_message(message) {
    setTimeout(function () {
        var tick = message.querySelector('.tick');
        tick.classList.remove('tick-animation');
    }, 500);
}

/* WHATSAPP SIMULATOR END */

if (window.location.href.indexOf("/chat/nlp-benchmark/") != -1) {
    setInterval(function () {
        renderNLPBenchmarkingResult();
    }, 10000);
}

function start_nlp_benchmarking() {
    // var selected_bot_pk = $("#multiple-select-bot-choice-pk-list").val();

    // var selected_bot_pk_list = [selected_bot_pk];
    selected_bot_id = get_url_vars()["bot_pk"];
    $("#start-nlp-benchmarking-btn").attr("disabled", "disabled");


    var my_file = ($("#my_file"))[0].files[0];

    if (my_file == undefined || my_file == null) {
        M.toast({
            "html": "Please upload excel sheet in required format."
        }, 2000);
        return;
    }

    if (check_malicious_file(my_file.name) == true) {
        return;
    }

    var formData = new FormData();
    formData.append("my_file", my_file);
    formData.append("selected_bot_id", selected_bot_id);

    $('#preloader_nlp_benchmarking_div').show();
    M.toast({
        'html': "Starting NLP Benchmarking."
    }, 2000);
    $.ajax({
        url: "/chat/start-nlp-benchmarking/",
        type: "POST",
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
            // $('.indeterminate').hide();
            response = custom_decrypt(response)
            response = JSON.parse(response);

            if (response['status'] == 200) {
                renderNLPBenchmarkingResult();

            } else if (response['status'] == 101) {
                M.toast({
                    'html': response['message']
                }, 2000)
                $('#preloader_nlp_benchmarking_div').hide();
            } else {
                M.toast({
                    'html': "Internal Server Error!"
                }, 2000);
                $('#preloader_nlp_benchmarking_div').hide();
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });

}

function renderNLPBenchmarkingResult() {
    selected_bot_id = get_url_vars()["bot_pk"];
    $.ajax({
        url: "/chat/get-nlp-benchmarking-result/",
        type: "GET",
        data: {
            "selected_bot_id": selected_bot_id
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            var html_table = `<div class="center-align" style="padding:1em;">No results available. Please run NLP Benchmark Process first.</div>`
            if (response["status"] == 200) {
                user_query_list = response["user_query_list"];
                ideal_intent_name_list = response["ideal_intent_name_list"];
                identified_intent_name_list = response["identified_intent_name_list"];
                host = window.location.host;
                correct_queries_length = response['correct_queries_length']
                total_queries_length = response['total_queries_length']
                percentage = response['result_accuracy']
                $("#result-paragraph").css("display", "block");
                $("#benchmark-percent").html(percentage)
                $("#benchmarking-final-result").html(correct_queries_length + '/' + total_queries_length)

                var html_table = `<div class="col s6" Last Run: <b>` + response['result_timestamp'] + `</b></div> <div class="col s6"> <a href="` + "/" + response['result_file_path'] + `" class="right"><u>Download Excel File</u></a></div>` + `<br></p>`;
                html_table += `
                <table id="nlp-benchmarking-info-table" class="striped highlight white">
                  <thead>
                    <tr>
                      <th>User Query</th>
                      <th>Expected Intent in the Bot</th>
                      <th>Identified Intent by the bot</th>
                    </tr>
                  </thead>
                  <tbody>`;

                for (var i = 0; i < user_query_list.length; i++) {
                    html_table += `<tr>
                  <td>` + user_query_list[i] + `</td>
                  <td>` + ideal_intent_name_list[i] + `</td>
                  <td>` + identified_intent_name_list[i] + `</td>
                </tr>`;
                }

                html_table += `</tbody>
            </table><br>*Table contains results of last NLP Benchmark Process`;


                main_html = html_table;
                $("#div-nlp-benchmarking-table").html(main_html);

                var not_found_intent_list = [];
                not_found_intent_list = response['not_found_intent_list'];
                if (not_found_intent_list.length > 0) {
                    html_error_list = "Below intents were not found in the Bot and hence are not considered in calculating accuracy of the NLP Algorithm:"
                    html_error_list += "<ul>"
                    for (var i = 0; i < not_found_intent_list.length; i++) {
                        html_error_list += "<li>" + not_found_intent_list[i] + "</li>";
                    }
                    html_error_list += "<ul>";
                    $("#div-nlp-benchmarking-error").html(html_error_list);
                }
                $('#preloader_nlp_benchmarking_div').hide();
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });
}

function add_api_url(sentence) {
    if (sentence.trim() == "") {
        return;
    }
    var str_id = sentence.toString().replace(/[^A-Z0-9]/ig, "");

    var html = `<li class="collection-item" id="` + str_id + `">
      <div class="row">
        <input id="` + str_id + `" type="text" value="` + sentence + `" style="width: 80%">
        <div class="secondary-content">
        <a href="" class="delete-button-api-url" id="` + str_id + `">
          <i class="inline-icon material-icons red-text text-darken-3">delete</i>
        </a>
        </div>
      </div>
    </li>`;
    $(html).appendTo($("#api_collection"));
}

function check_malicious_file(file_name) {

    // if (file_name.split('.').length != 2) {
    //     M.toast({
    //         "html": "Please do not use .(dot) except for extension"
    //     }, 2000);
    //     return true;
    // }

    var allowed_files_list = [
        "png", "jpg", "jpeg", "svg", "bmp", "gif", "tiff", "exif", "jfif", "webm", "mpg",
        "mp2", "mpeg", "mpe", "mpv", "ogg", "mp4", "m4p", "m4v", "avi", "wmv", "mov", "qt",
        "flv", "swf", "avchd", "mp3", "aac", "pdf", "xls", "xlsx", "json", "xlsm", "xlt", "xltm", "zip", "rar", "ppt", "pptx", "docx", "docs", "txt"
    ];

    var file_extension = file_name.substring(file_name.lastIndexOf(".") + 1, file_name.length);
    file_extension = file_extension.toLowerCase();

    if (allowed_files_list.includes(file_extension) == false) {
        M.toast({
            "html": "." + file_extension + " files are not allowed"
        }, 2000);
        return true;
    }
    return false;
}

function add_web_landing_url_initial_messages() {

    initial_intent_present = document.getElementById("show-initial-intent").checked;
    is_welcome_message_present = document.getElementById("show-welcome-message").checked;
    initial_image_present = document.getElementById("show-welcome-image").checked;
    initial_videos_present = document.getElementById("show-welcome-video").checked;
    is_welcome_banner_present = document.getElementById("show-welcome-banner").checked;
    bot_id = get_url_vars()['id']
    json_string = JSON.stringify({
        initial_intent_present: initial_intent_present,
        is_welcome_message_present: is_welcome_message_present,
        initial_image_present: initial_image_present,
        initial_videos_present: initial_videos_present,
        is_welcome_banner_present: is_welcome_banner_present,
        bot_id: bot_id,
    });
    json_string = EncryptVariable(json_string);
    $.ajax({
        url: "/chat/channels/save-web-landing-initial-messages/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    "html": "Saved successfully"
                })
            } else {
                M.toast({
                    "html": "Internal Server Error. Please report this error"
                })
            }
        },
        error: function (error) {
            console.log("Report this error: ", error);
        },
    });
}

// ###############################################   Telegram ###############################################


if (window.location.pathname.indexOf("/chat/channels/telegram") != -1) {
    var location_href = window.location.href;
    var location_href = location_href.replace("#", "");
    var location_href = location_href.replace("!", "");
    var bot_id = get_url_vars()['id'];

    var json_string = JSON.stringify({
        bot_id: bot_id
    })
    json_string = EncryptVariable(json_string);
    document.getElementById("easychat_telegram_channel_preloader").style.display = "block";
    $.ajax({
        url: "/chat/channels/telegram/edit/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            document.getElementById("easychat_telegram_channel_preloader").style.display = "none";
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                images = response["initial_message"]["images"];
                videos = response["initial_message"]["videos"];

                if (images != undefined && images != null && images.length > 0) {
                    document.getElementById("uploaded-bot-welcome-image").src = images[0];
                    document.getElementById("uploaded-bot-welcome-image").style.display = "inline-block";
                    $("#remove-bot-welcome-image").show();
                }

                if (videos != undefined && videos != null && videos.length > 0) {
                    document.getElementById("upload-bot-welcome-video-url").value = videos[0];
                }

            } else {
                M.toast({
                    "html": "Oops! Looks like there is some issue. Try again in sometime."
                }, 2000);
            }
        },
        error: function (error) {
            document.getElementById("easychat_telegram_channel_preloader").style.display = "none";
        }
    });

    add_channel_language_selction_event("telegram")
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event()
    $(document).ready(function () {
        create_language_custom_dropdowns();
    });
    $(document).on("click", "#ignore-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Telegram"
        ignore_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).on("click", "#auto-fix-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "Telegram"
        auto_fix_changes_in_non_primary_languages(bot_id, channel_name)
    });

    $(document).on("click", "#save-telegram-channel", function (e) {
        var location_href = window.location.href;
        var location_href = location_href.replace("#", "");
        var location_href = location_href.replace("!", "");
        var bot_id = get_url_vars()['id'];

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var is_language_auto_detection_enabled = document.getElementById("is_language_auto_detection_enabled").checked
        var is_enable_choose_language_flow_enabled_for_welcome_response = document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").checked

        selected_supported_languages = get_selected_languages_list()

        if ("en" in selected_supported_languages == false) {
            selected_supported_languages.push("en");
        }

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }

        initial_message_list = $("#multiple-select-telegram-initial-message-list").val();

        failure_recommendation_list = $("#multiple-select-telegram-failure-message-list").val();

        image_id = document.getElementById("uploaded-bot-welcome-image");
        image_url = image_id.getAttribute("src");
        video_url = document.getElementById("upload-bot-welcome-video-url").value.trim();

        if (isValidURL(video_url) == false && video_url != "") {
            M.toast({
                "html": "Please enter valid video url"
            }, 2000);
            return;
        }

        json_string = JSON.stringify({
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            authentication_message: authentication_message,
            initial_message_list: initial_message_list,
            image_url: image_url,
            video_url: video_url,
            failure_recommendation_list: failure_recommendation_list,
            selected_supported_languages: selected_supported_languages,
            is_enable_choose_language_flow_enabled_for_welcome_response: is_enable_choose_language_flow_enabled_for_welcome_response,
            is_language_auto_detection_enabled: is_language_auto_detection_enabled,
        });
        json_string = EncryptVariable(json_string)
        document.getElementById("easychat_telegram_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/channels/telegram/save/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_telegram_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    }, 2000)
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else if (response["status"] == 402) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                    setTimeout(function() {
                        window.location.href = "/chat/home"
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Unable to update the channel details. Please report this error"
                    }, 2000)
                }
            },
            error: function (error) {
                document.getElementById("easychat_telegram_channel_preloader").style.display = "none";
            }
        });
    });

    $("#language-box-options-container .option .item-checkbox").change(function () {

        enable_disable_auto_language_detection_toogle();
        enable_disable_welcome_message_language_change_toogle(true)

    });

    $(document).on("click", "#save-telegram-channel-for-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let selected_language = get_url_vars()['selected_lang']

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }
        channel_name = "Telegram"

        json_string = {
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            channel_name: channel_name,
            selected_language: selected_language,
            authentication_message: authentication_message,
            save_auto_pop_up_text: false,
        }
        json_string = JSON.stringify(json_string);
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_telegram_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/save-channel-language-tuned-objects/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_telegram_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            },
        });
    });

}



if (window.location.pathname.indexOf("/chat/channels/et-source") != -1) {

    var location_href = window.location.href;
    var location_href = location_href.replace("#", "");
    var location_href = location_href.replace("!", "");
    var bot_id = get_url_vars()['id'];

    var json_string = JSON.stringify({
        bot_id: bot_id
    })

    json_string = EncryptVariable(json_string);
    document.getElementById("easychat_etsource_channel_preloader").style.display = "block";

    $.ajax({
        url: "/chat/channels/etsource/edit/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            document.getElementById("easychat_etsource_channel_preloader").style.display = "none";
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                images = response["initial_message"]["images"];
                videos = response["initial_message"]["videos"];

                if (images != undefined && images != null && images.length > 0) {
                    document.getElementById("uploaded-bot-welcome-image").src = images[0];
                    document.getElementById("uploaded-bot-welcome-image").style.display = "inline-block";
                    $("#remove-bot-welcome-image").show();
                }

                if (videos != undefined && videos != null && videos.length > 0) {
                    document.getElementById("upload-bot-welcome-video-url").value = videos[0];
                }

            } else {
                M.toast({
                    "html": "Oops! Looks like there is some issue. Try again in sometime."
                }, 2000);
            }
        },
        error: function (error) {
            document.getElementById("easychat_etsource_channel_preloader").style.display = "none";
        }
    });

    add_channel_language_selction_event("et-source")
    add_language_dropdown_search_event()
    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event()
    $(document).ready(function () {
        create_language_custom_dropdowns();
    });
    $(document).on("click", "#ignore-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "ET-Source"
        ignore_changes_in_non_primary_languages(bot_id, channel_name)
    });
    $(document).on("click", "#auto-fix-changes-in-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let channel_name = "ET-Source"
        auto_fix_changes_in_non_primary_languages(bot_id, channel_name)
    });

    $(document).on("click", "#save-etsource-channel", function (e) {
        var location_href = window.location.href;
        var location_href = location_href.replace("#", "");
        var location_href = location_href.replace("!", "");
        var bot_id = get_url_vars()['id'];

        var welcome_message = $("#welcome-message").trumbowyg('html')
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')
        var is_language_auto_detection_enabled = document.getElementById("is_language_auto_detection_enabled").checked
        var is_enable_choose_language_flow_enabled_for_welcome_response = document.getElementById("is_enable_choose_language_flow_enabled_for_welcome_response").checked

        selected_supported_languages = get_selected_languages_list()

        if ("en" in selected_supported_languages == false) {
            selected_supported_languages.push("en");
        }

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }

        initial_message_list = $("#multiple-select-etsource-initial-message-list").val();

        failure_recommendation_list = $("#multiple-select-etsource-failure-message-list").val();

        image_id = document.getElementById("uploaded-bot-welcome-image");
        image_url = image_id.getAttribute("src");
        video_url = document.getElementById("upload-bot-welcome-video-url").value.trim();

        if (isValidURL(video_url) == false && video_url != "") {
            M.toast({
                "html": "Please enter valid video url"
            }, 2000);
            return;
        }

        json_string = JSON.stringify({
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            authentication_message: authentication_message,
            initial_message_list: initial_message_list,
            image_url: image_url,
            video_url: video_url,
            failure_recommendation_list: failure_recommendation_list,
            selected_supported_languages: selected_supported_languages,
            is_enable_choose_language_flow_enabled_for_welcome_response: is_enable_choose_language_flow_enabled_for_welcome_response,
            is_language_auto_detection_enabled: is_language_auto_detection_enabled,
        });
        json_string = EncryptVariable(json_string)
        document.getElementById("easychat_etsource_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/channels/etsource/save/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_etsource_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    }, 2000)
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else if (response["status"] == 402) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                    setTimeout(function() {
                        window.location.href = "/chat/home"
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Unable to update the channel details. Please report this error"
                    }, 2000)
                }
            },
            error: function (error) {
                document.getElementById("easychat_etsource_channel_preloader").style.display = "none";
            }
        });
    });

    $("#language-box-options-container .option .item-checkbox").change(function () {

        enable_disable_auto_language_detection_toogle();
        enable_disable_welcome_message_language_change_toogle()

    });

    $(document).on("click", "#save-etsource-channel-for-non-primary-language", function (e) {
        let bot_id = (get_url_vars()["id"])
        let selected_language = get_url_vars()['selected_lang']

        var welcome_message = $("#welcome-message").trumbowyg('html');
        var failure_message = $("#failure-message").trumbowyg('html')
        var authentication_message = $("#authentication-message").trumbowyg('html')

        var validation_message = check_channel_messages_validation(welcome_message, failure_message, authentication_message);
        if (validation_message != "No Error") {
            M.toast({
                "html": validation_message
            }, 2000);
            return;
        }
        channel_name = "ET-Source"

        json_string = {
            bot_id: bot_id,
            welcome_message: welcome_message,
            failure_message: failure_message,
            channel_name: channel_name,
            selected_language: selected_language,
            authentication_message: authentication_message,
            save_auto_pop_up_text: false,
        }
        json_string = JSON.stringify(json_string);
        json_string = EncryptVariable(json_string);
        document.getElementById("easychat_etsource_channel_preloader").style.display = "block";
        $.ajax({
            url: "/chat/save-channel-language-tuned-objects/",
            type: "POST",
            data: {
                json_string: json_string
            },
            success: function (response) {
                document.getElementById("easychat_etsource_channel_preloader").style.display = "none";
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    M.toast({
                        "html": "Channel details updated successfully."
                    })
                    window.location = window.location.href;
                } else if (response["status"] == 400) {
                    M.toast({
                        "html": response["message"]
                    }, 2000)
                } else {
                    M.toast({
                        "html": "Internal Server Error. Please report this error"
                    })
                }
            },
            error: function (error) {
                document.getElementById("easychat_web_channel_preloader").style.display = "none";
                console.log("Report this error: ", error);
            },
        });
    });

}




function set_telegram_webhook(element) {

    element.innerHTML = "Adding...";
    var location_href = window.location.href;
    var location_href = location_href.replace("#", "");
    var location_href = location_href.replace("!", "");
    var bot_id = location_href.split("?")[1].split("=")[1];
    var telegram_api_token = document.getElementById("telegram-api-token").value;

    json_string = JSON.stringify({
        bot_id: bot_id,
        telegram_api_token: telegram_api_token
    });
    json_string = EncryptVariable(json_string)
    $.ajax({
        url: "/chat/telegram/set-webhook/",
        type: "POST",
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                element.innerHTML = "Add API Token";
                element.classList.remove("green");
                element.classList.add("grey");
                element.removeAttribute("onclick");
                document.getElementById("telegram-api-token").value = response["telegram_api_token"];
                document.getElementById("telegram-api-token").setAttribute("readonly", true);
                document.getElementById("token-guideline").innerHTML = "API token already added."
                M.toast({
                    "html": "API token added successfully."
                }, 2000)
            } else {
                M.toast({
                    "html": "Unable to set Webhook. Please report this error"
                }, 2000)
            }
        },
        error: function (error) {
            M.toast({
                "html": "Please report this error " + error
            }, 2000)
        }
    });
}

var intent_name_pk_dict = {}

function easychat_add_script(filename) {
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.src = filename;
    script.type = 'text/javascript';
    document.head.appendChild(script)
}


function get_suggestion_list(bot_id, category_id, intent_type, channel_name) {
    var json_string = JSON.stringify({
        bot_id: bot_id,
        category_id: category_id,
        intent_type: intent_type,
        channel_name: channel_name
    });
    json_string = EncryptVariable(json_string);
    json_string = encodeURIComponent(json_string);

    var xhttp = new XMLHttpRequest();
    var params = 'json_string=' + json_string
    xhttp.open("POST", "/chat/get-intents/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                intents_list = response["intents_list"]
                intent_name_pk_dict = response["intent_name_pk_dict"]

                var intents = document.getElementById('Intents');
                try {
                    while (intents.lastChild) {
                        intents.removeChild(intents.lastChild);
                    }


                    //$("#Intents").empty();
                    var option = document.createElement('option');
                    option.text = "Select one of the intent and click go";
                    option.value = "";
                    intents.appendChild(option);
                    for (var i = 0; i < intents_list.length; i++) {
                        var option = document.createElement('option');
                        option.text = intents_list[i];
                        option.value = intents_list[i];
                        intents.appendChild(option);
                        //$("#Intents").append('<option  value="' +  intents_list[i] + '"></option>');
                    }
                } catch (err) {
                    console.log(err)
                }
            } else {
                console.log("error")
            }
        }
    }
    xhttp.send(params);
}

function go_to_intent(bot_pk) {
    intent_name = document.getElementById("Intents").value

    if (intent_name in intent_name_pk_dict) {
        intent_pk = intent_name_pk_dict[String(intent_name)]

    } else {
        M.toast({
            "html": "Please select a valid intent."
        }, 2000);
        return;
    }

    window.open("/chat/edit-intent/?intent_pk=" + intent_pk, '_blank');
}

if (window.location.pathname == "/chat/intent/") {

    let url_selected_language = get_url_vars()['selected_language']

    try {
        if (url_selected_language !== SELECTED_LANGUAGE) {
            window.location = set_url_parameter("selected_language", SELECTED_LANGUAGE)
        }
    } catch (err) {
        console.log(err)
    }
    var params = get_url_vars();

    var category_id = params["category_id"];
    if (category_id == null || category_id == undefined) {
        category_id = "";
    }

    var intent_type = params["intent_type"];
    if (intent_type == null || intent_type == undefined) {
        intent_type = "";
    }

    var channel_name = params["channel_name"]
    if (channel_name == null || channel_name == undefined) {
        channel_name = "";
    }

    get_suggestion_list(selected_bot_obj_pk, category_id, intent_type, channel_name)
    $(document).ready(function () {
        create_language_custom_dropdowns_for_intent();

    });
    add_language_dropdown_search_event()
    add_language_selction_event_for_intent()
    language_dropdown_close_onclicking_outside_event()
    language_search_dropdown_event()
    open_close_language_dropdown_event()


}
if (window.location.href.match(window.location.origin + "/chat/bot/edit/")) {
    $(".iconsFlex").children('a').addClass("active");
}

function show_available_soon_toast() {
    M.toast({
        "html": "Will be available shortly."
    }, 2000);
}

//////////////////////////// Masking PII Data ///////////////////////////////////

var is_otp_verified = false;
var token = "";
$('#checkbox-masking-enabled').on('change', function () {
    send_otp_code(false)
});
$('#easychat-mask-pii-time').on('change', function () {
    send_otp_code(true)
});

function resend_otp() {
    var masking_time_elem = document.getElementById('easychat-mask-pii-time');
    var changed_time = false;
    if (masking_time_elem) {
        var masking_time_entered = parseInt(masking_time_elem.value);

        if (masking_time_entered != parseInt(MASKING_TIME)) {
            changed_time = true;
        }
    }

    send_otp_code(changed_time);
}

async function send_otp_code(changed_time) {
    var masking_enabled = document.getElementById('checkbox-masking-enabled').checked;
    var masking_time_elem = document.getElementById('easychat-mask-pii-time');

    if (!changed_time) {
        if (masking_enabled) {
            showToast('Click on Save button to mask the Customer data due to privacy concerns', 3000);
            return;
        }
    } else {
        var masking_time_entered = parseInt(masking_time_elem.value);

        if (masking_time_entered < 1 || masking_time_entered > 20) {
            showToast('Minimum value-1 min and Maximum value-20mins', 2000);
            masking_time_elem.value = MASKING_TIME;
            return;
        }
    }

    var bot_id = window.location.pathname.split("/")[4];
    $('#easychat-masking-pi-modal').modal({
        'onCloseEnd': function () {
            check_otp_verified()
        },
    });

    $('#easychat-masking-pi-modal').modal('open');
    empty_otp_fields();
    setTimeout(function () {
        document.getElementsByClassName('otp-form')[0].focus();
    }, 500)

    document.getElementById('easychat-resend-otp').style.pointerEvents = 'none';
    document.getElementById('easychat-resend-otp').style.cursor = 'default';

    await toggle_data_mask(bot_id, masking_enabled, masking_time_elem.value);

    document.getElementById('easychat-resend-otp').style.pointerEvents = 'auto';
    document.getElementById('easychat-resend-otp').style.cursor = 'pointer';
}

function toggle_data_mask(bot_id, masking_enabled, masking_time) {
    return new Promise(function (resolve, reject) {

        let json_string = JSON.stringify({
            bot_id: bot_id,
            masking_enabled: masking_enabled,
            masking_time: masking_time,
        });

        json_string = EncryptVariable(json_string);
        json_string = encodeURIComponent(json_string);

        const xhttp = new XMLHttpRequest();
        const params = 'json_string=' + json_string

        xhttp.open("POST", DATA_MASK_TOGGLE_API, true);
        xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                let response = JSON.parse(this.responseText);
                response = custom_decrypt(response)
                response = JSON.parse(response);

                if (response["status_code"] != "200") {
                    showToast(response["status_message"], 2000);
                }
                resolve();
            }
        }

        xhttp.send(params);
    })
}

function check_otp(elem) {
    var entered_otp_inputs = document.getElementsByClassName('otp-form');

    var entered_otp = "";
    for (otp_input of entered_otp_inputs) {
        entered_otp += otp_input.value;
    }

    if (entered_otp == "" || entered_otp.length < 6) {
        showToast('Please enter otp before submitting.', 2000);
        return;
    }

    var bot_id = window.location.pathname.split("/")[4];
    elem.innerHTML = 'Verifying..';

    match_otp_from_server(entered_otp, bot_id, elem);
}

function match_otp_from_server(entered_otp, bot_id, elem) {
    return new Promise(function (resolve, reject) {

        var json_string = JSON.stringify({
            entered_otp: entered_otp,
            bot_id: bot_id,
        });

        json_string = EncryptVariable(json_string);
        json_string = encodeURIComponent(json_string);

        const xhttp = new XMLHttpRequest();
        const params = 'json_string=' + json_string

        xhttp.open("POST", CHECK_DATA_TOGGLE_OTP_API, true);
        xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                let response = JSON.parse(this.responseText);
                response = custom_decrypt(response)
                response = JSON.parse(response);

                if (response.status_code == 200) {
                    if (response.message == "Matched") {
                        token = response.token
                        elem.innerHTML = 'Verified';
                        is_otp_verified = true;

                        var masking_enabled = document.getElementById('checkbox-masking-enabled').checked;

                        if (masking_enabled) {
                            showToast('Click on Save button to save the changed PII time', 3000)
                        } else {
                            showToast('Click on Save button to save the customer data in original format without being masked', 3000);
                        }

                        $('#easychat-masking-pi-modal').modal('close');
                    } else {
                        elem.innerHTML = 'Submit';
                        showToast('Please enter correct OTP', 2000);
                    }
                    empty_otp_fields();
                } else {
                    showToast('Error in matching otp. Please try again later', 2000);
                    resolve(false);
                }

            }
        }

        xhttp.send(params);
    })
}

function empty_otp_fields() {
    var otp_elems = document.getElementsByClassName('otp-form');

    for (otp_elem of otp_elems) {
        otp_elem.value = '';
    }
}

function check_otp_verified() {
    if (!is_otp_verified) {
        var elem = document.getElementById('checkbox-masking-enabled');
        elem.checked = true;

        var elem = document.getElementById('easychat-mask-pii-time');
        elem.value = MASKING_TIME;
    }
}

$('.otp-form').on('keypress', function (e) {
    keys = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    return keys.indexOf(event.key) > -1
});

$('.otp-form').on('keyup', function (e) {
    keys = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    if (keys.indexOf(this.value) != -1) {
        $(this).next().focus();
    }
    var pressed_key = event.keyCode || event.charCode;
    if (pressed_key == 8 || pressed_key == 46) {
        $(this).prev().focus();
    }
});

function get_masked_message(message) {
    var regex = /[a-fA-F0-9]{64}/g;

    message = message.replace(regex, function (hashed_msg) {
        return (
            hashed_msg.substring(0, 5) +
            "***" +
            hashed_msg.substring(hashed_msg.length - 2, hashed_msg.length)
        );
    });

    return message;
}


//////////////////////////// Masking PII Data Ends //////////////////////////////////////////////////////////////////////

////////////////////////// Demoter Feedback Form Start ///////////////////////////////


function feedback_options_hide_show(total_feedback) {
    var maximum_value = parseInt(total_feedback);
    var input_value = document.getElementById("rating_csat_value").value
    if (input_value === "") {
        document.getElementById('wrong_value_feedback').innerText = `This field cannot be left empty, it can contain Min - 1 and Max - ${maximum_value} values`;
        document.getElementById('wrong_value_feedback').style.color = '#4D4D4D';

    } else if (input_value <= maximum_value && input_value >= 1) {

        for (var i = 1; i <= input_value; i++) {
            document.getElementById('feedback_option_' + i).style.display = "block";
        }

        for (var j = maximum_value; j > input_value; j--) {
            document.getElementById('feedback_option_' + j).style.display = "none";
        }
        document.getElementById('wrong_value_feedback').innerText = `Min - 1 and Max - ${maximum_value} values`;
        document.getElementById('wrong_value_feedback').style.color = '#4D4D4D';
    } else {
        document.getElementById('wrong_value_feedback').innerText = `Min - 1 and Max - ${maximum_value} values Only`;
        document.getElementById('wrong_value_feedback').style.color = 'red';
    }
}

function check_input_feedback(bot_pk, max_feedback_allowed) {
    var input_value = $("#rating_csat_value").val();

    let isnum = /^\d+$/.test(input_value.trim());
    if (!isnum) {
        M.toast({
            "html": "Enter the number of feedback(s) required"
        }, 2000);
        return;
    }

    if (input_value.trim() == "" || parseInt(input_value.trim()) < 1) {
        M.toast({
            "html": "Number of feedback must be greater than or equal to 1"
        }, 2000);
        return;
    }
    if (input_value == '') {
        document.getElementById('wrong_value_feedback').innerText = "Fill all the input fields";
        document.getElementById('wrong_value_feedback').style.color = 'red';
    } else if (input_value <= 0 && input_value < max_feedback_allowed) {
        return;
    } else {
        feedback_options_inputs = []

        max_feedback_allowed = parseInt(max_feedback_allowed)
        for (var item = 1; item <= max_feedback_allowed; item++) {
            if (document.getElementById("feedback_option_" + item).style.display == "block") {
                if (document.getElementById("feedback_option__input_" + item).value.trim() == "") {
                    document.getElementById('wrong_value_feedback').innerText = "Fill all input field";
                    document.getElementById('wrong_value_feedback').style.color = 'red';
                    return;
                }
                if (!check_duplicates_for_value(document.getElementById("feedback_option__input_" + item).value.trim(), feedback_options_inputs))
                    feedback_options_inputs.push(document.getElementById("feedback_option__input_" + item).value.trim())
                else {
                    M.toast({
                        "html": "Duplicate values found"
                    });
                    feedback_options_inputs = []
                    return;
                }
            }
        }
        collect_phone_number = document.getElementById("collect_phone_number").checked
        collect_email_id = document.getElementById("collect_email_id").checked
        mark_all_fields_mandatory = document.getElementById("mark_all_fields_mandatory").checked
        document.getElementById('wrong_value_feedback').innerText = `Min - 1 and Max - ${max_feedback_allowed} values`;
        document.getElementById('wrong_value_feedback').style.color = '#4D4D4D';

        var json_string = JSON.stringify({
            input_value: input_value,
            feedback_options_inputs: JSON.stringify(feedback_options_inputs),
            collect_phone_number: collect_phone_number,
            collect_email_id: collect_email_id,
            mark_all_fields_mandatory: mark_all_fields_mandatory,
            bot_id: parseInt(bot_pk)
        });
        json_string = EncryptVariable(json_string);
        json_string = encodeURIComponent(json_string);

        var xhttp = new XMLHttpRequest();
        var params = 'json_string=' + json_string
        xhttp.open("POST", "/chat/save-csat-form/", true);
        xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhttp.setRequestHeader('X-CSRFToken', get_csrf_token());
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                response = JSON.parse(this.responseText);
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    showToast("CSAT Feedback successfully saved.", 2000);
                    $('#configure_csat_modal').modal('close');
                } else {
                    showToast("Check if all the inputs are valid.", 2000);
                    $('#configure_csat_modal').modal('close');
                }
            }
        }
        xhttp.send(params);
    }
}

function toggle_csat_feedback_checkbox(el) {
    var checked = el.checked;

    if (checked) {
        document.getElementById('configure-csat-modal-opener').style.display = 'inline-block';
    } else {
        document.getElementById('configure-csat-modal-opener').style.display = 'none';
    }
}
/////////////////////////// Demoter Feedback Form End ////////////////////////////////

function set_character_count(el) {
    const count = el.value.length;
    const id = el.id + '-char-count';

    document.getElementById(id).innerHTML = count;
}

function check_file_size(el) {
    var file = el.files[0];
    var size_warn_el = document.getElementById('file-size-warning');

    if (file.size > 1000000) {
        size_warn_el.innerHTML = "*Your file size is " + parseInt(file.size / 1000000) + " mb. For optimal performance please upload file having size < 1mb";
        size_warn_el.parentElement.style.display = 'block';
    } else {
        size_warn_el.innerHTML = "";
    }
}

/* Build Bot Starts */

var some_processes_failed = false;
var is_build_bot_running = false;

function build_bot(el) {
    if (el.id == 'build-bot-toast-btn' || el.id == 'build-bot-cancel-btn') {
        document.getElementById('easychat-build-bot-toast-div').style.display = 'none';
        document.getElementById("easychat-content-wrapper").style.maxHeight = '90vh';
        var side_nav = document.getElementById('main-console-sidenav');
        if (side_nav) {
            side_nav.style.marginTop = '4%';
        }
    }

    if (el.id == 'build-bot-cancel-btn') {
        cancel_build_bot();
        $(".easychat-user-chat-contacts-list-wrapper").removeClass("user-history-change-div-height");
        $(".easychat-user-chat-history-message-container").removeClass("user-history-change-div-height");
        return;
    }

    $('#easychat-build-bot-modal').modal('open');

    if (is_build_bot_running) return;

    is_build_bot_running = true;

    reset_build_bot_modal();
    initiate_build_bot();
}

function reset_build_bot_modal() {
    document.getElementById('build-bot-points').style.display = 'block';
    document.getElementById('bot-built-failed').style.display = 'none';

    $('#build-bot-process-loader-one').removeClass('success');
    $('#build-bot-process-loader-two').removeClass('success');
    $('#build-bot-process-loader-three').removeClass('success');
    $('#build-bot-process-loader-four').removeClass('success');
    $('#build-bot-process-loader-five').removeClass('success');

    $('#build-bot-process-loader-one').addClass('processing');

}

function initiate_build_bot() {
    $('#build-bot-process-loader-one').addClass('processing');

    var selected_bot_pk = get_bot_id() || BOT_ID;

    var json_string = JSON.stringify({
        'bot_id': selected_bot_pk,
    });
    json_string = EncryptVariable(json_string);
    json_string = encodeURIComponent(json_string);

    var xhttp = new XMLHttpRequest();
    var params = 'json_string=' + json_string;
    xhttp.open("POST", "/chat/build-bot/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {

                build_bot_timer = setInterval(track_build_bot_progress, 5000);
            } else {

                some_processes_failed = true;
                document.getElementById('build-bot-points').style.display = 'none';
                document.getElementById('bot-built-failed').style.display = 'block';
            }

        }
    }
    xhttp.send(params);
}

function track_build_bot_progress() {
    bot_id = get_bot_id() || BOT_ID;

    var json_string = JSON.stringify({
        bot_id: bot_id,
        event_type: 'build_bot'
    })

    json_string = EncryptVariable(json_string)
    $.ajax({
        url: "/chat/bot/track-event-progress/",
        type: "POST",
        headers: {
            'X-CSRFToken': get_csrf_token()
        },
        data: {
            data: json_string,
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            console.log(response);
            if (response.status == 200) {
                var event_progress = response.event_progress;
                var is_completed = response.is_completed;
                var is_toast_displayed = response.is_toast_displayed;
                var is_failed = response.is_failed;

                if (is_failed && !is_toast_displayed) {
                    failed_message = 'Build Bot Failed'

                    some_processes_failed = true;
                    is_build_bot_running = false;
                    showToast(failed_message, 2000);
                    document.getElementById('build-bot-points').style.display = 'none';
                    document.getElementById('bot-built-failed').style.display = 'block';
                } else if (is_completed && !is_toast_displayed) {

                    is_build_bot_running = false
                    showToast('Build Bot Completed Successfully');
                    show_build_bot_status(100)
                } else {

                    if (!is_completed && !is_failed) {
                        is_build_bot_running = true;
                        show_build_bot_status(event_progress);
                    }
                }
            } else {
                is_build_bot_running = false;
                if (build_bot_timer) {
                    clearInterval(build_bot_timer);
                }
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);
        }
    });
}

function show_build_bot_status(event_progress) {
    if (event_progress >= 20) {
        $('#build-bot-process-loader-one').removeClass('processing');
        $('#build-bot-process-loader-one').addClass('success');

        $('#build-bot-process-loader-two').addClass('processing');
    }

    if (event_progress >= 40) {
        $('#build-bot-process-loader-two').removeClass('processing');
        $('#build-bot-process-loader-two').addClass('success');

        $('#build-bot-process-loader-three').addClass('processing');
    }

    if (event_progress >= 60) {
        $('#build-bot-process-loader-three').removeClass('processing');
        $('#build-bot-process-loader-three').addClass('success');

        $('#build-bot-process-loader-four').addClass('processing');
    }

    if (event_progress >= 80) {
        $('#build-bot-process-loader-four').removeClass('processing');
        $('#build-bot-process-loader-four').addClass('success');

        $('#build-bot-process-loader-five').addClass('processing');
    }

    if (event_progress == 100) {
        $('#build-bot-process-loader-five').removeClass('processing');
        $('#build-bot-process-loader-five').addClass('success');
    }
}

function cancel_build_bot() {
    return new Promise(function (resolve, reject) {
        $('#build-bot-process-loader-five').addClass('processing');

        var selected_bot_pk = BOT_ID;

        var json_string = JSON.stringify({
            'bot_id': selected_bot_pk,
        });
        json_string = EncryptVariable(json_string);
        json_string = encodeURIComponent(json_string);

        var xhttp = new XMLHttpRequest();
        var params = 'json_string=' + json_string;
        xhttp.open("POST", "/chat/update-need-to-build-bot/", true);
        xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                response = JSON.parse(this.responseText);
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response["status"] == 200) {
                    // for debug
                    console.log('Build Bot Cancelled!');
                } else {
                    console.log("Failed to Cancel Build Bot!");
                }
            }
        }
        xhttp.send(params);
    })
}

function get_bot_id() {
    var selected_bot_pk = window.location.href.split("/")[6];

    if (!selected_bot_pk) {
        selected_bot_pk = get_url_vars()["bot_pk"];
    }

    if (!selected_bot_pk) {
        selected_bot_pk = get_url_vars()["bot_id"];
    }

    if (!selected_bot_pk) {
        selected_bot_pk = $("#multiple-select-bot-choice-pk-list").val();
    }

    if (selected_bot_pk && selected_bot_pk.includes("=")) {
        selected_bot_pk = selected_bot_pk.split("=")[1];
    }

    return selected_bot_pk;
}

/* Build Bot Ends */


// Lanague fine tuning start

function set_url_parameter(parameter, parameter_value) {
    var final_query_param = "?";
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {
        final_query_param += key + "=" + (key == parameter ? parameter_value : value) + "&"
    });
    return window.location.origin + window.location.pathname + final_query_param;
}

// function check_and_update_language(selected_language, bot_pk) {

//     $("#modal-language-change-loader").modal('open')
//     var json_string = JSON.stringify({
//         selected_language: selected_language,
//         bot_pk: bot_pk
//     })
//     json_string = EncryptVariable(json_string);
//     json_string = encodeURIComponent(json_string);

//     var xhttp = new XMLHttpRequest();
//     var params = 'json_string=' + json_string
//     xhttp.open("POST", "/chat/update-selected-language/", false);
//     xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
//     xhttp.onreadystatechange = function() {
//         if (this.readyState == 4 && this.status == 200) {
//             response = JSON.parse(this.responseText);
//             response = custom_decrypt(response)
//             response = JSON.parse(response);
//             if (response["status"] == 200) {
//                 window.location = set_url_parameter("selected_language", selected_language)
//             } else {

//                 M.toast({
//                     "html": "Unable to get requested data. Please try after sometime."
//                 }, 1000);
//                 $("#modal-language-change-loader").modal('close')
//             }
//         }
//     }
//     xhttp.send(params);
// }

// function check_and_update_language_intent(selected_language, intent_pk) {

//     $("#modal-language-change-loader").modal('open')

//     var json_string = JSON.stringify({
//         selected_language: selected_language,
//         intent_pk: intent_pk
//     })
//     json_string = EncryptVariable(json_string);
//     json_string = encodeURIComponent(json_string);

//     var xhttp = new XMLHttpRequest();
//     var params = 'json_string=' + json_string
//     xhttp.open("POST", "/chat/update-selected-language-intent/", false);
//     xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
//     xhttp.onreadystatechange = function() {
//         if (this.readyState == 4 && this.status == 200) {
//             response = JSON.parse(this.responseText);
//             response = custom_decrypt(response)
//             response = JSON.parse(response);
//             if (response["status"] == 200) {

//                 window.location = window.location.origin + "/chat/edit-intent-multilingual/?intent_pk=" + intent_pk + "&selected_language=" + selected_language;
//             } else {

//                 M.toast({
//                     "html": "Unable to get requested data. Please try after sometime."
//                 }, 1000);
//                 $("#modal-language-change-loader").modal('close')
//             }
//         }
//     }
//     xhttp.send(params);
// }


function save_multilingual_intent() {

    var url_parameters = get_url_vars()
    if (url_parameters["selected_language"] != undefined) {

        selected_language = url_parameters["selected_language"]
    }
    intent_name = $('#intent_name').val().trim();

    if (intent_name == "") {
        M.toast({
            "html": "Intent name cannot be empty."
        }, 2000);
        return;
    }

    selected_bot_pk_list = [$("#multiple-select-bot-choice-pk-list").val()];

    if (selected_bot_pk_list.length == 0) {
        M.toast({
            "html": "Select atleast one bot in which intent will be supported"
        }, 2000);
        return;
    }

    intent_bot_response_text_text = $("#intent_bot_response_text_text").trumbowyg('html')
    intent_bot_response_text_speech = $("#intent_bot_response_text_speech").trumbowyg('html')
    intent_bot_response_reprompt = $("#intent_bot_response_reprompt").trumbowyg('html')
    intent_bot_response_text_text = intent_bot_response_text_text.replace(new RegExp('\r?<br />', 'g'), '<br>');
    intent_bot_response_ssml = $("#intent_bot_response_ssml").val();

    if (validate_ck_editor_response(intent_bot_response_text_text) != "" && validate_ck_editor_response(intent_bot_response_text_speech) == "") {
        intent_bot_response_text_speech = intent_bot_response_text_text
    }

    if (validate_ck_editor_response(intent_bot_response_text_text) == "") {
        M.toast({
            "html": "At least one text/speech response required."
        }, 2000);
        return;
    }

    var intent_response_list = [{
        "text_response": intent_bot_response_text_text,
        "speech_response": intent_bot_response_text_speech,
        "hinglish_response": "",
        "reprompt_response": intent_bot_response_reprompt,
        "ssml_response": ssml_response,
    }];
    card_list = []
    var spans = document.getElementsByTagName("span");
    for (var i = 0; i < spans.length; i++) {
        if (spans[i].id.indexOf("title_intent_card_") == 0) {
            data_id = spans[i].id;
            token_id = data_id.split("_")[3];
            check_img = document.getElementById("img_url_intent_card_" + token_id);
            card_img_url = '';
            if (check_img) {
                card_img_url = $("#img_url_intent_card_" + token_id).attr("src");
            }
            card_title = document.getElementById("title_intent_card_" + token_id).innerText;
            card_content = $("#content_intent_card_" + token_id).html();
            card_url = $("#link_intent_card_" + token_id).attr("href");
            card_list.push({
                "title": card_title,
                "content": card_content,
                "link": store_this_data_locally(card_url),
                "img_url": store_this_data_locally(card_img_url)
            });
        }
    }

    rows = document.getElementById('hidden-numbers-rows').innerHTML;
    if (document.getElementById('number-of-rows-table').value != "") {
        rows = document.getElementById('number-of-rows-table').value
    }
    table_input_list_of_list = ""
    if (rows != 0) {
        table_input_list_of_list = check_table_filled()
        if (table_input_list_of_list == false) {
            alert("Table cannot have empty cells");
            return;
        }
    }

    function check_table_filled() {
        rows = document.getElementById('hidden-numbers-rows').innerHTML;
        columns = document.getElementById('hidden-numbers-columns').innerHTML;
        if (document.getElementById('number-of-rows-table').value != "") {
            rows = document.getElementById('number-of-rows-table').value
        }
        if (document.getElementById('number-of-columns-table').value != "") {
            columns = document.getElementById('number-of-columns-table').value
        }
        table_input_list_of_list = []
        for (i = 0; i < rows; i++) {
            row_list = []
            for (j = 0; j < columns; j++) {
                cell_value = document.getElementById('cell-id-' + i.toString() + j.toString()).innerHTML;
                if (cell_value != "") {
                    if (un_entity(cell_value).trim() == "<br>" || un_entity(cell_value).trim() == "")
                        return false
                    else
                        row_list.push(un_entity(cell_value));
                } else {
                    return false
                };

            };
            table_input_list_of_list.push(row_list)
        };
        return table_input_list_of_list
    };

    document.getElementById("save-multilingual-intent").innerHTML = '<i class="inline-icon material-icons">save</i> Saving...'
    json_string = JSON.stringify({
        intent_pk: intent_pk,
        intent_name: intent_name,
        response_sentence_list: intent_response_list,
        selected_language: selected_language,
        card_list: card_list,
        table_input_list_of_list: table_input_list_of_list,
    });
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: '/chat/save-multilingual-intent/',
        type: "POST",
        data: {
            json_string: json_string
        },
        dataType: "json",
        async: false,
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            document.getElementById("save-multilingual-intent").innerHTML = '<i class="inline-icon material-icons">save</i> Save'
            if (response['status'] == 200) {

                M.toast({
                    'html': "Intent saved successfully!"
                }, 1000);
                window.location = set_url_parameter("selected_language", "en")
            } else {
                M.toast({
                    'html': "Unable to save the Intent. Please try after some time."
                }, 2000);
            }
        }
    });
}

$(document).on("click", "#save-multilingual-intent", function (e) {
    save_multilingual_intent();
});

if (window.location.pathname == '/chat/edit-tree-multilingual/') {
    if (window.location.href.indexOf("tree_pk=") != -1) {

        var url_parameters = get_url_vars();
        tree_pk = url_parameters["tree_pk"];
        intent_pk = url_parameters["intent_pk"];

        global_select_tree_id = tree_pk;
        global_select_intent_id = intent_pk;
        renderTreeStructureByIntentID(intent_pk);
        renderTreeInformation(tree_pk);
        // renderRequiredModalsIntoHTML(intent_pk);

        $(document).ready(function () {
            tree_generate_table();
        });
    }
}

$(document).on("click", "#save-multilingual-tree", function (e) {

    var url_parameters = get_url_vars();
    tree_pk = url_parameters["tree_pk"];
    intent_pk = url_parameters["intent_pk"];
    parent_pk = url_parameters["parent_pk"];
    selected_language = url_parameters["selected_language"];

    global_select_tree_id = tree_pk;
    global_select_intent_id = intent_pk;
    global_select_parent_id = parent_pk;

    tree_name = $("#tree_name").val();
    tree_name = stripHTML(tree_name);
    tree_name = tree_name.trim();

    tree_bot_response_text_text = $("#tree_bot_response_text_text").trumbowyg('html')
    tree_bot_response_text_speech = $("#tree_bot_response_text_speech").trumbowyg('html')
    tree_bot_response_reprompt = $("#tree_bot_response_reprompt").trumbowyg('html')
    tree_bot_response_ssml = $('#tree_bot_response_ssml').val().trim()

    tree_bot_response_text_text = tree_bot_response_text_text.replace(new RegExp('\r?<br />', 'g'), '<br>');

    if (validate_ck_editor_response(tree_bot_response_text_text) != "" && validate_ck_editor_response(tree_bot_response_text_speech) == "") {
        tree_bot_response_text_speech = tree_bot_response_text_text
    }

    if (validate_ck_editor_response(tree_bot_response_text_text) == "") {
        M.toast({
            "html": "At least one text response required."
        }, 2000);
        return;
    }

    tree_response_list = [{
        "text_response": tree_bot_response_text_text,
        "speech_response": tree_bot_response_text_speech,
        "hinglish_response": "",
        "reprompt_response": tree_bot_response_reprompt,
        "ssml_response": tree_bot_response_ssml,
    }]

    card_list = []
    var spans = document.getElementsByTagName("span");
    for (var i = 0; i < spans.length; i++) {
        if (spans[i].id.indexOf("title_tree_card_") == 0) {
            data_id = spans[i].id;
            token_id = data_id.split("_")[3];
            check_img = $("img_url_tree_card_" + token_id);
            card_img_url = '';
            if (check_img) {
                card_img_url = $("#img_url_tree_card_" + token_id).attr("src");
            }
            card_title = document.getElementById("title_tree_card_" + token_id).innerText;
            card_content = $("#content_tree_card_" + token_id).html();
            card_url = $("#link_tree_card_" + token_id).attr("href");
            card_list.push({
                "title": card_title,
                "content": card_content,
                "link": card_url,
                "img_url": card_img_url
            });
        }
    }

    rows = document.getElementById('tree-hidden-numbers-rows').innerHTML;
    if (document.getElementById('tree-number-of-rows-table').value != "") {
        rows = document.getElementById('tree-number-of-rows-table').value
    }

    table_input_list_of_list = ""
    if (rows != 0) {
        table_input_list_of_list = check_table_filled()
        if (table_input_list_of_list == false) {
            alert("Table cannot have empty cells");
            return;
        }
    }

    function check_table_filled() {
        rows = document.getElementById('tree-hidden-numbers-rows').innerHTML;
        columns = document.getElementById('tree-hidden-numbers-columns').innerHTML;
        if (document.getElementById('tree-number-of-rows-table').value != "") {
            rows = document.getElementById('tree-number-of-rows-table').value
        }
        if (document.getElementById('tree-number-of-columns-table').value != "") {
            columns = document.getElementById('tree-number-of-columns-table').value
        }
        table_input_list_of_list = []
        for (i = 0; i < rows; i++) {
            row_list = []
            for (j = 0; j < columns; j++) {
                cell_value = document.getElementById('cell-id-' + i.toString() + j.toString()).innerHTML;
                if (cell_value != "") {
                    if (un_entity(cell_value).trim() == "<br>" || un_entity(cell_value).trim() == "")
                        return false
                    else
                        row_list.push(un_entity(cell_value));
                } else {
                    return false
                };

            };
            table_input_list_of_list.push(row_list)
        };
        return table_input_list_of_list
    };

    json_string = JSON.stringify({
        intent_pk: intent_pk,
        tree_pk: tree_pk,
        tree_name: tree_name,
        response_sentence_list: tree_response_list,
        selected_language: selected_language,
        card_list: card_list,
        table_input_list_of_list: table_input_list_of_list,
    });

    json_string = EncryptVariable(json_string);

    var response = $.ajax({
        url: '/chat/save-multilingual-tree/',
        type: 'POST',
        async: false,
        data: {
            json_string: json_string
        },
        success: function (response) {

            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                M.toast({
                    'html': 'Tree saved successfully!'
                }, 2000);
                setTimeout(function (e) {
                    window.location = set_url_parameter("selected_language", "en")
                }, 2000);
            } else {
                M.toast({
                    'html': 'Unable to save current tree. Please try after some time.'
                }, 2000);
            }
        },
        error: function (error) {
            M.toast({
                'html': 'Unable to connect to server. Please try again later'
            }, 2000);
        }
    }).responseJSON;
});

// Lanague fine tunning end

// User chat history filter

function compare_dates(start_date, end_date) {
    // YYYY-MM-DD format
    if (start_date.slice(0, 4) < end_date.slice(0, 4)) {
        return true;
    } else if (start_date.slice(0, 4) == end_date.slice(0, 4)) {
        if (start_date.slice(5, 7) < end_date.slice(5, 7)) {
            return true;
        } else if (start_date.slice(5, 7) == end_date.slice(5, 7)) {
            if (start_date.slice(8, 10) <= end_date.slice(8, 10)) {
                return true;
            }
        }
    }
    return false;
}

function get_selected_channels(filter_type) {
    var channels_elems = document.querySelectorAll('.' + filter_type + '-channel-checkbox');
    var selected_channels = '';

    channels_elems.forEach(function (channel) {
        if (channel.checked) {
            if (selected_channels != "") {
                selected_channels += "+";
            }
            selected_channels += channel.id;
        }
    })

    return selected_channels;
}

function apply_user_chat_history_filter() {
    var date_range_type = "";
    var start_date = "";
    var end_date = "";
    var channels = "";
    var bot_id = get_url_vars()["bot_id"];
    var redirection_url = "/chat/user-filtered/?bot_id=" + bot_id;

    if (document.getElementById("date_range_1").checked) {
        date_range_type = "1";
    } else if (document.getElementById("date_range_2").checked) {
        date_range_type = "2";
    } else if (document.getElementById("date_range_3").checked) {
        date_range_type = "3";
    } else if (document.getElementById("date_range_4").checked) {
        date_range_type = "4";
    } else if (document.getElementById("date_range_5").checked) {
        date_range_type = "5";
        var today = new Date();
        var today = String(today.getMonth() + 1).padStart(2, '0') + '/' + String(today.getDate()).padStart(2, '0') + '/' + today.getFullYear();
        var from_date = document.getElementById("datepicker-1-0").value;
        var end_date = document.getElementById("datepicker-1-1").value;
        var from_time = document.getElementById("time-picker-btn-1-0").value;
        var end_time = document.getElementById("time-picker-btn-1-1").value;
        //From date cannot be greater than todays date
        if (!compare_message_history_dates(from_date, today)) {
            showToast("From date cannot be greater than today's date.");
            return;
        }

        //To date cannot be greater than todays date
        if (!compare_message_history_dates(end_date, today)) {
            showToast("To date cannot be greater than today's date");
            return;
        }

        //From datetime cannot be greater than to datetime
        if (!compare_message_history_datetime(from_date, end_date, from_time, end_time)) {
            showToast("From timestamp cannot be greater than to timestamp.");
            return;
        }

        from_date = from_date + "_" + from_time.split(" ").join("");
        end_date = end_date + "_" + end_time.split(" ").join("");

    }

    redirection_url += "&filter_type=" + date_range_type;
    if (date_range_type == 5) {
        redirection_url += "&start_date=" + from_date;
        redirection_url += "&end_date=" + end_date;
    }

    var selected_channels = get_selected_channels('user-chat-history');
    if (selected_channels != "") {
        redirection_url += "&channels=" + selected_channels;
    }

    window.location = redirection_url;
}
// User chat history filter end

// User chat history next page code
function select_page(page) {
    var params = get_url_vars();
    params["page"] = page;
    var redirection_url = "?";
    for (param in params) {
        if (redirection_url != "?") {
            redirection_url += "&";
        }
        redirection_url += param + "=" + params[param];
    }
    window.location = redirection_url;
}
// User chat history next page code end

function clear_user_filtered_data() {
    location.reload()
}

function select_single_channel_for_filter(element) {

    channel_selected = element.id;
}


function apply_intent_filter() {
    var intent_type_selected = "";
    var category_selected = "0";

    if (document.getElementById("intent_type_one").checked) {
        intent_type_selected = "is_form_assist_intent";
    } else if (document.getElementById("intent_type_two").checked) {
        intent_type_selected = "is_attachment_required";
    } else if (document.getElementById("intent_type_three").checked) {
        intent_type_selected = "is_small_talk";
    }

    category_selected = $("#easychat-filter-intent-category-select-div ul .easychat-lang-selected")[0].getAttribute("data-value");

    var params = get_url_vars();

    delete params["page"];
    if (intent_type_selected != "") {

        params["intent_type"] = intent_type_selected;
    } else if (intent_type_selected == "") {

        delete params["intent_type"];
    }
    if (channel_selected != "") {

        params["channel_name"] = channel_selected;
    } else if (channel_selected == "") {

        delete params["channel_name"];
    }
    if (category_selected != "0") {

        params["category_id"] = category_selected;
    } else if (category_selected == "0") {

        delete params["category_id"];
    }
    var redirection_url = "?";
    for (param in params) {
        if (redirection_url != "?") {
            redirection_url += "&";
        }
        redirection_url += param + "=" + params[param];
    }

    window.location = redirection_url;
}

function clear_intent_filter(filter) {
    var params = get_url_vars();
    delete params["page"];
    delete params[filter];
    var redirection_url = "?";
    for (param in params) {
        if (redirection_url != "?") {
            redirection_url += "&";
        }
        redirection_url += param + "=" + params[param];
    }
    window.location = redirection_url;
}

function check_bot_logo_file_size(el) {
    var file = el.files[0];
    var size_warn_el = document.getElementById('bot-logo-file-size-warning');

    if (file.size > 200000) {
        size_warn_el.innerHTML = "*Your file size is greater than 200 KB. For best performance, please upload a logo having size < 200 KB.";
        document.getElementById('upload-bot-logo').disabled = true;
    } else {
        size_warn_el.innerHTML = "";
        document.getElementById('upload-bot-logo').disabled = false;
    }
}

function open_upload_bot_logo_modal() {
    document.getElementById('bot-logo-file-size-warning').innerHTML = "";
    document.getElementById('upload-bot-logo').disabled = false;
    document.getElementById('input_upload_bot_logo2').value = "";
    document.getElementById('input_upload_bot_logo').value = "";
    $('#modal-upload-bot-logo').modal('open');
}

$(document).ready(function () {
    $('#enable_form_assist').change(function () {
        if (document.getElementById("enable_form_assist").checked) {
            document.getElementById("form_assist_type_wrapper").style.display = "block";
            if (document.getElementById("form_assist_intent_bubble_cb").checked) {
                document.getElementById('form_assist_intent_bubble_wrapper').style.display = 'inline-table';
                document.getElementById('form_assist_auto_popup_wrapper').style.display = 'none';
            }
            else {
                document.getElementById('form_assist_auto_popup_wrapper').style.display = 'inline-table';
                document.getElementById('form_assist_intent_bubble_wrapper').style.display = 'none';
            }
            if(document.getElementById('form_assist_enable_custom_intents').checked==true){
                $("#enable_custom_intents_web_form_list").show();
                $("#enable_custom_intents_web_form").show();
            }
            else{
                $("#enable_custom_intents_web_form_list").hide();
                $("#enable_custom_intents_web_form").hide();
            }
            uncheck_and_disable_auto_popup_settings();
            document.getElementById("enable_voice_form_assist_wrapper").style.display = "table";

        } else {
            document.getElementById("form_assist_type_wrapper").style.display = "none";
            reset_auto_popup_settings();
            document.getElementById("enable_voice_form_assist_wrapper").style.display = "none";
        }

    });
});

function show_form_assist_type_options(elem) {
    if (elem.value == "assist_popup") {
        document.getElementById('form_assist_intent_bubble_wrapper').style.display = 'none';
        document.getElementById('form_assist_auto_popup_wrapper').style.display = 'inline-table';
    } else {
        document.getElementById('form_assist_intent_bubble_wrapper').style.display = 'inline-table';
        document.getElementById('form_assist_auto_popup_wrapper').style.display = 'none';
    }
}

function show_form_assist_popup_options(select) {
    if (select.value == 2) {
        document.getElementById('form-assist_bot_popup_intents').style.display = "table-row";
        document.getElementById('form_assist_custom_intents').style.display = "table-row";
        if(document.getElementById('form_assist_enable_custom_intents').checked==true){
            $("#enable_custom_intents_web_form_list").show();
            $("#enable_custom_intents_web_form").show();
        }
        else{
            $("#enable_custom_intents_web_form_list").hide();
            $("#enable_custom_intents_web_form").hide();
        }

    } else {
        document.getElementById('form-assist_bot_popup_intents').style.display = "none";
        document.getElementById('form_assist_custom_intents').style.display = "none";
        $("#enable_custom_intents_web_form_list").hide();
        $("#enable_custom_intents_web_form").hide();

    }
}

function uncheck_and_disable_auto_popup_settings() {
    document.getElementById("bot-popup-time").style.display = "none";
    document.getElementById("bot-popup-options").style.display = "none";
    document.getElementById("bot-popup-intents").style.display = "none";
    $("#enable_custom_intents_web_auto_popup").hide();
    $("#enable_custom_intents_web_auto_popup_list").hide();
    document.getElementById('bot-popup-custom-intent').style.display = "none";
    document.getElementById("bot-popup-text").style.display = "none";
    document.getElementById('bot-popup-inactivity').style.display = "none";
    document.getElementById("is-bot-auto-popup-allowed-desktop").checked = false;
    document.getElementById("is-bot-auto-popup-allowed-mobile").checked = false;
    document.getElementById("is-bot-auto-popup-allowed-desktop").disabled = true;
    document.getElementById("is-bot-auto-popup-allowed-mobile").disabled = true;
}

function reset_auto_popup_settings() {
    document.getElementById("is-bot-auto-popup-allowed-desktop").disabled = false;
    document.getElementById("is-bot-auto-popup-allowed-mobile").disabled = false;
    document.getElementById("is-bot-auto-popup-allowed-desktop").checked = true;
    document.getElementById("is-bot-auto-popup-allowed-mobile").checked = true;
    document.getElementById('bot-popup-inactivity').style.display = "table-row";
    document.getElementById("bot-popup-time").style.display = "table-row";
    document.getElementById("bot-popup-time").value = 5;
    document.getElementById("bot-popup-options").style.display = "table-row";
    $('#bot-popup-options-values').val('2').trigger('change');
    document.getElementById("bot-popup-text").style.display = "table-row";
    document.getElementById("bot-popup-text").value = "Welcome. How may I help you today?";
}

// Scripts to handle autosuggest livechat for complex queries 
$('#easychat-checkbox-livechat-enable').click(function () {
    if ($(this).is(':checked')) {
        $('#autosuggest-livechat-complex-queries-row').show()
    }
    else {
        $('#autosuggest-livechat-complex-queries-row').hide()
        $('#autosuggest-livechat-word-limit-row').hide()
        $('#autosuggest-livechat-complex-queries').prop('checked', false);
    }
})
$('#autosuggest-livechat-complex-queries').click(function () {
    if ($(this).is(':checked')) {
        $('#autosuggest-livechat-word-limit-row').show()
    }
    else {
        $('#autosuggest-livechat-word-limit-row').hide()
    }
})

// Data Model Encrypt/Decrypt Values
function decrypt_data_model_values() {

    var data_model_table = document.getElementById("data-model-table");
    var encrypted_values = data_model_table.querySelectorAll('.data-model-values');

    current_data_model_encrypted_values = [];
    encrypted_values.forEach(function (encrypted_value) {
        current_data_model_encrypted_values.push(encrypted_value.innerText);
    });

    var json_string = JSON.stringify({
        "data_model_values": current_data_model_encrypted_values,
    });
    json_string = EncryptVariable(json_string);
    json_string = encodeURIComponent(json_string);

    var xhttp = new XMLHttpRequest();
    var params = 'json_string=' + json_string
    xhttp.open("POST", "/chat/decrypt-data-model-values/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                decrypted_values = response["decrypted_values"];

                update_encrypt_decrypt_icon();

                for (let i = 0; i < decrypted_values.length; i++) {
                    encrypted_values[i].innerText = decrypted_values[i];
                }
            }
        }
    }
    xhttp.send(params);

}

function update_encrypt_decrypt_icon() {

    var data_value_header = document.getElementById("data-model-value-header");

    data_value_header.innerHTML = `Value <button type="button" class="easychat-data-modal-masking-show-icon" id="easychat_data_modal_masking_show_icon" onclick="encrypt_data_model_values()">\
                                        <svg width="14" height="14" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <g clip-path="url(#clip0_1_6005)">
                                        <path d="M0.981445 9.5C0.981445 9.5 3.98145 3.5 9.23145 3.5C14.4814 3.5 17.4814 9.5 17.4814 9.5C17.4814 9.5 14.4814 15.5 9.23145 15.5C3.98145 15.5 0.981445 9.5 0.981445 9.5Z" stroke="#4D4D4D" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        <path d="M9.23145 11.75C10.4741 11.75 11.4814 10.7426 11.4814 9.5C11.4814 8.25736 10.4741 7.25 9.23145 7.25C7.9888 7.25 6.98145 8.25736 6.98145 9.5C6.98145 10.7426 7.9888 11.75 9.23145 11.75Z" stroke="#4D4D4D" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        </g>
                                        <defs>
                                        <clipPath id="clip0_1_6005">
                                        <rect width="18" height="18" fill="white" transform="translate(0.231445 0.5)"/>
                                        </clipPath>
                                        </defs>
                                        </svg>
                                   </button>`;

}

function encrypt_data_model_values() {

    var data_model_table = document.getElementById("data-model-table");
    var decrypted_values = data_model_table.querySelectorAll('.data-model-values');

    for (let i = 0; i < decrypted_values.length; i++) {
        decrypted_values[i].innerText = current_data_model_encrypted_values[i];
    }

    var data_value_header = document.getElementById("data-model-value-header");

    data_value_header.innerHTML = `Value <button type="button" class="easychat-data-modal-masking-hide-icon" id="easychat_data_modal_masking_hide_icon" onclick="decrypt_data_model_values()">\
                                    <svg width="14" height="14" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <g clip-path="url(#clip0_1_6011)">
                                        <path d="M7.65645 3.68002C8.17269 3.55918 8.70124 3.49877 9.23145 3.50002C14.4814 3.50002 17.4814 9.50002 17.4814 9.50002C17.0262 10.3517 16.4832 11.1536 15.8614 11.8925M10.8214 11.09C10.6155 11.3111 10.3671 11.4884 10.0911 11.6114C9.81506 11.7343 9.51712 11.8005 9.21501 11.8058C8.9129 11.8111 8.61282 11.7555 8.33265 11.6424C8.05249 11.5292 7.79799 11.3608 7.58433 11.1471C7.37067 10.9335 7.20224 10.679 7.08908 10.3988C6.97591 10.1186 6.92034 9.81856 6.92567 9.51645C6.931 9.21434 6.99713 8.9164 7.1201 8.6404C7.24308 8.36441 7.42039 8.11601 7.64145 7.91002M13.6864 13.955C12.4044 14.9323 10.8433 15.4737 9.23145 15.5C3.98145 15.5 0.981445 9.50002 0.981445 9.50002C1.91436 7.76144 3.2083 6.24247 4.77645 5.04502L13.6864 13.955Z" stroke="#4D4D4D" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        <path d="M0.981445 1.25L17.4814 17.75" stroke="#4D4D4D" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                                        </g>
                                        <defs>
                                        <clipPath id="clip0_1_6011">
                                        <rect width="18" height="18" fill="white" transform="translate(0.231445 0.5)"/>
                                        </clipPath>
                                        </defs>
                                    </svg>
                                   </button>`;

}

// Form Assist Page Javascript Start

$('.easychat_form_assist_select_intent_dropdown').select2().on('select2:open', function (e) {
    $('.select2-search__field').attr('placeholder', 'Search Intent');
});
$(".modal-trigger").click(function () {
    $("#form_assist_add_new_tag_modal").removeAttr("tabindex");
});

$(".form-assist-add-tag-input").on('change keydown paste input', function () {

    var empty = false;

    $('.form-assist-add-tag-input').each(function () {
        if ($(this).val() == '' || $(this).val() == null) {
            empty = true;
        }
    });

    if (empty) {
        document.getElementById('form-assist-tag-save-btn').style.pointerEvents = "none";
        document.getElementById('form-assist-tag-save-btn').style.opacity = "0.5";
    } else {
        document.getElementById('form-assist-tag-save-btn').style.pointerEvents = "auto";
        document.getElementById('form-assist-tag-save-btn').style.opacity = "1";
    }
});

function open_form_assist_edit_tag_modal(form_assist_id) {
    $("#edit-new-tag-modal-" + form_assist_id).removeAttr("tabindex");
    $("#edit-new-tag-modal-" + form_assist_id).modal('open');
}

$(".form-assist-edit-tag-input").on('change keydown paste input', function (e) {

    var form_assist_id = this.getAttribute('form_assist');
    var form_assist_tag_id = document.getElementById("form-assist-tag-id-" + form_assist_id).value;
    var form_assist_intent = $("#form-assist-intent-" + form_assist_id).val();
    var form_assist_popup_timer = document.getElementById("form-assist-popup-timer-" + form_assist_id).value;

    var empty = true;
    if (form_assist_tag_id && form_assist_intent && form_assist_popup_timer)
        empty = false;

    if (empty) {
        document.getElementById('form-assist-edit-tag-save-btn-' + form_assist_id).style.pointerEvents = "none";
        document.getElementById('form-assist-edit-tag-save-btn-' + form_assist_id).style.opacity = "0.5";
    } else {
        document.getElementById('form-assist-edit-tag-save-btn-' + form_assist_id).style.pointerEvents = "auto";
        document.getElementById('form-assist-edit-tag-save-btn-' + form_assist_id).style.opacity = "1";
    }

});

// Form Assist Page Javascript End

function upload_rcs_credentials_file() {

    var input_uploaded_files = ($("#drag-drop-input-box-rcs"))[0].files;
    bot_id = (get_url_vars()["id"])
    if (input_uploaded_files.length == 0) {
        M.toast({
            "html": "Please select a file to upload."
        }, 2000);
        return;
    }


    var formData = new FormData();
    formData.append("file", input_uploaded_files[0]);
    formData.append("bot_id", bot_id)

    $.ajax({
        url: "/chat/upload-rcs-credential-file/",
        type: "POST",
        data: formData,
        processData: false,
        contentType: false,
        success: function (response) {
            // $("#easychat-drive-files-preloader").hide();
            if (response["status"] == 200) {
                $("#modal-upload-rcs-credential-file").modal('close');
                M.toast({
                    "html": "File Uploaded Successfully!"
                }, 2000);
                document.getElementById('rcs_api_credential_file_path').value = response["filename"]
            } else if (response["status"] == 300) {
                M.toast({
                    "html": "Unable to upload files. File format not supported. Please do not use .(dot) in filename except for extension."
                }, 2000);
                $(".drag-drop-message-rcs").show();
                $("#file-selected-filename-rcs").html("");
                $("#drag-drop-input-box-rcs").val("");
                document.getElementById("drag_drop_message").style.display = "flex";
                msg_ele = document.getElementById("drag_drop_message_1");
                if (msg_ele) {
                    msg_ele.style.display = "none"
                }
                document.getElementById("error-message-rcs-json").style.display = "none";
                document.getElementById("error-message-rcs-json_1").style.display = "block";
            } else {
                M.toast({
                    "html": "Unable to upload the files!"
                }, 2000);
                $(".drag-drop-message-rcs").show();
                $("#file-selected-filename-rcs").html("");
                $("#drag-drop-input-box-rcs").val("");
                document.getElementById("drag_drop_message").style.display = "flex";
                msg_ele = document.getElementById("drag_drop_message_1");
                if (msg_ele) {
                    msg_ele.style.display = "none"
                }
            }
        },
        error: function (xhr, textstatus, errorthrown) {
            M.toast({
                "html": "Unable to upload the files! Please check your internet"
            }, 2000);
            console.log("Please report this error: " + errorthrown + xhr.status + xhr.responseText);

        }
    });

}

// Dynamic Form Widget JS Start

function sync_preview() {
    $(document).ready(function () {

        $('.easychat-form-widget-dropdown-wrapper').select2({
            dropdownParent: $('#modal-create-form')
        });

    });
    let form_name = $('#form_name').val();

    if (form_name == "") {
        showToast("Form name cannot be empty.", 2000);
        return;
    }

    $('#sync_preview_modal').html('');

    const data = get_built_form_info(true);

    if (!data) return;

    const sync_required = data.need_to_save;


    if (!sync_required) return;

    const form = data.form;

    state.form = { ...form };

    const field_ids = form.field_order;

    let form_name_div = `<div class="preview-form-name-div">${form_name}</div>`;
    $('#sync_preview_modal').append(form_name_div);

    field_ids.forEach(field_id => {
        const field = form[field_id];
        var current_id = field_id.split('-')[1]
        const html = get_field_html_based_input_type(field, current_id);

        $('#sync_preview_modal').append(html);

        initialize_phone_number_selector_console("telephone-preview-" + current_id, field.country_code, current_id)
        $('.easychat-form-widget-dropdown-wrapper').select2().on('select2:open', function (e) {
            $('.select2-search__field').attr('placeholder', 'Search here');
        });
    })
}

function get_field_html_based_input_type(field, id) {
    if (field.type == 'text_field') {
        return get_text_field_html(field, id);
    }
    else if (field.type == 'radio') {
        return get_radio_button_html(field, id);
    }
    else if (field.type == 'checkbox') {
        return get_checkbox_html(field, id);
    }
    else if (field.type == 'date_picker' || field.type == 'time_picker') {
        return get_date_field_html(field, id);
    }
    else if (field.type == 'file_attach') {
        return get_file_attach_field_html(field, id);
    }
    else if (field.type == 'dropdown_list') {
        return get_dropdown_html(field, id);
    }
    else if (field.type == 'range') {
        return get_range_html(field, id);
    }
    else if (field.type == 'phone_number') {
        return get_phone_number_field_html(field, id);
    }

}

function get_text_field_html(field, id) {

    let html = `
    <div class="form-preview-input-type-wrapper">
    <label>${field.label_name}`;

    if (!field.optional) {
        html += `
        <span style="color: red;">*</span>
        `
    }

    html += `</label>
    <div class="form-preview-input-type-text-content">
            <input type="text" id="field-${id}"placeholder="${field.placeholder}" readonly>
    </div></div>`;

    return html;
}

function get_radio_button_html(field, id) {
    let html = `
    <div class="form-preview-input-type-wrapper">
    <label>${field.label_name}`;

    if (!field.optional) {
        html += `
        <span style="color: red;">*</span></label>
        `
    }
    html += `<div class="form-preview-input-type-radio-content">`
    if (field.options.length == 0 && api_integrated_fields.includes(id)) {
        html += `<p>This is a dynamic field and options will be fetched dynamically from API</p>`
    }
    Array.from(field.options).forEach(option => {
        html += `
        <div class="form-preview-input-type-radio-item">
            <div class="widget-indigator-icon" style="height: 20px;">
                <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M5 12C5 8.136 8.136 5 12 5C15.864 5 19 8.136 19 12C19 15.864 15.864 19 12 19C8.136 19 5 15.864 5 12ZM6.39959 12C6.39959 15.094 8.90559 17.6 11.9996 17.6C15.0936 17.6 17.5996 15.094 17.5996 12C17.5996 8.90597 15.0936 6.39997 11.9996 6.39997C8.90559 6.39997 6.39959 8.90597 6.39959 12Z" fill="#C4C4C4"></path>
                    </svg>
            </div>
            <div class="form-preview-radio-item-value">${option}</div>
        </div>`
    })

    html += `</div></div>`;

    return html;
}

function get_checkbox_html(field, id) {
    let html = `
    <div class="form-preview-input-type-wrapper">
    <label>${field.label_name}`;

    if (!field.optional) {
        html += `
        <span style="color: red;">*</span></label>
        `
    }
    html += `<div class="form-preview-input-type-checkbox-content">`
    if (field.options.length == 0 && api_integrated_fields.includes(id)) {
        html += `<p>This is a dynamic field and options will be fetched dynamically from API</p>`
    }
    Array.from(field.options).forEach(option => {
        html += `
        <div class="form-preview-input-type-checkbox-item">
            <div class="widget-indigator-icon" style="height: 20px;">
                <svg width="19" height="19" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" clip-rule="evenodd" d="M4.25 2.75H14.75C15.575 2.75 16.25 3.425 16.25 4.25V14.75C16.25 15.575 15.575 16.25 14.75 16.25H4.25C3.425 16.25 2.75 15.575 2.75 14.75V4.25C2.75 3.425 3.425 2.75 4.25 2.75ZM5 14.75H14C14.4125 14.75 14.75 14.4125 14.75 14V5C14.75 4.5875 14.4125 4.25 14 4.25H5C4.5875 4.25 4.25 4.5875 4.25 5V14C4.25 14.4125 4.5875 14.75 5 14.75Z" fill="#C4C4C4"></path>
                </svg>
            </div>
            <div class="form-preview-checkbox-item-value">${option}</div>
        </div>`
    })

    html += `</div></div>`;

    return html;
}

function get_date_field_html(field, id) {
    let html = `
    <div class="form-preview-input-type-wrapper">
    <label>${field.label_name}`;

    if (!field.optional) {
        html += `
        <span style="color: red;">*</span>
        `
    }
    if (field.calendar_type == 'Custom Type') {
        html += `<div class="form-preview-input-type-date-picker-content ">
                    <svg width="245" height="202" viewBox="0 0 245 202" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g filter="url(#filter0_d_1_15)">
                        <rect x="14" y="14" width="217" height="174" rx="12" fill="white"/>
                        </g>
                        <path d="M102.9 78.5H104.034V74.118H108.192V73.096H104.034V69.736H108.486V68.7H102.9V78.5ZM110.444 78.5H111.55V74.748C111.55 73.362 112.292 72.326 113.622 72.326H114.224V71.22H113.608C112.544 71.22 111.83 71.962 111.62 72.578H111.536V71.22H110.444V78.5ZM119.01 78.682C121.194 78.682 122.818 77.044 122.818 74.86C122.818 72.676 121.222 71.038 119.024 71.038C116.854 71.038 115.216 72.662 115.216 74.86C115.216 77.072 116.826 78.682 119.01 78.682ZM119.01 77.674C117.456 77.674 116.35 76.498 116.35 74.86C116.35 73.264 117.442 72.046 119.01 72.046C120.578 72.046 121.684 73.25 121.684 74.86C121.684 76.484 120.578 77.674 119.01 77.674ZM124.772 78.5H125.878V74.118C125.878 72.886 126.746 72.074 127.768 72.074C128.79 72.074 129.574 72.774 129.574 73.936V78.5H130.68V74.16C130.68 72.802 131.576 72.074 132.598 72.074C133.676 72.074 134.362 72.774 134.362 74.146V78.5H135.468V73.782C135.468 72.186 134.418 71.038 132.794 71.038C131.772 71.038 130.974 71.43 130.484 72.368H130.386C129.98 71.57 129.182 71.038 128.09 71.038C127.012 71.038 126.312 71.598 125.962 72.27H125.878V71.22H124.772V78.5ZM141.906 78.5H144.818C147.926 78.5 149.732 76.638 149.732 73.6C149.732 70.744 147.926 68.7 144.818 68.7H141.906V78.5ZM143.04 77.492V69.722H144.818C147.17 69.722 148.57 71.234 148.57 73.6C148.57 76.064 147.142 77.492 144.818 77.492H143.04ZM154.758 78.682C156.34 78.682 157.096 77.618 157.278 77.352H157.362V78.5H158.426V71.22H157.32V72.396H157.236C157.012 72.018 156.2 71.038 154.674 71.038C152.616 71.038 151.132 72.634 151.132 74.874C151.132 77.1 152.616 78.682 154.758 78.682ZM154.828 77.688C153.302 77.688 152.266 76.582 152.266 74.874C152.266 73.222 153.302 72.046 154.8 72.046C156.242 72.046 157.362 73.082 157.362 74.874C157.362 76.4 156.41 77.688 154.828 77.688ZM163.653 78.5H164.731V77.534H163.723C162.883 77.534 162.589 77.072 162.589 76.288V72.158H164.829V71.22H162.589V69.106H161.553V70.856C161.553 71.094 161.399 71.22 161.203 71.22H160.111V72.158H161.483V76.302C161.483 77.772 162.309 78.5 163.653 78.5ZM169.865 78.682C171.573 78.682 172.847 77.716 173.253 76.358H172.105C171.769 77.212 170.845 77.674 169.879 77.674C168.381 77.674 167.443 76.708 167.387 75.252H173.323V74.762C173.323 72.662 172.007 71.038 169.795 71.038C167.807 71.038 166.225 72.536 166.225 74.86C166.225 77.044 167.639 78.682 169.865 78.682ZM167.415 74.272C167.527 72.928 168.577 72.046 169.795 72.046C171.027 72.046 172.049 72.816 172.147 74.272H167.415Z" fill="#0254D7"/>
                        <rect x="79" y="60.5" width="118" height="26" rx="3.5" stroke="#0254D7"/>
                        <path d="M48.536 48V38.2H54.5V39.166H49.712V42.61H53.786V43.562H49.712V48H48.536ZM55.9445 48V41.056H57.0085L57.1065 42.386C57.3212 41.9287 57.6478 41.5647 58.0865 41.294C58.5252 41.0233 59.0665 40.888 59.7105 40.888V42.12H59.3885C58.9778 42.12 58.5998 42.1947 58.2545 42.344C57.9092 42.484 57.6338 42.7267 57.4285 43.072C57.2232 43.4173 57.1205 43.8933 57.1205 44.5V48H55.9445ZM63.9347 48.168C63.2814 48.168 62.6934 48.0187 62.1707 47.72C61.648 47.4213 61.2327 47.0013 60.9247 46.46C60.626 45.9093 60.4767 45.2653 60.4767 44.528C60.4767 43.7907 60.6307 43.1513 60.9387 42.61C61.2467 42.0593 61.662 41.6347 62.1847 41.336C62.7167 41.0373 63.3094 40.888 63.9627 40.888C64.616 40.888 65.204 41.0373 65.7267 41.336C66.2494 41.6347 66.66 42.0593 66.9587 42.61C67.2667 43.1513 67.4207 43.7907 67.4207 44.528C67.4207 45.2653 67.2667 45.9093 66.9587 46.46C66.6507 47.0013 66.2307 47.4213 65.6987 47.72C65.176 48.0187 64.588 48.168 63.9347 48.168ZM63.9347 47.16C64.336 47.16 64.7094 47.062 65.0547 46.866C65.4 46.67 65.68 46.376 65.8947 45.984C66.1094 45.592 66.2167 45.1067 66.2167 44.528C66.2167 43.9493 66.1094 43.464 65.8947 43.072C65.6894 42.68 65.414 42.386 65.0687 42.19C64.7234 41.994 64.3547 41.896 63.9627 41.896C63.5614 41.896 63.188 41.994 62.8427 42.19C62.4974 42.386 62.2174 42.68 62.0027 43.072C61.788 43.464 61.6807 43.9493 61.6807 44.528C61.6807 45.1067 61.788 45.592 62.0027 45.984C62.2174 46.376 62.4927 46.67 62.8287 46.866C63.174 47.062 63.5427 47.16 63.9347 47.16ZM69.0558 48V41.056H70.1198L70.2038 42.064C70.4278 41.6907 70.7265 41.4013 71.0998 41.196C71.4732 40.9907 71.8932 40.888 72.3598 40.888C72.9105 40.888 73.3818 41 73.7738 41.224C74.1752 41.448 74.4832 41.7887 74.6978 42.246C74.9405 41.826 75.2718 41.4947 75.6918 41.252C76.1212 41.0093 76.5832 40.888 77.0778 40.888C77.9085 40.888 78.5712 41.14 79.0658 41.644C79.5605 42.1387 79.8078 42.904 79.8078 43.94V48H78.6458V44.066C78.6458 43.3473 78.5012 42.806 78.2118 42.442C77.9225 42.078 77.5072 41.896 76.9658 41.896C76.4058 41.896 75.9392 42.1153 75.5658 42.554C75.2018 42.9833 75.0198 43.5993 75.0198 44.402V48H73.8438V44.066C73.8438 43.3473 73.6992 42.806 73.4098 42.442C73.1205 42.078 72.7052 41.896 72.1638 41.896C71.6132 41.896 71.1512 42.1153 70.7778 42.554C70.4138 42.9833 70.2318 43.5993 70.2318 44.402V48H69.0558Z" fill="#7B7A7B"/>
                        <line x1="29" y1="104.5" x2="216" y2="104.5" stroke="#EBEBEB"/>
                        <path d="M55.332 137V128.166H52.406V127.2H59.434V128.166H56.508V137H55.332ZM62.7062 137.168C62.0528 137.168 61.4648 137.019 60.9422 136.72C60.4195 136.421 60.0042 136.001 59.6962 135.46C59.3975 134.909 59.2482 134.265 59.2482 133.528C59.2482 132.791 59.4022 132.151 59.7102 131.61C60.0182 131.059 60.4335 130.635 60.9562 130.336C61.4882 130.037 62.0808 129.888 62.7342 129.888C63.3875 129.888 63.9755 130.037 64.4982 130.336C65.0208 130.635 65.4315 131.059 65.7302 131.61C66.0382 132.151 66.1922 132.791 66.1922 133.528C66.1922 134.265 66.0382 134.909 65.7302 135.46C65.4222 136.001 65.0022 136.421 64.4702 136.72C63.9475 137.019 63.3595 137.168 62.7062 137.168ZM62.7062 136.16C63.1075 136.16 63.4808 136.062 63.8262 135.866C64.1715 135.67 64.4515 135.376 64.6662 134.984C64.8808 134.592 64.9882 134.107 64.9882 133.528C64.9882 132.949 64.8808 132.464 64.6662 132.072C64.4608 131.68 64.1855 131.386 63.8402 131.19C63.4948 130.994 63.1262 130.896 62.7342 130.896C62.3328 130.896 61.9595 130.994 61.6142 131.19C61.2688 131.386 60.9888 131.68 60.7742 132.072C60.5595 132.464 60.4522 132.949 60.4522 133.528C60.4522 134.107 60.5595 134.592 60.7742 134.984C60.9888 135.376 61.2642 135.67 61.6002 135.866C61.9455 136.062 62.3142 136.16 62.7062 136.16Z" fill="#7B7A7B"/>
                        <path d="M109.916 159.5H111.05V150.736H114.046V149.7H106.92V150.736H109.916V159.5ZM117.707 159.682C119.891 159.682 121.515 158.044 121.515 155.86C121.515 153.676 119.919 152.038 117.721 152.038C115.551 152.038 113.913 153.662 113.913 155.86C113.913 158.072 115.523 159.682 117.707 159.682ZM117.707 158.674C116.153 158.674 115.047 157.498 115.047 155.86C115.047 154.264 116.139 153.046 117.707 153.046C119.275 153.046 120.381 154.25 120.381 155.86C120.381 157.484 119.275 158.674 117.707 158.674ZM127.533 159.5H130.445C133.553 159.5 135.359 157.638 135.359 154.6C135.359 151.744 133.553 149.7 130.445 149.7H127.533V159.5ZM128.667 158.492V150.722H130.445C132.797 150.722 134.197 152.234 134.197 154.6C134.197 157.064 132.769 158.492 130.445 158.492H128.667ZM140.385 159.682C141.967 159.682 142.723 158.618 142.905 158.352H142.989V159.5H144.053V152.22H142.947V153.396H142.863C142.639 153.018 141.827 152.038 140.301 152.038C138.243 152.038 136.759 153.634 136.759 155.874C136.759 158.1 138.243 159.682 140.385 159.682ZM140.455 158.688C138.929 158.688 137.893 157.582 137.893 155.874C137.893 154.222 138.929 153.046 140.427 153.046C141.869 153.046 142.989 154.082 142.989 155.874C142.989 157.4 142.037 158.688 140.455 158.688ZM149.28 159.5H150.358V158.534H149.35C148.51 158.534 148.216 158.072 148.216 157.288V153.158H150.456V152.22H148.216V150.106H147.18V151.856C147.18 152.094 147.026 152.22 146.83 152.22H145.738V153.158H147.11V157.302C147.11 158.772 147.936 159.5 149.28 159.5ZM155.492 159.682C157.2 159.682 158.474 158.716 158.88 157.358H157.732C157.396 158.212 156.472 158.674 155.506 158.674C154.008 158.674 153.07 157.708 153.014 156.252H158.95V155.762C158.95 153.662 157.634 152.038 155.422 152.038C153.434 152.038 151.852 153.536 151.852 155.86C151.852 158.044 153.266 159.682 155.492 159.682ZM153.042 155.272C153.154 153.928 154.204 153.046 155.422 153.046C156.654 153.046 157.676 153.816 157.774 155.272H153.042Z" fill="#0254D7"/>
                        <rect x="74.5" y="141.5" width="118" height="26" rx="3.5" stroke="#0254D7"/>
                        <defs>
                        <filter id="filter0_d_1_15" x="0" y="0" width="245" height="202" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                        <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                        <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
                        <feOffset/>
                        <feGaussianBlur stdDeviation="7"/>
                        <feComposite in2="hardAlpha" operator="out"/>
                        <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.05 0"/>
                        <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_1_15"/>
                        <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_1_15" result="shape"/>
                        </filter>
                        </defs>
                    </svg>
                </div>`
    } else {
        html += `<div class="form-preview-input-type-date-picker-content ">
                    <svg width="245" height="91" viewBox="0 0 245 91" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <g filter="url(#filter0_d_1_7)">
                        <rect x="14" y="14" width="217" height="63" rx="12" fill="white"/>
                        </g>
                        <path d="M90.28 50.5H91.47L92.352 48.176H97.084L97.966 50.5H99.156L95.39 40.7H94.06L90.28 50.5ZM92.744 47.14L94.676 42.016H94.76L96.692 47.14H92.744ZM103.623 50.682C105.205 50.682 105.961 49.618 106.143 49.352H106.227V50.5H107.291V40H106.185V44.396H106.101C105.877 44.018 105.065 43.038 103.539 43.038C101.481 43.038 99.9969 44.634 99.9969 46.874C99.9969 49.1 101.481 50.682 103.623 50.682ZM103.693 49.688C102.167 49.688 101.131 48.582 101.131 46.874C101.131 45.222 102.167 44.046 103.665 44.046C105.107 44.046 106.227 45.082 106.227 46.874C106.227 48.4 105.275 49.688 103.693 49.688ZM112.742 50.682C114.324 50.682 115.08 49.618 115.262 49.352H115.346V50.5H116.41V40H115.304V44.396H115.22C114.996 44.018 114.184 43.038 112.658 43.038C110.6 43.038 109.116 44.634 109.116 46.874C109.116 49.1 110.6 50.682 112.742 50.682ZM112.812 49.688C111.286 49.688 110.25 48.582 110.25 46.874C110.25 45.222 111.286 44.046 112.784 44.046C114.226 44.046 115.346 45.082 115.346 46.874C115.346 48.4 114.394 49.688 112.812 49.688ZM122.859 50.5H125.771C128.879 50.5 130.685 48.638 130.685 45.6C130.685 42.744 128.879 40.7 125.771 40.7H122.859V50.5ZM123.993 49.492V41.722H125.771C128.123 41.722 129.523 43.234 129.523 45.6C129.523 48.064 128.095 49.492 125.771 49.492H123.993ZM135.711 50.682C137.293 50.682 138.049 49.618 138.231 49.352H138.315V50.5H139.379V43.22H138.273V44.396H138.189C137.965 44.018 137.153 43.038 135.627 43.038C133.569 43.038 132.085 44.634 132.085 46.874C132.085 49.1 133.569 50.682 135.711 50.682ZM135.781 49.688C134.255 49.688 133.219 48.582 133.219 46.874C133.219 45.222 134.255 44.046 135.753 44.046C137.195 44.046 138.315 45.082 138.315 46.874C138.315 48.4 137.363 49.688 135.781 49.688ZM144.606 50.5H145.684V49.534H144.676C143.836 49.534 143.542 49.072 143.542 48.288V44.158H145.782V43.22H143.542V41.106H142.506V42.856C142.506 43.094 142.352 43.22 142.156 43.22H141.064V44.158H142.436V48.302C142.436 49.772 143.262 50.5 144.606 50.5ZM150.819 50.682C152.527 50.682 153.801 49.716 154.207 48.358H153.059C152.723 49.212 151.799 49.674 150.833 49.674C149.335 49.674 148.397 48.708 148.341 47.252H154.277V46.762C154.277 44.662 152.961 43.038 150.749 43.038C148.761 43.038 147.179 44.536 147.179 46.86C147.179 49.044 148.593 50.682 150.819 50.682ZM148.369 46.272C148.481 44.928 149.531 44.046 150.749 44.046C151.981 44.046 153.003 44.816 153.101 46.272H148.369Z" fill="#0254D7"/>
                        <rect x="63.5" y="32.5" width="118" height="26" rx="3.5" stroke="#0254D7"/>
                        <defs>
                        <filter id="filter0_d_1_7" x="0" y="0" width="245" height="91" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                        <feFlood flood-opacity="0" result="BackgroundImageFix"/>
                        <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
                        <feOffset/>
                        <feGaussianBlur stdDeviation="7"/>
                        <feComposite in2="hardAlpha" operator="out"/>
                        <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.05 0"/>
                        <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_1_7"/>
                        <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_1_7" result="shape"/>
                        </filter>
                        </defs>
                    </svg>
                </div>`
    }

    html += `</div>`;

    return html;
}

function get_file_attach_field_html(field, id) {
    let html = `
    <div class="form-preview-input-type-wrapper">
    <label>${field.label_name}</label>`;

    if (!field.optional) {
        html += `
        <span style="color: red;">*</span>
        `
    }

    html += build_file_attach_preview(field.file_type, true)

    html += "</div>"

    return html;
}

function get_range_html(field, id) {
    let html = `
    <div class="form-preview-input-type-wrapper">
    <label>${field.label_name}`;

    if (!field.optional) {
        html += `
        <span style="color: red;">*</span>
        `
    }

    if (field.slider_type.includes('Single')) {

        html += `<div class="form-preview-input-type-single-range-content form-preview-range-slider">

            <svg width="60" height="7" viewBox="0 0 60 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0.0655651 4.65111H0.971386C0.977003 4.97131 1.10199 5.23673 1.34635 5.44739C1.59071 5.65805 1.91653 5.76337 2.3238 5.76337C2.68612 5.76337 2.97683 5.68613 3.19591 5.53165C3.41499 5.37436 3.52454 5.1609 3.52454 4.89126C3.52454 4.71712 3.48662 4.56825 3.41078 4.44467C3.33775 4.32108 3.23804 4.22418 3.11165 4.15396C2.98526 4.08094 2.84061 4.01914 2.6777 3.96859C2.51479 3.91803 2.34205 3.87168 2.15948 3.82955C1.97973 3.78742 1.79856 3.74248 1.61599 3.69473C1.43623 3.64418 1.2649 3.57817 1.10199 3.49672C0.939085 3.41245 0.794435 3.31134 0.668041 3.19337C0.541647 3.0726 0.440533 2.9139 0.364697 2.71729C0.291669 2.52068 0.255155 2.29317 0.255155 2.03476C0.255155 1.56009 0.43632 1.16124 0.798648 0.838238C1.16378 0.515233 1.65532 0.35373 2.27324 0.35373C2.53726 0.35373 2.78864 0.390244 3.02739 0.463271C3.26894 0.536298 3.48802 0.644435 3.68463 0.787681C3.88405 0.928118 4.04275 1.11771 4.16072 1.35645C4.28149 1.59239 4.34328 1.86203 4.34609 2.16537H3.40235C3.40235 1.86484 3.30264 1.6275 3.10322 1.45335C2.90661 1.2764 2.62714 1.18793 2.26481 1.18793C1.91372 1.18793 1.64408 1.26798 1.45589 1.42808C1.27052 1.58817 1.17783 1.78479 1.17783 2.01791C1.17783 2.17239 1.21575 2.30581 1.29158 2.41816C1.36742 2.5277 1.46853 2.61477 1.59493 2.67937C1.72132 2.74397 1.86738 2.80015 2.03309 2.8479C2.19881 2.89564 2.37295 2.94199 2.55552 2.98693C2.73809 3.02906 2.92066 3.07681 3.10322 3.13017C3.28579 3.18073 3.45993 3.24955 3.62565 3.33662C3.79137 3.42369 3.93742 3.52902 4.06381 3.6526C4.19021 3.77338 4.29132 3.93348 4.36716 4.1329C4.443 4.33232 4.48091 4.56264 4.48091 4.82385C4.48091 5.34628 4.2843 5.77601 3.89108 6.11306C3.50066 6.45011 2.967 6.61864 2.29009 6.61864C1.64127 6.61864 1.10761 6.43607 0.689107 6.07093C0.273412 5.70299 0.0655651 5.22971 0.0655651 4.65111ZM5.2477 4.2635C5.2477 3.79444 5.34601 3.37875 5.54262 3.01642C5.73923 2.65128 6.00747 2.37041 6.34732 2.1738C6.68999 1.97718 7.07479 1.87888 7.50172 1.87888C7.84439 1.87888 8.15616 1.93927 8.43703 2.06004C8.71791 2.18082 8.94963 2.34653 9.1322 2.55719C9.31757 2.76785 9.45942 3.01361 9.55772 3.29449C9.65884 3.57536 9.70939 3.8773 9.70939 4.20031V4.53736H6.15352C6.17037 4.93339 6.30379 5.25218 6.55377 5.49373C6.80375 5.73529 7.13377 5.85606 7.54385 5.85606C7.83034 5.85606 8.08594 5.79146 8.31064 5.66226C8.53815 5.53306 8.69684 5.35891 8.78672 5.13983H9.66726C9.54929 5.58361 9.29791 5.94173 8.91311 6.21418C8.53112 6.48382 8.06628 6.61864 7.51857 6.61864C6.84728 6.61864 6.30098 6.39815 5.87967 5.95718C5.45836 5.5134 5.2477 4.94884 5.2477 4.2635ZM6.17037 3.83798H8.812C8.78391 3.46722 8.64769 3.17511 8.40333 2.96165C8.15897 2.74538 7.85843 2.63724 7.50172 2.63724C7.15343 2.63724 6.8529 2.74959 6.60011 2.97429C6.34732 3.19899 6.20408 3.48689 6.17037 3.83798ZM10.6068 5.38419V0.0335329H11.5126V5.32942C11.5126 5.4502 11.5421 5.54289 11.6011 5.60749C11.6601 5.67209 11.7457 5.70439 11.8581 5.70439H12.0477V6.50488H11.6769C11.3371 6.50488 11.073 6.40658 10.8849 6.20996C10.6995 6.01335 10.6068 5.7381 10.6068 5.38419ZM12.7302 4.2635C12.7302 3.79444 12.8285 3.37875 13.0251 3.01642C13.2217 2.65128 13.49 2.37041 13.8298 2.1738C14.1725 1.97718 14.5573 1.87888 14.9842 1.87888C15.3269 1.87888 15.6387 1.93927 15.9195 2.06004C16.2004 2.18082 16.4321 2.34653 16.6147 2.55719C16.8001 2.76785 16.9419 3.01361 17.0402 3.29449C17.1413 3.57536 17.1919 3.8773 17.1919 4.20031V4.53736H13.636C13.6529 4.93339 13.7863 5.25218 14.0363 5.49373C14.2862 5.73529 14.6163 5.85606 15.0263 5.85606C15.3128 5.85606 15.5684 5.79146 15.7931 5.66226C16.0206 5.53306 16.1793 5.35891 16.2692 5.13983H17.1498C17.0318 5.58361 16.7804 5.94173 16.3956 6.21418C16.0136 6.48382 15.5488 6.61864 15.0011 6.61864C14.3298 6.61864 13.7835 6.39815 13.3622 5.95718C12.9409 5.5134 12.7302 4.94884 12.7302 4.2635ZM13.6529 3.83798H16.2945C16.2664 3.46722 16.1302 3.17511 15.8858 2.96165C15.6415 2.74538 15.3409 2.63724 14.9842 2.63724C14.6359 2.63724 14.3354 2.74959 14.0826 2.97429C13.8298 3.19899 13.6866 3.48689 13.6529 3.83798ZM17.9713 4.25086C17.9713 3.80989 18.0696 3.40965 18.2662 3.05013C18.4628 2.6878 18.7395 2.40271 19.0962 2.19486C19.4557 1.98421 19.8602 1.87888 20.3096 1.87888C20.8517 1.87888 21.325 2.03336 21.7294 2.34232C22.1367 2.65128 22.3909 3.06136 22.492 3.57255H21.5609C21.4823 3.31415 21.3292 3.1063 21.1017 2.94901C20.877 2.78891 20.6158 2.70886 20.318 2.70886C19.8967 2.70886 19.5555 2.85492 19.2942 3.14703C19.033 3.43914 18.9024 3.80708 18.9024 4.25086C18.9024 4.69745 19.0358 5.06681 19.3027 5.35891C19.5695 5.65102 19.9136 5.79708 20.3349 5.79708C20.6242 5.79708 20.8826 5.71843 21.1101 5.56114C21.3376 5.40385 21.4907 5.19741 21.5693 4.94182H22.492C22.3937 5.4502 22.1423 5.85747 21.7378 6.16362C21.3334 6.46696 20.8601 6.61864 20.318 6.61864C19.9754 6.61864 19.6566 6.55825 19.3616 6.43747C19.0695 6.31389 18.8224 6.14677 18.6201 5.93611C18.4179 5.72265 18.2592 5.47126 18.1441 5.18196C18.0289 4.88985 17.9713 4.57949 17.9713 4.25086ZM23.2293 2.73414V2.00106H23.8233C23.902 2.00106 23.9666 1.97438 24.0171 1.92101C24.0677 1.86764 24.093 1.79602 24.093 1.70614V0.716058H24.944V1.99263H26.2585V2.73414H24.944V5.04714C24.944 5.50778 25.1631 5.7381 25.6013 5.7381H26.2122V6.50488H25.4622C25.0128 6.50488 24.6632 6.3827 24.4132 6.13834C24.1632 5.89117 24.0382 5.53587 24.0382 5.07242V2.73414H23.2293ZM29.9703 5.9656C29.5658 5.53025 29.3636 4.96288 29.3636 4.2635C29.3636 3.56413 29.5644 2.99255 29.9661 2.54876C30.3677 2.10217 30.8831 1.87888 31.5123 1.87888C31.7145 1.87888 31.9041 1.90697 32.0811 1.96314C32.258 2.01932 32.4055 2.09234 32.5234 2.18222C32.6442 2.2721 32.7397 2.35496 32.8099 2.4308C32.8801 2.50382 32.9391 2.57685 32.9869 2.64988H33.0501V1.99263H33.9559V6.50488H33.0669V5.86449H33.0122C32.6554 6.36725 32.1695 6.61864 31.5544 6.61864C30.9056 6.61864 30.3775 6.40096 29.9703 5.9656ZM30.2863 4.25086C30.2863 4.71712 30.4141 5.09208 30.6697 5.37577C30.9281 5.65664 31.2665 5.79708 31.685 5.79708C32.1063 5.79708 32.4434 5.64962 32.6962 5.3547C32.949 5.05978 33.0753 4.69184 33.0753 4.25086C33.0753 3.77619 32.9433 3.40122 32.6793 3.12596C32.4181 2.8479 32.0839 2.70886 31.6766 2.70886C31.2665 2.70886 30.9323 2.85351 30.6739 3.14281C30.4155 3.42931 30.2863 3.79866 30.2863 4.25086ZM37.1199 1.99263H38.0805L39.2939 5.40947H39.3571L40.5621 1.99263H41.5395L39.8206 6.50488H38.8389L37.1199 1.99263ZM42.5507 5.9656C42.1462 5.53025 41.944 4.96288 41.944 4.2635C41.944 3.56413 42.1448 2.99255 42.5464 2.54876C42.9481 2.10217 43.4635 1.87888 44.0927 1.87888C44.2949 1.87888 44.4845 1.90697 44.6614 1.96314C44.8384 2.01932 44.9858 2.09234 45.1038 2.18222C45.2246 2.2721 45.3201 2.35496 45.3903 2.4308C45.4605 2.50382 45.5195 2.57685 45.5672 2.64988H45.6304V1.99263H46.5363V6.50488H45.6473V5.86449H45.5925C45.2358 6.36725 44.7499 6.61864 44.1348 6.61864C43.486 6.61864 42.9579 6.40096 42.5507 5.9656ZM42.8666 4.25086C42.8666 4.71712 42.9944 5.09208 43.25 5.37577C43.5084 5.65664 43.8469 5.79708 44.2654 5.79708C44.6867 5.79708 45.0238 5.64962 45.2765 5.3547C45.5293 5.05978 45.6557 4.69184 45.6557 4.25086C45.6557 3.77619 45.5237 3.40122 45.2597 3.12596C44.9985 2.8479 44.6642 2.70886 44.257 2.70886C43.8469 2.70886 43.5126 2.85351 43.2542 3.14281C42.9958 3.42931 42.8666 3.79866 42.8666 4.25086ZM47.8423 5.38419V0.0335329H48.7481V5.32942C48.7481 5.4502 48.7776 5.54289 48.8366 5.60749C48.8956 5.67209 48.9813 5.70439 49.0936 5.70439H49.2832V6.50488H48.9125C48.5726 6.50488 48.3086 6.40658 48.1204 6.20996C47.935 6.01335 47.8423 5.7381 47.8423 5.38419ZM50.3786 4.89126V1.99263H51.2844V4.72695C51.2844 5.04153 51.3799 5.29572 51.5709 5.48952C51.7619 5.68332 52.0021 5.78023 52.2914 5.78023C52.6088 5.78023 52.87 5.67349 53.075 5.46003C53.2829 5.24376 53.3868 4.97131 53.3868 4.64268V1.99263H54.2926V6.50488H53.4121V5.90241H53.3531C53.2548 6.10464 53.0891 6.27457 52.8559 6.41219C52.6256 6.54982 52.3518 6.61864 52.0344 6.61864C51.5316 6.61864 51.13 6.45573 50.8294 6.12992C50.5289 5.8041 50.3786 5.39122 50.3786 4.89126ZM55.2995 4.2635C55.2995 3.79444 55.3979 3.37875 55.5945 3.01642C55.7911 2.65128 56.0593 2.37041 56.3992 2.1738C56.7418 1.97718 57.1266 1.87888 57.5536 1.87888C57.8962 1.87888 58.208 1.93927 58.4889 2.06004C58.7698 2.18082 59.0015 2.34653 59.184 2.55719C59.3694 2.76785 59.5113 3.01361 59.6096 3.29449C59.7107 3.57536 59.7612 3.8773 59.7612 4.20031V4.53736H56.2054C56.2222 4.93339 56.3556 5.25218 56.6056 5.49373C56.8556 5.73529 57.1856 5.85606 57.5957 5.85606C57.8822 5.85606 58.1378 5.79146 58.3625 5.66226C58.59 5.53306 58.7487 5.35891 58.8386 5.13983H59.7191C59.6011 5.58361 59.3498 5.94173 58.965 6.21418C58.583 6.48382 58.1181 6.61864 57.5704 6.61864C56.8991 6.61864 56.3528 6.39815 55.9315 5.95718C55.5102 5.5134 55.2995 4.94884 55.2995 4.2635ZM56.2222 3.83798H58.8638C58.8358 3.46722 58.6995 3.17511 58.4552 2.96165C58.2108 2.74538 57.9103 2.63724 57.5536 2.63724C57.2053 2.63724 56.9047 2.74959 56.652 2.97429C56.3992 3.19899 56.2559 3.48689 56.2222 3.83798Z" fill="#2D2D2D"/>
            </svg>
            <div>
                <div style="height:14px;">
                    <svg width="190" height="11" viewBox="0 0 190 11" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect y="4.09082" width="190" height="2" rx="1" fill="#6A6DCD" fill-opacity="0.3"/>
                <rect x="0.000244141" y="4.09082" width="184.987" height="2.16782" rx="1.08391" fill="#2755CB"/>
                <ellipse cx="184.463" cy="4.7231" rx="4.57208" ry="4.2231" fill="#2755CB"/>
                </svg>
                </div>
                <div class="easychat-bot-slider-output-input-single" style="padding-top:0px;">
                    <div>${field.max_value}</div>
                </div>
            </div>
            <div style="display: flex; width:100%; align-items:center;">
                <div class="range-slider-value-div" style="width: 100%;">
                ${field.min_value}
                </div>
            </div>
            <div style="display: flex; width:100%; justify-content:center; padding: 0px 8px;">
                <svg width="59" height="7" viewBox="0 0 59 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M0.960938 4.72754H1.80078C1.80599 5.02441 1.92188 5.27051 2.14844 5.46582C2.375 5.66113 2.67708 5.75879 3.05469 5.75879C3.39062 5.75879 3.66016 5.68717 3.86328 5.54395C4.06641 5.39811 4.16797 5.2002 4.16797 4.9502C4.16797 4.78874 4.13281 4.65072 4.0625 4.53613C3.99479 4.42155 3.90234 4.33171 3.78516 4.2666C3.66797 4.19889 3.53385 4.1416 3.38281 4.09473C3.23177 4.04785 3.07161 4.00488 2.90234 3.96582C2.73568 3.92676 2.56771 3.88509 2.39844 3.84082C2.23177 3.79395 2.07292 3.73275 1.92188 3.65723C1.77083 3.5791 1.63672 3.48535 1.51953 3.37598C1.40234 3.264 1.30859 3.11686 1.23828 2.93457C1.17057 2.75228 1.13672 2.54134 1.13672 2.30176C1.13672 1.86165 1.30469 1.49186 1.64062 1.19238C1.97917 0.892904 2.4349 0.743164 3.00781 0.743164C3.2526 0.743164 3.48568 0.777018 3.70703 0.844727C3.93099 0.912435 4.13411 1.0127 4.31641 1.14551C4.5013 1.27572 4.64844 1.4515 4.75781 1.67285C4.86979 1.8916 4.92708 2.1416 4.92969 2.42285H4.05469C4.05469 2.14421 3.96224 1.92415 3.77734 1.7627C3.59505 1.59863 3.33594 1.5166 3 1.5166C2.67448 1.5166 2.42448 1.59082 2.25 1.73926C2.07812 1.8877 1.99219 2.06999 1.99219 2.28613C1.99219 2.42936 2.02734 2.55306 2.09766 2.65723C2.16797 2.75879 2.26172 2.83952 2.37891 2.89941C2.49609 2.95931 2.63151 3.01139 2.78516 3.05566C2.9388 3.09993 3.10026 3.1429 3.26953 3.18457C3.4388 3.22363 3.60807 3.2679 3.77734 3.31738C3.94661 3.36426 4.10807 3.42806 4.26172 3.50879C4.41536 3.58952 4.55078 3.68717 4.66797 3.80176C4.78516 3.91374 4.87891 4.06217 4.94922 4.24707C5.01953 4.43197 5.05469 4.64551 5.05469 4.8877C5.05469 5.37207 4.8724 5.77051 4.50781 6.08301C4.14583 6.39551 3.65104 6.55176 3.02344 6.55176C2.42188 6.55176 1.92708 6.38249 1.53906 6.04395C1.15365 5.7028 0.960938 5.264 0.960938 4.72754ZM5.76562 4.36816C5.76562 3.93327 5.85677 3.54785 6.03906 3.21191C6.22135 2.87337 6.47005 2.61296 6.78516 2.43066C7.10286 2.24837 7.45964 2.15723 7.85547 2.15723C8.17318 2.15723 8.46224 2.21322 8.72266 2.3252C8.98307 2.43717 9.19792 2.59082 9.36719 2.78613C9.53906 2.98145 9.67057 3.20931 9.76172 3.46973C9.85547 3.73014 9.90234 4.01009 9.90234 4.30957V4.62207H6.60547C6.62109 4.98926 6.74479 5.28483 6.97656 5.50879C7.20833 5.73275 7.51432 5.84473 7.89453 5.84473C8.16016 5.84473 8.39714 5.78483 8.60547 5.66504C8.81641 5.54525 8.96354 5.38379 9.04688 5.18066H9.86328C9.75391 5.59212 9.52083 5.92415 9.16406 6.17676C8.8099 6.42676 8.37891 6.55176 7.87109 6.55176C7.2487 6.55176 6.74219 6.34733 6.35156 5.93848C5.96094 5.52702 5.76562 5.00358 5.76562 4.36816ZM6.62109 3.97363H9.07031C9.04427 3.62988 8.91797 3.35905 8.69141 3.16113C8.46484 2.96061 8.1862 2.86035 7.85547 2.86035C7.53255 2.86035 7.25391 2.96452 7.01953 3.17285C6.78516 3.38118 6.65234 3.64811 6.62109 3.97363ZM10.7344 5.40723V0.446289H11.5742V5.35645C11.5742 5.46842 11.6016 5.55436 11.6562 5.61426C11.7109 5.67415 11.7904 5.7041 11.8945 5.7041H12.0703V6.44629H11.7266C11.4115 6.44629 11.1667 6.35514 10.9922 6.17285C10.8203 5.99056 10.7344 5.73535 10.7344 5.40723ZM12.7031 4.36816C12.7031 3.93327 12.7943 3.54785 12.9766 3.21191C13.1589 2.87337 13.4076 2.61296 13.7227 2.43066C14.0404 2.24837 14.3971 2.15723 14.793 2.15723C15.1107 2.15723 15.3997 2.21322 15.6602 2.3252C15.9206 2.43717 16.1354 2.59082 16.3047 2.78613C16.4766 2.98145 16.6081 3.20931 16.6992 3.46973C16.793 3.73014 16.8398 4.01009 16.8398 4.30957V4.62207H13.543C13.5586 4.98926 13.6823 5.28483 13.9141 5.50879C14.1458 5.73275 14.4518 5.84473 14.832 5.84473C15.0977 5.84473 15.3346 5.78483 15.543 5.66504C15.7539 5.54525 15.901 5.38379 15.9844 5.18066H16.8008C16.6914 5.59212 16.4583 5.92415 16.1016 6.17676C15.7474 6.42676 15.3164 6.55176 14.8086 6.55176C14.1862 6.55176 13.6797 6.34733 13.2891 5.93848C12.8984 5.52702 12.7031 5.00358 12.7031 4.36816ZM13.5586 3.97363H16.0078C15.9818 3.62988 15.8555 3.35905 15.6289 3.16113C15.4023 2.96061 15.1237 2.86035 14.793 2.86035C14.4701 2.86035 14.1914 2.96452 13.957 3.17285C13.7227 3.38118 13.5898 3.64811 13.5586 3.97363ZM17.5625 4.35645C17.5625 3.94759 17.6536 3.5765 17.8359 3.24316C18.0182 2.90723 18.2747 2.6429 18.6055 2.4502C18.9388 2.25488 19.3138 2.15723 19.7305 2.15723C20.2331 2.15723 20.6719 2.30046 21.0469 2.58691C21.4245 2.87337 21.6602 3.25358 21.7539 3.72754H20.8906C20.8177 3.48796 20.6758 3.29525 20.4648 3.14941C20.2565 3.00098 20.0143 2.92676 19.7383 2.92676C19.3477 2.92676 19.0312 3.06217 18.7891 3.33301C18.5469 3.60384 18.4258 3.94499 18.4258 4.35645C18.4258 4.77051 18.5495 5.11296 18.7969 5.38379C19.0443 5.65462 19.3633 5.79004 19.7539 5.79004C20.0221 5.79004 20.2617 5.71712 20.4727 5.57129C20.6836 5.42546 20.8255 5.23405 20.8984 4.99707H21.7539C21.6628 5.46842 21.4297 5.84603 21.0547 6.12988C20.6797 6.41113 20.2409 6.55176 19.7383 6.55176C19.4206 6.55176 19.125 6.49577 18.8516 6.38379C18.5807 6.26921 18.3516 6.11426 18.1641 5.91895C17.9766 5.72103 17.8294 5.48796 17.7227 5.21973C17.6159 4.94889 17.5625 4.66113 17.5625 4.35645ZM22.4375 2.9502V2.27051H22.9883C23.0612 2.27051 23.1211 2.24577 23.168 2.19629C23.2148 2.14681 23.2383 2.0804 23.2383 1.99707V1.0791H24.0273V2.2627H25.2461V2.9502H24.0273V5.09473C24.0273 5.52181 24.2305 5.73535 24.6367 5.73535H25.2031V6.44629H24.5078C24.0911 6.44629 23.7669 6.33301 23.5352 6.10645C23.3034 5.87728 23.1875 5.54785 23.1875 5.11816V2.9502H22.4375ZM25.9453 4.36816C25.9453 3.93327 26.0365 3.54785 26.2188 3.21191C26.401 2.87337 26.6497 2.61296 26.9648 2.43066C27.2826 2.24837 27.6393 2.15723 28.0352 2.15723C28.3529 2.15723 28.6419 2.21322 28.9023 2.3252C29.1628 2.43717 29.3776 2.59082 29.5469 2.78613C29.7188 2.98145 29.8503 3.20931 29.9414 3.46973C30.0352 3.73014 30.082 4.01009 30.082 4.30957V4.62207H26.7852C26.8008 4.98926 26.9245 5.28483 27.1562 5.50879C27.388 5.73275 27.694 5.84473 28.0742 5.84473C28.3398 5.84473 28.5768 5.78483 28.7852 5.66504C28.9961 5.54525 29.1432 5.38379 29.2266 5.18066H30.043C29.9336 5.59212 29.7005 5.92415 29.3438 6.17676C28.9896 6.42676 28.5586 6.55176 28.0508 6.55176C27.4284 6.55176 26.9219 6.34733 26.5312 5.93848C26.1406 5.52702 25.9453 5.00358 25.9453 4.36816ZM26.8008 3.97363H29.25C29.224 3.62988 29.0977 3.35905 28.8711 3.16113C28.6445 2.96061 28.3659 2.86035 28.0352 2.86035C27.7122 2.86035 27.4336 2.96452 27.1992 3.17285C26.9648 3.38118 26.832 3.64811 26.8008 3.97363ZM31.3672 5.94629C30.9922 5.54264 30.8047 5.0166 30.8047 4.36816C30.8047 3.71973 30.9909 3.18978 31.3633 2.77832C31.7357 2.36426 32.2135 2.15723 32.7969 2.15723C32.9844 2.15723 33.1602 2.18327 33.3242 2.23535C33.4883 2.28743 33.625 2.35514 33.7344 2.43848C33.8464 2.52181 33.9349 2.59863 34 2.66895C34.0651 2.73665 34.1198 2.80436 34.1641 2.87207H34.2227V0.446289H35.0625V6.44629H34.2383V5.85254H34.1875C33.8568 6.31868 33.4062 6.55176 32.8359 6.55176C32.2344 6.55176 31.7448 6.34993 31.3672 5.94629ZM31.6602 4.35645C31.6602 4.78874 31.7786 5.13639 32.0156 5.39941C32.2552 5.65983 32.569 5.79004 32.957 5.79004C33.3477 5.79004 33.6602 5.65332 33.8945 5.37988C34.1289 5.10645 34.2461 4.7653 34.2461 4.35645C34.2461 3.91634 34.1237 3.56868 33.8789 3.31348C33.6367 3.05566 33.3268 2.92676 32.9492 2.92676C32.569 2.92676 32.2591 3.06087 32.0195 3.3291C31.7799 3.59473 31.6602 3.93717 31.6602 4.35645ZM37.9961 2.2627H38.8867L40.0117 5.43066H40.0703L41.1875 2.2627H42.0938L40.5 6.44629H39.5898L37.9961 2.2627ZM43.0312 5.94629C42.6562 5.54264 42.4688 5.0166 42.4688 4.36816C42.4688 3.71973 42.6549 3.18978 43.0273 2.77832C43.3997 2.36426 43.8776 2.15723 44.4609 2.15723C44.6484 2.15723 44.8242 2.18327 44.9883 2.23535C45.1523 2.28743 45.2891 2.35514 45.3984 2.43848C45.5104 2.52181 45.599 2.59863 45.6641 2.66895C45.7292 2.73665 45.7839 2.80436 45.8281 2.87207H45.8867V2.2627H46.7266V6.44629H45.9023V5.85254H45.8516C45.5208 6.31868 45.0703 6.55176 44.5 6.55176C43.8984 6.55176 43.4089 6.34993 43.0312 5.94629ZM43.3242 4.35645C43.3242 4.78874 43.4427 5.13639 43.6797 5.39941C43.9193 5.65983 44.2331 5.79004 44.6211 5.79004C45.0117 5.79004 45.3242 5.65332 45.5586 5.37988C45.793 5.10645 45.9102 4.7653 45.9102 4.35645C45.9102 3.91634 45.7878 3.56868 45.543 3.31348C45.3008 3.05566 44.9909 2.92676 44.6133 2.92676C44.2331 2.92676 43.9232 3.06087 43.6836 3.3291C43.444 3.59473 43.3242 3.93717 43.3242 4.35645ZM47.9375 5.40723V0.446289H48.7773V5.35645C48.7773 5.46842 48.8047 5.55436 48.8594 5.61426C48.9141 5.67415 48.9935 5.7041 49.0977 5.7041H49.2734V6.44629H48.9297C48.6146 6.44629 48.3698 6.35514 48.1953 6.17285C48.0234 5.99056 47.9375 5.73535 47.9375 5.40723ZM50.2891 4.9502V2.2627H51.1289V4.79785C51.1289 5.08952 51.2174 5.3252 51.3945 5.50488C51.5716 5.68457 51.7943 5.77441 52.0625 5.77441C52.3568 5.77441 52.599 5.67546 52.7891 5.47754C52.9818 5.27702 53.0781 5.02441 53.0781 4.71973V2.2627H53.918V6.44629H53.1016V5.8877H53.0469C52.9557 6.0752 52.8021 6.23275 52.5859 6.36035C52.3724 6.48796 52.1185 6.55176 51.8242 6.55176C51.3581 6.55176 50.9857 6.40072 50.707 6.09863C50.4284 5.79655 50.2891 5.41374 50.2891 4.9502ZM54.8516 4.36816C54.8516 3.93327 54.9427 3.54785 55.125 3.21191C55.3073 2.87337 55.556 2.61296 55.8711 2.43066C56.1888 2.24837 56.5456 2.15723 56.9414 2.15723C57.2591 2.15723 57.5482 2.21322 57.8086 2.3252C58.069 2.43717 58.2839 2.59082 58.4531 2.78613C58.625 2.98145 58.7565 3.20931 58.8477 3.46973C58.9414 3.73014 58.9883 4.01009 58.9883 4.30957V4.62207H55.6914C55.707 4.98926 55.8307 5.28483 56.0625 5.50879C56.2943 5.73275 56.6003 5.84473 56.9805 5.84473C57.2461 5.84473 57.4831 5.78483 57.6914 5.66504C57.9023 5.54525 58.0495 5.38379 58.1328 5.18066H58.9492C58.8398 5.59212 58.6068 5.92415 58.25 6.17676C57.8958 6.42676 57.4648 6.55176 56.957 6.55176C56.3346 6.55176 55.8281 6.34733 55.4375 5.93848C55.0469 5.52702 54.8516 5.00358 54.8516 4.36816ZM55.707 3.97363H58.1562C58.1302 3.62988 58.0039 3.35905 57.7773 3.16113C57.5508 2.96061 57.2721 2.86035 56.9414 2.86035C56.6185 2.86035 56.3398 2.96452 56.1055 3.17285C55.8711 3.38118 55.7383 3.64811 55.707 3.97363Z" fill="#7B7A7B"/>
                    </svg>
            </div>
            </div>`

    } else {
        html += `<div class="form-preview-input-type-dual-range-content form-preview-range-slider">
                <svg width="60" height="7" viewBox="0 0 60 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0.0655651 4.65111H0.971386C0.977003 4.97131 1.10199 5.23673 1.34635 5.44739C1.59071 5.65805 1.91653 5.76337 2.3238 5.76337C2.68612 5.76337 2.97683 5.68613 3.19591 5.53165C3.41499 5.37436 3.52454 5.1609 3.52454 4.89126C3.52454 4.71712 3.48662 4.56825 3.41078 4.44467C3.33775 4.32108 3.23804 4.22418 3.11165 4.15396C2.98526 4.08094 2.84061 4.01914 2.6777 3.96859C2.51479 3.91803 2.34205 3.87168 2.15948 3.82955C1.97973 3.78742 1.79856 3.74248 1.61599 3.69473C1.43623 3.64418 1.2649 3.57817 1.10199 3.49672C0.939085 3.41245 0.794435 3.31134 0.668041 3.19337C0.541647 3.0726 0.440533 2.9139 0.364697 2.71729C0.291669 2.52068 0.255155 2.29317 0.255155 2.03476C0.255155 1.56009 0.43632 1.16124 0.798648 0.838238C1.16378 0.515233 1.65532 0.35373 2.27324 0.35373C2.53726 0.35373 2.78864 0.390244 3.02739 0.463271C3.26894 0.536298 3.48802 0.644435 3.68463 0.787681C3.88405 0.928118 4.04275 1.11771 4.16072 1.35645C4.28149 1.59239 4.34328 1.86203 4.34609 2.16537H3.40235C3.40235 1.86484 3.30264 1.6275 3.10322 1.45335C2.90661 1.2764 2.62714 1.18793 2.26481 1.18793C1.91372 1.18793 1.64408 1.26798 1.45589 1.42808C1.27052 1.58817 1.17783 1.78479 1.17783 2.01791C1.17783 2.17239 1.21575 2.30581 1.29158 2.41816C1.36742 2.5277 1.46853 2.61477 1.59493 2.67937C1.72132 2.74397 1.86738 2.80015 2.03309 2.8479C2.19881 2.89564 2.37295 2.94199 2.55552 2.98693C2.73809 3.02906 2.92066 3.07681 3.10322 3.13017C3.28579 3.18073 3.45993 3.24955 3.62565 3.33662C3.79137 3.42369 3.93742 3.52902 4.06381 3.6526C4.19021 3.77338 4.29132 3.93348 4.36716 4.1329C4.443 4.33232 4.48091 4.56264 4.48091 4.82385C4.48091 5.34628 4.2843 5.77601 3.89108 6.11306C3.50066 6.45011 2.967 6.61864 2.29009 6.61864C1.64127 6.61864 1.10761 6.43607 0.689107 6.07093C0.273412 5.70299 0.0655651 5.22971 0.0655651 4.65111ZM5.2477 4.2635C5.2477 3.79444 5.34601 3.37875 5.54262 3.01642C5.73923 2.65128 6.00747 2.37041 6.34732 2.1738C6.68999 1.97718 7.07479 1.87888 7.50172 1.87888C7.84439 1.87888 8.15616 1.93927 8.43703 2.06004C8.71791 2.18082 8.94963 2.34653 9.1322 2.55719C9.31757 2.76785 9.45942 3.01361 9.55772 3.29449C9.65884 3.57536 9.70939 3.8773 9.70939 4.20031V4.53736H6.15352C6.17037 4.93339 6.30379 5.25218 6.55377 5.49373C6.80375 5.73529 7.13377 5.85606 7.54385 5.85606C7.83034 5.85606 8.08594 5.79146 8.31064 5.66226C8.53815 5.53306 8.69684 5.35891 8.78672 5.13983H9.66726C9.54929 5.58361 9.29791 5.94173 8.91311 6.21418C8.53112 6.48382 8.06628 6.61864 7.51857 6.61864C6.84728 6.61864 6.30098 6.39815 5.87967 5.95718C5.45836 5.5134 5.2477 4.94884 5.2477 4.2635ZM6.17037 3.83798H8.812C8.78391 3.46722 8.64769 3.17511 8.40333 2.96165C8.15897 2.74538 7.85843 2.63724 7.50172 2.63724C7.15343 2.63724 6.8529 2.74959 6.60011 2.97429C6.34732 3.19899 6.20408 3.48689 6.17037 3.83798ZM10.6068 5.38419V0.0335329H11.5126V5.32942C11.5126 5.4502 11.5421 5.54289 11.6011 5.60749C11.6601 5.67209 11.7457 5.70439 11.8581 5.70439H12.0477V6.50488H11.6769C11.3371 6.50488 11.073 6.40658 10.8849 6.20996C10.6995 6.01335 10.6068 5.7381 10.6068 5.38419ZM12.7302 4.2635C12.7302 3.79444 12.8285 3.37875 13.0251 3.01642C13.2217 2.65128 13.49 2.37041 13.8298 2.1738C14.1725 1.97718 14.5573 1.87888 14.9842 1.87888C15.3269 1.87888 15.6387 1.93927 15.9195 2.06004C16.2004 2.18082 16.4321 2.34653 16.6147 2.55719C16.8001 2.76785 16.9419 3.01361 17.0402 3.29449C17.1413 3.57536 17.1919 3.8773 17.1919 4.20031V4.53736H13.636C13.6529 4.93339 13.7863 5.25218 14.0363 5.49373C14.2862 5.73529 14.6163 5.85606 15.0263 5.85606C15.3128 5.85606 15.5684 5.79146 15.7931 5.66226C16.0206 5.53306 16.1793 5.35891 16.2692 5.13983H17.1498C17.0318 5.58361 16.7804 5.94173 16.3956 6.21418C16.0136 6.48382 15.5488 6.61864 15.0011 6.61864C14.3298 6.61864 13.7835 6.39815 13.3622 5.95718C12.9409 5.5134 12.7302 4.94884 12.7302 4.2635ZM13.6529 3.83798H16.2945C16.2664 3.46722 16.1302 3.17511 15.8858 2.96165C15.6415 2.74538 15.3409 2.63724 14.9842 2.63724C14.6359 2.63724 14.3354 2.74959 14.0826 2.97429C13.8298 3.19899 13.6866 3.48689 13.6529 3.83798ZM17.9713 4.25086C17.9713 3.80989 18.0696 3.40965 18.2662 3.05013C18.4628 2.6878 18.7395 2.40271 19.0962 2.19486C19.4557 1.98421 19.8602 1.87888 20.3096 1.87888C20.8517 1.87888 21.325 2.03336 21.7294 2.34232C22.1367 2.65128 22.3909 3.06136 22.492 3.57255H21.5609C21.4823 3.31415 21.3292 3.1063 21.1017 2.94901C20.877 2.78891 20.6158 2.70886 20.318 2.70886C19.8967 2.70886 19.5555 2.85492 19.2942 3.14703C19.033 3.43914 18.9024 3.80708 18.9024 4.25086C18.9024 4.69745 19.0358 5.06681 19.3027 5.35891C19.5695 5.65102 19.9136 5.79708 20.3349 5.79708C20.6242 5.79708 20.8826 5.71843 21.1101 5.56114C21.3376 5.40385 21.4907 5.19741 21.5693 4.94182H22.492C22.3937 5.4502 22.1423 5.85747 21.7378 6.16362C21.3334 6.46696 20.8601 6.61864 20.318 6.61864C19.9754 6.61864 19.6566 6.55825 19.3616 6.43747C19.0695 6.31389 18.8224 6.14677 18.6201 5.93611C18.4179 5.72265 18.2592 5.47126 18.1441 5.18196C18.0289 4.88985 17.9713 4.57949 17.9713 4.25086ZM23.2293 2.73414V2.00106H23.8233C23.902 2.00106 23.9666 1.97438 24.0171 1.92101C24.0677 1.86764 24.093 1.79602 24.093 1.70614V0.716058H24.944V1.99263H26.2585V2.73414H24.944V5.04714C24.944 5.50778 25.1631 5.7381 25.6013 5.7381H26.2122V6.50488H25.4622C25.0128 6.50488 24.6632 6.3827 24.4132 6.13834C24.1632 5.89117 24.0382 5.53587 24.0382 5.07242V2.73414H23.2293ZM29.9703 5.9656C29.5658 5.53025 29.3636 4.96288 29.3636 4.2635C29.3636 3.56413 29.5644 2.99255 29.9661 2.54876C30.3677 2.10217 30.8831 1.87888 31.5123 1.87888C31.7145 1.87888 31.9041 1.90697 32.0811 1.96314C32.258 2.01932 32.4055 2.09234 32.5234 2.18222C32.6442 2.2721 32.7397 2.35496 32.8099 2.4308C32.8801 2.50382 32.9391 2.57685 32.9869 2.64988H33.0501V1.99263H33.9559V6.50488H33.0669V5.86449H33.0122C32.6554 6.36725 32.1695 6.61864 31.5544 6.61864C30.9056 6.61864 30.3775 6.40096 29.9703 5.9656ZM30.2863 4.25086C30.2863 4.71712 30.4141 5.09208 30.6697 5.37577C30.9281 5.65664 31.2665 5.79708 31.685 5.79708C32.1063 5.79708 32.4434 5.64962 32.6962 5.3547C32.949 5.05978 33.0753 4.69184 33.0753 4.25086C33.0753 3.77619 32.9433 3.40122 32.6793 3.12596C32.4181 2.8479 32.0839 2.70886 31.6766 2.70886C31.2665 2.70886 30.9323 2.85351 30.6739 3.14281C30.4155 3.42931 30.2863 3.79866 30.2863 4.25086ZM37.1199 1.99263H38.0805L39.2939 5.40947H39.3571L40.5621 1.99263H41.5395L39.8206 6.50488H38.8389L37.1199 1.99263ZM42.5507 5.9656C42.1462 5.53025 41.944 4.96288 41.944 4.2635C41.944 3.56413 42.1448 2.99255 42.5464 2.54876C42.9481 2.10217 43.4635 1.87888 44.0927 1.87888C44.2949 1.87888 44.4845 1.90697 44.6614 1.96314C44.8384 2.01932 44.9858 2.09234 45.1038 2.18222C45.2246 2.2721 45.3201 2.35496 45.3903 2.4308C45.4605 2.50382 45.5195 2.57685 45.5672 2.64988H45.6304V1.99263H46.5363V6.50488H45.6473V5.86449H45.5925C45.2358 6.36725 44.7499 6.61864 44.1348 6.61864C43.486 6.61864 42.9579 6.40096 42.5507 5.9656ZM42.8666 4.25086C42.8666 4.71712 42.9944 5.09208 43.25 5.37577C43.5084 5.65664 43.8469 5.79708 44.2654 5.79708C44.6867 5.79708 45.0238 5.64962 45.2765 5.3547C45.5293 5.05978 45.6557 4.69184 45.6557 4.25086C45.6557 3.77619 45.5237 3.40122 45.2597 3.12596C44.9985 2.8479 44.6642 2.70886 44.257 2.70886C43.8469 2.70886 43.5126 2.85351 43.2542 3.14281C42.9958 3.42931 42.8666 3.79866 42.8666 4.25086ZM47.8423 5.38419V0.0335329H48.7481V5.32942C48.7481 5.4502 48.7776 5.54289 48.8366 5.60749C48.8956 5.67209 48.9813 5.70439 49.0936 5.70439H49.2832V6.50488H48.9125C48.5726 6.50488 48.3086 6.40658 48.1204 6.20996C47.935 6.01335 47.8423 5.7381 47.8423 5.38419ZM50.3786 4.89126V1.99263H51.2844V4.72695C51.2844 5.04153 51.3799 5.29572 51.5709 5.48952C51.7619 5.68332 52.0021 5.78023 52.2914 5.78023C52.6088 5.78023 52.87 5.67349 53.075 5.46003C53.2829 5.24376 53.3868 4.97131 53.3868 4.64268V1.99263H54.2926V6.50488H53.4121V5.90241H53.3531C53.2548 6.10464 53.0891 6.27457 52.8559 6.41219C52.6256 6.54982 52.3518 6.61864 52.0344 6.61864C51.5316 6.61864 51.13 6.45573 50.8294 6.12992C50.5289 5.8041 50.3786 5.39122 50.3786 4.89126ZM55.2995 4.2635C55.2995 3.79444 55.3979 3.37875 55.5945 3.01642C55.7911 2.65128 56.0593 2.37041 56.3992 2.1738C56.7418 1.97718 57.1266 1.87888 57.5536 1.87888C57.8962 1.87888 58.208 1.93927 58.4889 2.06004C58.7698 2.18082 59.0015 2.34653 59.184 2.55719C59.3694 2.76785 59.5113 3.01361 59.6096 3.29449C59.7107 3.57536 59.7612 3.8773 59.7612 4.20031V4.53736H56.2054C56.2222 4.93339 56.3556 5.25218 56.6056 5.49373C56.8556 5.73529 57.1856 5.85606 57.5957 5.85606C57.8822 5.85606 58.1378 5.79146 58.3625 5.66226C58.59 5.53306 58.7487 5.35891 58.8386 5.13983H59.7191C59.6011 5.58361 59.3498 5.94173 58.965 6.21418C58.583 6.48382 58.1181 6.61864 57.5704 6.61864C56.8991 6.61864 56.3528 6.39815 55.9315 5.95718C55.5102 5.5134 55.2995 4.94884 55.2995 4.2635ZM56.2222 3.83798H58.8638C58.8358 3.46722 58.6995 3.17511 58.4552 2.96165C58.2108 2.74538 57.9103 2.63724 57.5536 2.63724C57.2053 2.63724 56.9047 2.74959 56.652 2.97429C56.3992 3.19899 56.2559 3.48689 56.2222 3.83798Z" fill="#2D2D2D"/>
                </svg>
                <div>
                    <div style="height:14px;">
                        <svg width="190" height="11" viewBox="0 0 190 11" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <rect x="4.46387" y="4.08984" width="183.541" height="1.9631" rx="0.981548" fill="#6A6DCD" fill-opacity="0.3"/>
                            <rect x="4.46411" y="4.08984" width="184.987" height="2.16782" rx="1.08391" fill="#2755CB"/>
                            <ellipse cx="184.593" cy="4.7106" rx="4.46466" ry="4.14517" fill="#2755CB"/>
                            <ellipse cx="4.46466" cy="4.7106" rx="4.46466" ry="4.14517" fill="#2755CB"/>
                            </svg>
                    </div>
                    <div class="easychat-bot-slider-output-input" style="width: 100%; font-weight: normal; font-size: 12px; color: #2D2D2D; display: flex; justify-content: space-between;">
                        <div>${field.min_value}</div>
                        <div>${field.max_value}</div>
                    </div>
                </div>
                <div style="display: flex; width:100%; justify-content:space-between; align-items:center;">
                    <div class="range-slider-value-div">
                    ${field.min_value}
                    </div>
                    <svg width="11" height="2" viewBox="0 0 11 2" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <line x1="0.046875" y1="0.953957" x2="10.1134" y2="0.953957" stroke="#CBCACA" stroke-width="0.719039"/>
                    </svg>
                    <div class="range-slider-value-div">
                    ${field.max_value}
                    </div>
                </div>
                <div style="display: flex; width:100%; justify-content:space-between; padding: 0px 8px;">
                    <svg width="54" height="7" viewBox="0 0 54 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M0.510083 6.35156V1.31689H1.4159L3.16435 5.37201H3.20648L4.80395 1.31689H5.70275V6.35156H4.95492V2.90734H4.91279L3.54704 6.35156H2.79921L1.30355 2.87223H1.25791V6.35156H0.510083ZM6.81923 1.52052C6.81923 1.38242 6.86604 1.2689 6.95967 1.17996C7.05329 1.09102 7.17149 1.04654 7.31427 1.04654C7.46173 1.04654 7.58227 1.09102 7.6759 1.17996C7.77186 1.2689 7.81984 1.38242 7.81984 1.52052C7.81984 1.6633 7.77186 1.77916 7.6759 1.8681C7.58227 1.95705 7.46173 2.00152 7.31427 2.00152C7.16915 2.00152 7.04978 1.95705 6.95615 1.8681C6.86487 1.77916 6.81923 1.6633 6.81923 1.52052ZM6.93509 6.35156V2.59135H7.68994V6.35156H6.93509ZM8.77482 6.35156V2.59135H9.5086V3.09342H9.55775C9.63968 2.92489 9.77777 2.78329 9.97204 2.6686C10.1663 2.5539 10.3957 2.49656 10.6602 2.49656C11.0792 2.49656 11.4139 2.63232 11.6643 2.90383C11.9148 3.17534 12.04 3.51941 12.04 3.93604V6.35156H11.2851V4.07999C11.2851 3.82018 11.2044 3.60952 11.0429 3.44802C10.8837 3.28418 10.6836 3.20226 10.4425 3.20226C10.1804 3.20226 9.96268 3.29354 9.78948 3.47611C9.61627 3.65634 9.52967 3.88338 9.52967 4.15723V6.35156H8.77482ZM13.0125 1.52052C13.0125 1.38242 13.0593 1.2689 13.1529 1.17996C13.2466 1.09102 13.3648 1.04654 13.5076 1.04654C13.655 1.04654 13.7756 1.09102 13.8692 1.17996C13.9651 1.2689 14.0131 1.38242 14.0131 1.52052C14.0131 1.6633 13.9651 1.77916 13.8692 1.8681C13.7756 1.95705 13.655 2.00152 13.5076 2.00152C13.3624 2.00152 13.2431 1.95705 13.1494 1.8681C13.0582 1.77916 13.0125 1.6633 13.0125 1.52052ZM13.1284 6.35156V2.59135H13.8832V6.35156H13.1284ZM14.9681 6.35156V2.59135H15.7019V3.0864H15.751C15.84 2.91319 15.9746 2.77158 16.1548 2.66157C16.335 2.55156 16.5527 2.49656 16.8078 2.49656C17.0723 2.49656 17.3029 2.55273 17.4995 2.66508C17.6961 2.77743 17.8494 2.93191 17.9594 3.12853H18.0086C18.2473 2.70722 18.6335 2.49656 19.1672 2.49656C19.5791 2.49656 19.9103 2.62646 20.1608 2.88627C20.4136 3.14374 20.5399 3.47728 20.5399 3.88689V6.35156H19.7851V4.14319C19.7851 3.84125 19.7161 3.60952 19.578 3.44802C19.4399 3.28418 19.2456 3.20226 18.9951 3.20226C18.7494 3.20226 18.5446 3.28886 18.3807 3.46207C18.2192 3.63293 18.1385 3.86465 18.1385 4.15723V6.35156H17.3836V4.05892C17.3836 3.79912 17.3087 3.59197 17.1589 3.43749C17.0091 3.28067 16.8137 3.20226 16.5726 3.20226C16.3315 3.20226 16.129 3.29003 15.9652 3.46558C15.8037 3.63878 15.723 3.86231 15.723 4.13616V6.35156H14.9681ZM21.5687 5.00688V2.59135H22.3235V4.86995C22.3235 5.1321 22.4031 5.34393 22.5622 5.50543C22.7214 5.66693 22.9215 5.74768 23.1626 5.74768C23.4271 5.74768 23.6448 5.65874 23.8156 5.48085C23.9889 5.30062 24.0755 5.07358 24.0755 4.79973V2.59135H24.8303V6.35156H24.0965V5.8495H24.0474C23.9654 6.01802 23.8274 6.15963 23.6331 6.27432C23.4411 6.38901 23.2129 6.44636 22.9484 6.44636C22.5295 6.44636 22.1948 6.3106 21.9443 6.03909C21.6939 5.76758 21.5687 5.42351 21.5687 5.00688ZM25.9363 6.35156V2.59135H26.67V3.0864H26.7192C26.8081 2.91319 26.9427 2.77158 27.1229 2.66157C27.3032 2.55156 27.5209 2.49656 27.776 2.49656C28.0405 2.49656 28.271 2.55273 28.4676 2.66508C28.6642 2.77743 28.8176 2.93191 28.9276 3.12853H28.9767C29.2155 2.70722 29.6017 2.49656 30.1353 2.49656C30.5473 2.49656 30.8785 2.62646 31.1289 2.88627C31.3817 3.14374 31.5081 3.47728 31.5081 3.88689V6.35156H30.7532V4.14319C30.7532 3.84125 30.6842 3.60952 30.5461 3.44802C30.408 3.28418 30.2137 3.20226 29.9633 3.20226C29.7175 3.20226 29.5127 3.28886 29.3489 3.46207C29.1874 3.63293 29.1066 3.86465 29.1066 4.15723V6.35156H28.3518V4.05892C28.3518 3.79912 28.2769 3.59197 28.1271 3.43749C27.9773 3.28067 27.7818 3.20226 27.5407 3.20226C27.2997 3.20226 27.0972 3.29003 26.9334 3.46558C26.7719 3.63878 26.6911 3.86231 26.6911 4.13616V6.35156H25.9363ZM34.1413 2.59135H34.9418L35.9529 5.43872H36.0056L37.0097 2.59135H37.8243L36.3918 6.35156H35.5738L34.1413 2.59135ZM38.6669 5.90216C38.3298 5.53937 38.1613 5.06656 38.1613 4.48375C38.1613 3.90093 38.3287 3.42462 38.6634 3.0548C38.9981 2.68264 39.4276 2.49656 39.9519 2.49656C40.1204 2.49656 40.2784 2.51997 40.4259 2.56678C40.5733 2.61359 40.6962 2.67445 40.7945 2.74935C40.8952 2.82425 40.9747 2.89329 41.0333 2.95649C41.0918 3.01735 41.1409 3.0782 41.1807 3.13906H41.2334V2.59135H41.9882V6.35156H41.2474V5.8179H41.2018C40.9045 6.23687 40.4996 6.44636 39.987 6.44636C39.4463 6.44636 39.0063 6.26496 38.6669 5.90216ZM38.9302 4.47321C38.9302 4.86176 39.0367 5.17423 39.2497 5.41063C39.465 5.64469 39.7471 5.76173 40.0958 5.76173C40.4469 5.76173 40.7278 5.63884 40.9385 5.39308C41.1491 5.14731 41.2544 4.84069 41.2544 4.47321C41.2544 4.07765 41.1444 3.76518 40.9244 3.5358C40.7067 3.30407 40.4282 3.18821 40.0888 3.18821C39.7471 3.18821 39.4686 3.30875 39.2532 3.54984C39.0379 3.78858 38.9302 4.09637 38.9302 4.47321ZM43.0766 5.41765V0.958771H43.8315V5.37201C43.8315 5.47266 43.856 5.5499 43.9052 5.60373C43.9544 5.65757 44.0257 5.68449 44.1194 5.68449H44.2774V6.35156H43.9684C43.6852 6.35156 43.4652 6.26964 43.3083 6.1058C43.1539 5.94195 43.0766 5.71257 43.0766 5.41765ZM45.1902 5.00688V2.59135H45.9451V4.86995C45.9451 5.1321 46.0246 5.34393 46.1838 5.50543C46.343 5.66693 46.5431 5.74768 46.7842 5.74768C47.0487 5.74768 47.2663 5.65874 47.4372 5.48085C47.6104 5.30062 47.697 5.07358 47.697 4.79973V2.59135H48.4519V6.35156H47.7181V5.8495H47.6689C47.587 6.01802 47.4489 6.15963 47.2546 6.27432C47.0627 6.38901 46.8345 6.44636 46.57 6.44636C46.151 6.44636 45.8163 6.3106 45.5659 6.03909C45.3154 5.76758 45.1902 5.42351 45.1902 5.00688ZM49.291 4.48375C49.291 4.09286 49.3729 3.74645 49.5367 3.44451C49.7006 3.14023 49.9241 2.90617 50.2073 2.74232C50.4929 2.57848 50.8135 2.49656 51.1693 2.49656C51.4549 2.49656 51.7147 2.54688 51.9487 2.64753C52.1828 2.74818 52.3759 2.88627 52.528 3.06182C52.6825 3.23737 52.8007 3.44217 52.8827 3.67623C52.9669 3.91029 53.009 4.16191 53.009 4.43108V4.71196H50.0458C50.0599 5.04198 50.171 5.30765 50.3794 5.50894C50.5877 5.71023 50.8627 5.81088 51.2044 5.81088C51.4432 5.81088 51.6562 5.75704 51.8434 5.64938C52.033 5.54171 52.1653 5.39659 52.2402 5.21402H52.9739C52.8756 5.58384 52.6661 5.88227 52.3455 6.10931C52.0272 6.33401 51.6398 6.44636 51.1834 6.44636C50.624 6.44636 50.1687 6.26262 49.8176 5.89514C49.4665 5.52532 49.291 5.05486 49.291 4.48375ZM50.0599 4.12914H52.2612C52.2378 3.82018 52.1243 3.57676 51.9207 3.39887C51.717 3.21864 51.4666 3.12853 51.1693 3.12853C50.8791 3.12853 50.6286 3.22215 50.418 3.4094C50.2073 3.59665 50.088 3.83657 50.0599 4.12914Z" fill="#7B7A7B"/>
                    </svg>
                    <svg width="56" height="7" viewBox="0 0 56 7" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0.928052 6.35156V1.31689H1.83387L3.58232 5.37201H3.62445L5.22192 1.31689H6.12072V6.35156H5.37289V2.90734H5.33076L3.96501 6.35156H3.21718L1.72152 2.87223H1.67588V6.35156H0.928052ZM7.5918 5.90216C7.25475 5.53937 7.08623 5.06656 7.08623 4.48375C7.08623 3.90093 7.25358 3.42462 7.58829 3.0548C7.923 2.68264 8.3525 2.49656 8.8768 2.49656C9.04533 2.49656 9.20332 2.51997 9.35078 2.56678C9.49824 2.61359 9.62112 2.67445 9.71943 2.74935C9.82007 2.82425 9.89965 2.89329 9.95817 2.95649C10.0167 3.01735 10.0658 3.0782 10.1056 3.13906H10.1583V2.59135H10.9131V6.35156H10.1723V5.8179H10.1267C9.82943 6.23687 9.42451 6.44636 8.91191 6.44636C8.37123 6.44636 7.93119 6.26496 7.5918 5.90216ZM7.85512 4.47321C7.85512 4.86176 7.96162 5.17423 8.17462 5.41063C8.38995 5.64469 8.672 5.76173 9.02075 5.76173C9.37184 5.76173 9.65272 5.63884 9.86337 5.39308C10.074 5.14731 10.1794 4.84069 10.1794 4.47321C10.1794 4.07765 10.0693 3.76518 9.84933 3.5358C9.63165 3.30407 9.35312 3.18821 9.01373 3.18821C8.672 3.18821 8.39346 3.30875 8.17813 3.54984C7.96279 3.78858 7.85512 4.09637 7.85512 4.47321ZM11.5627 6.35156L12.8933 4.39597L11.6645 2.59135H12.5176L13.3603 3.89391H13.4024L14.238 2.59135H15.0947L13.8623 4.41704L15.193 6.35156H14.3398L13.4024 4.95772H13.3392L12.4193 6.35156H11.5627ZM15.8179 1.52052C15.8179 1.38242 15.8647 1.2689 15.9584 1.17996C16.052 1.09102 16.1702 1.04654 16.313 1.04654C16.4604 1.04654 16.581 1.09102 16.6746 1.17996C16.7705 1.2689 16.8185 1.38242 16.8185 1.52052C16.8185 1.6633 16.7705 1.77916 16.6746 1.8681C16.581 1.95705 16.4604 2.00152 16.313 2.00152C16.1678 2.00152 16.0485 1.95705 15.9548 1.8681C15.8636 1.77916 15.8179 1.6633 15.8179 1.52052ZM15.9338 6.35156V2.59135H16.6886V6.35156H15.9338ZM17.7735 6.35156V2.59135H18.5073V3.0864H18.5564C18.6454 2.91319 18.78 2.77158 18.9602 2.66157C19.1404 2.55156 19.3581 2.49656 19.6132 2.49656C19.8777 2.49656 20.1083 2.55273 20.3049 2.66508C20.5015 2.77743 20.6548 2.93191 20.7648 3.12853H20.814C21.0527 2.70722 21.4389 2.49656 21.9726 2.49656C22.3845 2.49656 22.7157 2.62646 22.9662 2.88627C23.219 3.14374 23.3454 3.47728 23.3454 3.88689V6.35156H22.5905V4.14319C22.5905 3.84125 22.5215 3.60952 22.3834 3.44802C22.2453 3.28418 22.051 3.20226 21.8005 3.20226C21.5548 3.20226 21.35 3.28886 21.1861 3.46207C21.0246 3.63293 20.9439 3.86465 20.9439 4.15723V6.35156H20.189V4.05892C20.189 3.79912 20.1141 3.59197 19.9643 3.43749C19.8145 3.28067 19.6191 3.20226 19.378 3.20226C19.1369 3.20226 18.9345 3.29003 18.7706 3.46558C18.6091 3.63878 18.5284 3.86231 18.5284 4.13616V6.35156H17.7735ZM24.3741 5.00688V2.59135H25.1289V4.86995C25.1289 5.1321 25.2085 5.34393 25.3676 5.50543C25.5268 5.66693 25.7269 5.74768 25.968 5.74768C26.2325 5.74768 26.4502 5.65874 26.6211 5.48085C26.7943 5.30062 26.8809 5.07358 26.8809 4.79973V2.59135H27.6357V6.35156H26.9019V5.8495H26.8528C26.7709 6.01802 26.6328 6.15963 26.4385 6.27432C26.2466 6.38901 26.0183 6.44636 25.7539 6.44636C25.3349 6.44636 25.0002 6.3106 24.7497 6.03909C24.4993 5.76758 24.3741 5.42351 24.3741 5.00688ZM28.7417 6.35156V2.59135H29.4754V3.0864H29.5246C29.6135 2.91319 29.7481 2.77158 29.9283 2.66157C30.1086 2.55156 30.3263 2.49656 30.5814 2.49656C30.8459 2.49656 31.0764 2.55273 31.273 2.66508C31.4696 2.77743 31.623 2.93191 31.733 3.12853H31.7821C32.0209 2.70722 32.4071 2.49656 32.9407 2.49656C33.3527 2.49656 33.6839 2.62646 33.9343 2.88627C34.1871 3.14374 34.3135 3.47728 34.3135 3.88689V6.35156H33.5587V4.14319C33.5587 3.84125 33.4896 3.60952 33.3515 3.44802C33.2134 3.28418 33.0191 3.20226 32.7687 3.20226C32.5229 3.20226 32.3181 3.28886 32.1543 3.46207C31.9928 3.63293 31.912 3.86465 31.912 4.15723V6.35156H31.1572V4.05892C31.1572 3.79912 31.0823 3.59197 30.9325 3.43749C30.7827 3.28067 30.5872 3.20226 30.3461 3.20226C30.1051 3.20226 29.9026 3.29003 29.7388 3.46558C29.5773 3.63878 29.4965 3.86231 29.4965 4.13616V6.35156H28.7417ZM36.9467 2.59135H37.7472L38.7583 5.43872H38.811L39.8151 2.59135H40.6297L39.1972 6.35156H38.3792L36.9467 2.59135ZM41.4723 5.90216C41.1352 5.53937 40.9667 5.06656 40.9667 4.48375C40.9667 3.90093 41.1341 3.42462 41.4688 3.0548C41.8035 2.68264 42.233 2.49656 42.7573 2.49656C42.9258 2.49656 43.0838 2.51997 43.2313 2.56678C43.3787 2.61359 43.5016 2.67445 43.5999 2.74935C43.7006 2.82425 43.7801 2.89329 43.8387 2.95649C43.8972 3.01735 43.9463 3.0782 43.9861 3.13906H44.0388V2.59135H44.7936V6.35156H44.0528V5.8179H44.0072C43.7099 6.23687 43.305 6.44636 42.7924 6.44636C42.2517 6.44636 41.8117 6.26496 41.4723 5.90216ZM41.7356 4.47321C41.7356 4.86176 41.8421 5.17423 42.0551 5.41063C42.2704 5.64469 42.5525 5.76173 42.9012 5.76173C43.2523 5.76173 43.5332 5.63884 43.7439 5.39308C43.9545 5.14731 44.0598 4.84069 44.0598 4.47321C44.0598 4.07765 43.9498 3.76518 43.7298 3.5358C43.5121 3.30407 43.2336 3.18821 42.8942 3.18821C42.5525 3.18821 42.274 3.30875 42.0586 3.54984C41.8433 3.78858 41.7356 4.09637 41.7356 4.47321ZM45.882 5.41765V0.958771H46.6369V5.37201C46.6369 5.47266 46.6615 5.5499 46.7106 5.60373C46.7598 5.65757 46.8311 5.68449 46.9248 5.68449H47.0828V6.35156H46.7738C46.4906 6.35156 46.2706 6.26964 46.1137 6.1058C45.9593 5.94195 45.882 5.71257 45.882 5.41765ZM47.9956 5.00688V2.59135H48.7505V4.86995C48.7505 5.1321 48.83 5.34393 48.9892 5.50543C49.1484 5.66693 49.3485 5.74768 49.5896 5.74768C49.8541 5.74768 50.0717 5.65874 50.2426 5.48085C50.4158 5.30062 50.5024 5.07358 50.5024 4.79973V2.59135H51.2573V6.35156H50.5235V5.8495H50.4743C50.3924 6.01802 50.2543 6.15963 50.06 6.27432C49.8681 6.38901 49.6399 6.44636 49.3754 6.44636C48.9564 6.44636 48.6217 6.3106 48.3713 6.03909C48.1208 5.76758 47.9956 5.42351 47.9956 5.00688ZM52.0964 4.48375C52.0964 4.09286 52.1783 3.74645 52.3421 3.44451C52.506 3.14023 52.7295 2.90617 53.0127 2.74232C53.2983 2.57848 53.6189 2.49656 53.9747 2.49656C54.2603 2.49656 54.5201 2.54688 54.7541 2.64753C54.9882 2.74818 55.1813 2.88627 55.3334 3.06182C55.4879 3.23737 55.6061 3.44217 55.6881 3.67623C55.7723 3.91029 55.8144 4.16191 55.8144 4.43108V4.71196H52.8512C52.8653 5.04198 52.9764 5.30765 53.1848 5.50894C53.3931 5.71023 53.6681 5.81088 54.0098 5.81088C54.2486 5.81088 54.4616 5.75704 54.6488 5.64938C54.8384 5.54171 54.9707 5.39659 55.0456 5.21402H55.7793C55.681 5.58384 55.4715 5.88227 55.1509 6.10931C54.8326 6.33401 54.4452 6.44636 53.9888 6.44636C53.4294 6.44636 52.9741 6.26262 52.623 5.89514C52.2719 5.52532 52.0964 5.05486 52.0964 4.48375ZM52.8653 4.12914H55.0666C55.0432 3.82018 54.9297 3.57676 54.7261 3.39887C54.5224 3.21864 54.272 3.12853 53.9747 3.12853C53.6845 3.12853 53.434 3.22215 53.2234 3.4094C53.0127 3.59665 52.8934 3.83657 52.8653 4.12914Z" fill="#7B7A7B"/>
                        </svg>
                </div>
            </div>`
    }

    html += `</div>`;

    return html;
}

function get_dropdown_html(field, id) {
    let optional = ""
    if (!field.optional) {
        optional  += `
        <span style="color: red;">*</span>
        `
    }

    let html = `
    <div class="preview-user-message-wrapper">
        <div class="dropdown-widget-response-bot-preview-wrapper">
        <div class="form-preview-input-type-wrapper">
                <label>${field.label_name}
                ${optional}
            <svg width="190" height="35" viewBox="0 0 215 35" fill="none"
                xmlns="http://www.w3.org/2000/svg">
                <rect x="0.596591" y="0.596591" width="213.807" height="33.0795" rx="3.63068"
                    fill="white" />
                <path
                    d="M20.6767 21.2927C19.8287 21.2927 19.1167 21.0447 18.5407 20.5487C17.9647 20.0447 17.6767 19.4087 17.6767 18.6407H18.6487C18.6487 19.1367 18.8367 19.5527 19.2127 19.8887C19.5887 20.2247 20.0887 20.3927 20.7127 20.3927C21.2727 20.3927 21.7287 20.2647 22.0807 20.0087C22.4327 19.7527 22.6087 19.4087 22.6087 18.9767C22.6087 18.4967 22.4487 18.1287 22.1287 17.8727C21.8087 17.6167 21.4207 17.4367 20.9647 17.3327C20.5087 17.2287 20.0527 17.1167 19.5967 16.9967C19.1487 16.8687 18.7647 16.6287 18.4447 16.2767C18.1247 15.9247 17.9647 15.4407 17.9647 14.8247C17.9647 14.2007 18.2087 13.6727 18.6967 13.2407C19.1847 12.8007 19.8367 12.5807 20.6527 12.5807C21.3807 12.5807 22.0207 12.7887 22.5727 13.2047C23.1327 13.6127 23.4127 14.2167 23.4127 15.0167H22.4167C22.4167 14.5287 22.2607 14.1487 21.9487 13.8767C21.6447 13.6047 21.2087 13.4687 20.6407 13.4687C20.0807 13.4687 19.6567 13.6007 19.3687 13.8647C19.0807 14.1287 18.9367 14.4487 18.9367 14.8247C18.9367 15.1287 19.0207 15.3847 19.1887 15.5927C19.3647 15.7927 19.5887 15.9447 19.8607 16.0487C20.1327 16.1527 20.4327 16.2447 20.7607 16.3247C21.0967 16.4047 21.4287 16.5007 21.7567 16.6127C22.0927 16.7167 22.3967 16.8527 22.6687 17.0207C22.9407 17.1807 23.1607 17.4247 23.3287 17.7527C23.5047 18.0727 23.5927 18.4607 23.5927 18.9167C23.5927 19.5967 23.3287 20.1647 22.8007 20.6207C22.2807 21.0687 21.5727 21.2927 20.6767 21.2927ZM27.9114 21.2927C26.9754 21.2927 26.2194 20.9847 25.6434 20.3687C25.0754 19.7527 24.7914 18.9687 24.7914 18.0167C24.7914 17.0407 25.0834 16.2527 25.6674 15.6527C26.2514 15.0447 26.9794 14.7407 27.8514 14.7407C28.7794 14.7407 29.5154 15.0407 30.0594 15.6407C30.6034 16.2407 30.8754 17.0047 30.8754 17.9327V18.3527H25.7874C25.8114 18.9847 26.0114 19.4887 26.3874 19.8647C26.7714 20.2407 27.2834 20.4287 27.9234 20.4287C28.3554 20.4287 28.7474 20.3287 29.0994 20.1287C29.4514 19.9287 29.6954 19.6527 29.8314 19.3007H30.8154C30.6394 19.8927 30.2914 20.3727 29.7714 20.7407C29.2514 21.1087 28.6314 21.2927 27.9114 21.2927ZM25.8114 17.5127H29.8674C29.8274 16.9127 29.6194 16.4447 29.2434 16.1087C28.8674 15.7727 28.4034 15.6047 27.8514 15.6047C27.3154 15.6047 26.8514 15.7807 26.4594 16.1327C26.0754 16.4847 25.8594 16.9447 25.8114 17.5127ZM33.4332 21.1367C33.0412 21.1367 32.7372 21.0207 32.5212 20.7887C32.3052 20.5567 32.1972 20.2287 32.1972 19.8047V12.1367H33.1452V19.8047C33.1452 20.1327 33.2972 20.2967 33.6012 20.2967H33.8892V21.1367H33.4332ZM38.095 21.2927C37.159 21.2927 36.403 20.9847 35.827 20.3687C35.259 19.7527 34.975 18.9687 34.975 18.0167C34.975 17.0407 35.267 16.2527 35.851 15.6527C36.435 15.0447 37.163 14.7407 38.035 14.7407C38.963 14.7407 39.699 15.0407 40.243 15.6407C40.787 16.2407 41.059 17.0047 41.059 17.9327V18.3527H35.971C35.995 18.9847 36.195 19.4887 36.571 19.8647C36.955 20.2407 37.467 20.4287 38.107 20.4287C38.539 20.4287 38.931 20.3287 39.283 20.1287C39.635 19.9287 39.879 19.6527 40.015 19.3007H40.999C40.823 19.8927 40.475 20.3727 39.955 20.7407C39.435 21.1087 38.815 21.2927 38.095 21.2927ZM35.995 17.5127H40.051C40.011 16.9127 39.803 16.4447 39.427 16.1087C39.051 15.7727 38.587 15.6047 38.035 15.6047C37.499 15.6047 37.035 15.7807 36.643 16.1327C36.259 16.4847 36.043 16.9447 35.995 17.5127ZM45.4681 21.2927C44.5321 21.2927 43.7641 20.9807 43.1641 20.3567C42.5641 19.7327 42.2641 18.9527 42.2641 18.0167C42.2641 17.0887 42.5681 16.3127 43.1761 15.6887C43.7841 15.0567 44.5441 14.7407 45.4561 14.7407C46.1521 14.7407 46.7761 14.9407 47.3281 15.3407C47.8881 15.7327 48.2481 16.2687 48.4081 16.9487H47.4241C47.2961 16.5407 47.0521 16.2167 46.6921 15.9767C46.3401 15.7287 45.9361 15.6047 45.4801 15.6047C44.8241 15.6047 44.2881 15.8367 43.8721 16.3007C43.4561 16.7567 43.2481 17.3287 43.2481 18.0167C43.2481 18.7207 43.4601 19.3007 43.8841 19.7567C44.3081 20.2047 44.8481 20.4287 45.5041 20.4287C45.9601 20.4287 46.3681 20.3047 46.7281 20.0567C47.0881 19.8087 47.3281 19.4847 47.4481 19.0847H48.4201C48.2601 19.7647 47.9041 20.3047 47.3521 20.7047C46.8001 21.0967 46.1721 21.2927 45.4681 21.2927ZM52.5394 21.1367C51.9554 21.1367 51.4994 20.9767 51.1714 20.6567C50.8434 20.3367 50.6794 19.8687 50.6794 19.2527V15.7007H49.5034V14.8967H50.4394C50.6394 14.8967 50.7394 14.7927 50.7394 14.5847V13.0847H51.6274V14.8967H53.5474V15.7007H51.6274V19.2407C51.6274 19.9527 51.9514 20.3087 52.5994 20.3087H53.4634V21.1367H52.5394ZM63.6878 20.3567C63.0718 20.9807 62.2958 21.2927 61.3598 21.2927C60.4238 21.2927 59.6478 20.9847 59.0318 20.3687C58.4158 19.7447 58.1078 18.9607 58.1078 18.0167C58.1078 17.0727 58.4198 16.2927 59.0438 15.6767C59.6678 15.0527 60.4438 14.7407 61.3718 14.7407C62.3078 14.7407 63.0838 15.0527 63.6998 15.6767C64.3158 16.3007 64.6238 17.0807 64.6238 18.0167C64.6238 18.9527 64.3118 19.7327 63.6878 20.3567ZM61.3598 20.4287C62.0318 20.4287 62.5798 20.2007 63.0038 19.7447C63.4358 19.2887 63.6518 18.7127 63.6518 18.0167C63.6518 17.3207 63.4358 16.7447 63.0038 16.2887C62.5798 15.8327 62.0318 15.6047 61.3598 15.6047C60.6958 15.6047 60.1478 15.8367 59.7158 16.3007C59.2918 16.7567 59.0798 17.3287 59.0798 18.0167C59.0798 18.7207 59.2918 19.3007 59.7158 19.7567C60.1478 20.2047 60.6958 20.4287 61.3598 20.4287ZM66.2988 21.1367V14.8967H67.2468V15.8087H67.3188C67.4628 15.5047 67.6988 15.2527 68.0268 15.0527C68.3628 14.8447 68.7628 14.7407 69.2268 14.7407C69.9388 14.7407 70.5028 14.9767 70.9188 15.4487C71.3428 15.9127 71.5547 16.5007 71.5547 17.2127V21.1367H70.6068V17.2727C70.6068 16.7847 70.4508 16.3887 70.1388 16.0847C69.8268 15.7807 69.4468 15.6287 68.9988 15.6287C68.5028 15.6287 68.0868 15.8007 67.7508 16.1447C67.4148 16.4807 67.2468 16.9047 67.2468 17.4167V21.1367H66.2988ZM76.2395 21.2927C75.3035 21.2927 74.5475 20.9847 73.9715 20.3687C73.4035 19.7527 73.1195 18.9687 73.1195 18.0167C73.1195 17.0407 73.4115 16.2527 73.9955 15.6527C74.5795 15.0447 75.3075 14.7407 76.1795 14.7407C77.1075 14.7407 77.8435 15.0407 78.3875 15.6407C78.9315 16.2407 79.2035 17.0047 79.2035 17.9327V18.3527H74.1155C74.1395 18.9847 74.3395 19.4887 74.7155 19.8647C75.0995 20.2407 75.6115 20.4287 76.2515 20.4287C76.6835 20.4287 77.0755 20.3287 77.4275 20.1287C77.7795 19.9287 78.0235 19.6527 78.1595 19.3007H79.1435C78.9675 19.8927 78.6195 20.3727 78.0995 20.7407C77.5795 21.1087 76.9595 21.2927 76.2395 21.2927ZM74.1395 17.5127H78.1955C78.1555 16.9127 77.9475 16.4447 77.5715 16.1087C77.1955 15.7727 76.7315 15.6047 76.1795 15.6047C75.6435 15.6047 75.1795 15.7807 74.7875 16.1327C74.4035 16.4847 74.1875 16.9447 74.1395 17.5127ZM89.3519 20.3567C88.7359 20.9807 87.9599 21.2927 87.0239 21.2927C86.0879 21.2927 85.3119 20.9847 84.6959 20.3687C84.0799 19.7447 83.7719 18.9607 83.7719 18.0167C83.7719 17.0727 84.0839 16.2927 84.7079 15.6767C85.3319 15.0527 86.1079 14.7407 87.0359 14.7407C87.9719 14.7407 88.7479 15.0527 89.3639 15.6767C89.9799 16.3007 90.2879 17.0807 90.2879 18.0167C90.2879 18.9527 89.9759 19.7327 89.3519 20.3567ZM87.0239 20.4287C87.6959 20.4287 88.2439 20.2007 88.6679 19.7447C89.0999 19.2887 89.3159 18.7127 89.3159 18.0167C89.3159 17.3207 89.0999 16.7447 88.6679 16.2887C88.2439 15.8327 87.6959 15.6047 87.0239 15.6047C86.3599 15.6047 85.8119 15.8367 85.3799 16.3007C84.9559 16.7567 84.7439 17.3287 84.7439 18.0167C84.7439 18.7207 84.9559 19.3007 85.3799 19.7567C85.8119 20.2047 86.3599 20.4287 87.0239 20.4287ZM92.4188 21.1367V15.7007H91.2428V14.8967H92.4188V14.1527C92.4188 13.5287 92.6148 13.0367 93.0068 12.6767C93.3988 12.3167 93.9148 12.1367 94.5548 12.1367H95.1428V12.9647H94.5428C94.1428 12.9647 93.8468 13.0767 93.6548 13.3007C93.4628 13.5167 93.3668 13.8047 93.3668 14.1647V14.8967H95.1908V15.7007H93.3668V21.1367H92.4188ZM102.614 21.1367C102.03 21.1367 101.574 20.9767 101.246 20.6567C100.918 20.3367 100.754 19.8687 100.754 19.2527V15.7007H99.5777V14.8967H100.514C100.714 14.8967 100.814 14.7927 100.814 14.5847V13.0847H101.702V14.8967H103.622V15.7007H101.702V19.2407C101.702 19.9527 102.026 20.3087 102.674 20.3087H103.538V21.1367H102.614ZM105.299 21.1367V12.1367H106.247V15.8087H106.319C106.463 15.5047 106.703 15.2527 107.039 15.0527C107.383 14.8447 107.787 14.7407 108.251 14.7407C108.963 14.7407 109.531 14.9767 109.955 15.4487C110.387 15.9207 110.603 16.5087 110.603 17.2127V21.1367H109.655V17.2727C109.655 16.7847 109.495 16.3887 109.175 16.0847C108.855 15.7807 108.471 15.6287 108.023 15.6287C107.535 15.6287 107.115 15.7927 106.763 16.1207C106.419 16.4407 106.247 16.8487 106.247 17.3447V21.1367H105.299ZM115.286 21.2927C114.35 21.2927 113.594 20.9847 113.018 20.3687C112.45 19.7527 112.166 18.9687 112.166 18.0167C112.166 17.0407 112.458 16.2527 113.042 15.6527C113.626 15.0447 114.354 14.7407 115.226 14.7407C116.154 14.7407 116.89 15.0407 117.434 15.6407C117.978 16.2407 118.25 17.0047 118.25 17.9327V18.3527H113.162C113.186 18.9847 113.386 19.4887 113.762 19.8647C114.146 20.2407 114.658 20.4287 115.298 20.4287C115.73 20.4287 116.122 20.3287 116.474 20.1287C116.826 19.9287 117.07 19.6527 117.206 19.3007H118.19C118.014 19.8927 117.666 20.3727 117.146 20.7407C116.626 21.1087 116.006 21.2927 115.286 21.2927ZM113.186 17.5127H117.242C117.202 16.9127 116.994 16.4447 116.618 16.1087C116.242 15.7727 115.778 15.6047 115.226 15.6047C114.69 15.6047 114.226 15.7807 113.834 16.1327C113.45 16.4847 113.234 16.9447 113.186 17.5127ZM123.755 21.1367V15.7007H122.579V14.8967H123.755V14.1527C123.755 13.5287 123.951 13.0367 124.343 12.6767C124.735 12.3167 125.251 12.1367 125.891 12.1367H126.479V12.9647H125.879C125.479 12.9647 125.183 13.0767 124.991 13.3007C124.799 13.5167 124.703 13.8047 124.703 14.1647V14.8967H126.527V15.7007H124.703V21.1367H123.755ZM132.887 20.3567C132.271 20.9807 131.495 21.2927 130.559 21.2927C129.623 21.2927 128.847 20.9847 128.231 20.3687C127.615 19.7447 127.307 18.9607 127.307 18.0167C127.307 17.0727 127.619 16.2927 128.243 15.6767C128.867 15.0527 129.643 14.7407 130.571 14.7407C131.507 14.7407 132.283 15.0527 132.899 15.6767C133.515 16.3007 133.823 17.0807 133.823 18.0167C133.823 18.9527 133.511 19.7327 132.887 20.3567ZM130.559 20.4287C131.231 20.4287 131.779 20.2007 132.203 19.7447C132.635 19.2887 132.851 18.7127 132.851 18.0167C132.851 17.3207 132.635 16.7447 132.203 16.2887C131.779 15.8327 131.231 15.6047 130.559 15.6047C129.895 15.6047 129.347 15.8367 128.915 16.3007C128.491 16.7567 128.279 17.3287 128.279 18.0167C128.279 18.7207 128.491 19.3007 128.915 19.7567C129.347 20.2047 129.895 20.4287 130.559 20.4287ZM136.371 21.1367C135.979 21.1367 135.675 21.0207 135.459 20.7887C135.243 20.5567 135.135 20.2287 135.135 19.8047V12.1367H136.083V19.8047C136.083 20.1327 136.235 20.2967 136.539 20.2967H136.827V21.1367H136.371ZM139.687 21.1367C139.295 21.1367 138.991 21.0207 138.775 20.7887C138.559 20.5567 138.451 20.2287 138.451 19.8047V12.1367H139.399V19.8047C139.399 20.1327 139.551 20.2967 139.855 20.2967H140.143V21.1367H139.687ZM146.809 20.3567C146.193 20.9807 145.417 21.2927 144.481 21.2927C143.545 21.2927 142.769 20.9847 142.153 20.3687C141.537 19.7447 141.229 18.9607 141.229 18.0167C141.229 17.0727 141.541 16.2927 142.165 15.6767C142.789 15.0527 143.565 14.7407 144.493 14.7407C145.429 14.7407 146.205 15.0527 146.821 15.6767C147.437 16.3007 147.745 17.0807 147.745 18.0167C147.745 18.9527 147.433 19.7327 146.809 20.3567ZM144.481 20.4287C145.153 20.4287 145.701 20.2007 146.125 19.7447C146.557 19.2887 146.773 18.7127 146.773 18.0167C146.773 17.3207 146.557 16.7447 146.125 16.2887C145.701 15.8327 145.153 15.6047 144.481 15.6047C143.817 15.6047 143.269 15.8367 142.837 16.3007C142.413 16.7567 142.201 17.3287 142.201 18.0167C142.201 18.7207 142.413 19.3007 142.837 19.7567C143.269 20.2047 143.817 20.4287 144.481 20.4287ZM150.468 21.1367L148.524 14.8967H149.556L151.068 20.0567H151.14L152.796 14.8967H153.876L155.52 20.0567H155.592L157.116 14.8967H158.148L156.192 21.1367H154.968L153.372 16.0727H153.3L151.692 21.1367H150.468ZM160.576 13.5767C160.448 13.7047 160.284 13.7687 160.084 13.7687C159.884 13.7687 159.72 13.7047 159.592 13.5767C159.464 13.4407 159.4 13.2727 159.4 13.0727C159.4 12.8807 159.464 12.7207 159.592 12.5927C159.72 12.4567 159.884 12.3887 160.084 12.3887C160.284 12.3887 160.448 12.4567 160.576 12.5927C160.712 12.7207 160.78 12.8807 160.78 13.0727C160.78 13.2727 160.712 13.4407 160.576 13.5767ZM159.592 21.1367V14.8967H160.54V21.1367H159.592ZM162.58 21.1367V14.8967H163.528V15.8087H163.6C163.744 15.5047 163.98 15.2527 164.308 15.0527C164.644 14.8447 165.044 14.7407 165.508 14.7407C166.22 14.7407 166.784 14.9767 167.2 15.4487C167.624 15.9127 167.836 16.5007 167.836 17.2127V21.1367H166.888V17.2727C166.888 16.7847 166.732 16.3887 166.42 16.0847C166.108 15.7807 165.728 15.6287 165.28 15.6287C164.784 15.6287 164.368 15.8007 164.032 16.1447C163.696 16.4807 163.528 16.9047 163.528 17.4167V21.1367H162.58ZM172.617 24.0527C171.873 24.0527 171.261 23.8727 170.781 23.5127C170.301 23.1527 170.009 22.6847 169.905 22.1087H170.805C170.885 22.4687 171.089 22.7447 171.417 22.9367C171.745 23.1287 172.145 23.2247 172.617 23.2247C173.329 23.2247 173.861 23.0407 174.213 22.6727C174.565 22.3047 174.741 21.7927 174.741 21.1367V20.1527H174.669C174.149 20.9127 173.429 21.2927 172.509 21.2927C171.597 21.2927 170.849 20.9887 170.265 20.3807C169.689 19.7727 169.401 18.9887 169.401 18.0287C169.401 17.0687 169.685 16.2807 170.253 15.6647C170.829 15.0487 171.557 14.7407 172.437 14.7407C173.005 14.7407 173.473 14.8687 173.841 15.1247C174.217 15.3807 174.481 15.6407 174.633 15.9047H174.705V14.8967H175.653V21.1367C175.653 22.0487 175.381 22.7607 174.837 23.2727C174.301 23.7927 173.561 24.0527 172.617 24.0527ZM170.973 19.7807C171.381 20.2207 171.913 20.4407 172.569 20.4407C173.225 20.4407 173.749 20.2087 174.141 19.7447C174.541 19.2807 174.741 18.7087 174.741 18.0287C174.741 17.2767 174.533 16.6847 174.117 16.2527C173.709 15.8207 173.185 15.6047 172.545 15.6047C171.905 15.6047 171.381 15.8327 170.973 16.2887C170.573 16.7367 170.373 17.3167 170.373 18.0287C170.373 18.7567 170.573 19.3407 170.973 19.7807Z"
                    fill="#4D4D4D" />
                <path
                    d="M187.537 15.3125C187.764 15.0676 188.147 15.0534 188.392 15.2808L191.409 18.1258L194.426 15.2808C194.671 15.0534 195.054 15.0676 195.281 15.3125C195.509 15.5574 195.495 15.9403 195.25 16.1677L191.821 19.395C191.589 19.6105 191.23 19.6105 190.997 19.395L187.568 16.1677C187.323 15.9403 187.309 15.5574 187.537 15.3125Z"
                    fill="#7B7A7B" />
                <rect x="0.596591" y="0.596591" width="213.807" height="33.0795" rx="3.63068"
                    stroke="#EBEBEB" stroke-width="0.806818" />
            </svg>
            <div class="dropdown-widget-response-bot-options">
                <svg width="205" height="26" viewBox="0 0 205 26" fill="none"
                    xmlns="http://www.w3.org/2000/svg">
                    <rect width="203.318" height="25.2955" rx="3.22727"
                        transform="matrix(1 0 0 -1 0.84082 25.6357)" fill="#F8F8F8" />
                    <path
                        d="M22.303 17.0335L19.7788 14.5093C20.3854 13.7811 20.6879 12.8471 20.6233 11.9016C20.5588 10.956 20.1322 10.0718 19.4323 9.43276C18.7324 8.79374 17.8131 8.44915 16.8656 8.47068C15.9181 8.49221 15.0154 8.87819 14.3452 9.54834C13.6751 10.2185 13.2891 11.1212 13.2676 12.0687C13.246 13.0162 13.5906 13.9355 14.2296 14.6354C14.8687 15.3353 15.7529 15.7619 16.6984 15.8264C17.644 15.891 18.578 15.5885 19.3062 14.9819L21.8304 17.5061L22.303 17.0335ZM13.947 12.1583C13.947 11.5633 14.1235 10.9817 14.454 10.4871C14.7845 9.99237 15.2543 9.60681 15.804 9.37913C16.3537 9.15146 16.9585 9.09188 17.542 9.20795C18.1255 9.32402 18.6615 9.61052 19.0822 10.0312C19.5029 10.4519 19.7894 10.9879 19.9055 11.5714C20.0216 12.155 19.962 12.7598 19.7343 13.3095C19.5066 13.8591 19.1211 14.3289 18.6264 14.6595C18.1317 14.99 17.5501 15.1664 16.9552 15.1664C16.1576 15.1655 15.393 14.8483 14.8291 14.2844C14.2651 13.7204 13.9479 12.9558 13.947 12.1583Z"
                        fill="#4D4D4D" />
                    <path
                        d="M33.4267 17.1443C32.5787 17.1443 31.8667 16.8963 31.2907 16.4003C30.7147 15.8963 30.4267 15.2603 30.4267 14.4923H31.3987C31.3987 14.9883 31.5867 15.4043 31.9627 15.7403C32.3387 16.0763 32.8387 16.2443 33.4627 16.2443C34.0227 16.2443 34.4787 16.1163 34.8307 15.8603C35.1827 15.6043 35.3587 15.2603 35.3587 14.8283C35.3587 14.3483 35.1987 13.9803 34.8787 13.7243C34.5587 13.4683 34.1707 13.2883 33.7147 13.1843C33.2587 13.0803 32.8027 12.9683 32.3467 12.8483C31.8987 12.7203 31.5147 12.4803 31.1947 12.1283C30.8747 11.7763 30.7147 11.2923 30.7147 10.6763C30.7147 10.0523 30.9587 9.52428 31.4467 9.09228C31.9347 8.65228 32.5867 8.43228 33.4027 8.43228C34.1307 8.43228 34.7707 8.64028 35.3227 9.05628C35.8827 9.46428 36.1627 10.0683 36.1627 10.8683H35.1667C35.1667 10.3803 35.0107 10.0003 34.6987 9.72828C34.3947 9.45628 33.9587 9.32028 33.3907 9.32028C32.8307 9.32028 32.4067 9.45228 32.1187 9.71628C31.8307 9.98028 31.6867 10.3003 31.6867 10.6763C31.6867 10.9803 31.7707 11.2363 31.9387 11.4443C32.1147 11.6443 32.3387 11.7963 32.6107 11.9003C32.8827 12.0043 33.1827 12.0963 33.5107 12.1763C33.8467 12.2563 34.1787 12.3523 34.5067 12.4643C34.8427 12.5683 35.1467 12.7043 35.4187 12.8723C35.6907 13.0323 35.9107 13.2763 36.0787 13.6043C36.2547 13.9243 36.3427 14.3123 36.3427 14.7683C36.3427 15.4483 36.0787 16.0163 35.5507 16.4723C35.0307 16.9203 34.3227 17.1443 33.4267 17.1443ZM40.6614 17.1443C39.7254 17.1443 38.9694 16.8363 38.3934 16.2203C37.8254 15.6043 37.5414 14.8203 37.5414 13.8683C37.5414 12.8923 37.8334 12.1043 38.4174 11.5043C39.0014 10.8963 39.7294 10.5923 40.6014 10.5923C41.5294 10.5923 42.2654 10.8923 42.8094 11.4923C43.3534 12.0923 43.6254 12.8563 43.6254 13.7843V14.2043H38.5374C38.5614 14.8363 38.7614 15.3403 39.1374 15.7163C39.5214 16.0923 40.0334 16.2803 40.6734 16.2803C41.1054 16.2803 41.4974 16.1803 41.8494 15.9803C42.2014 15.7803 42.4454 15.5043 42.5814 15.1523H43.5654C43.3894 15.7443 43.0414 16.2243 42.5214 16.5923C42.0014 16.9603 41.3814 17.1443 40.6614 17.1443ZM38.5614 13.3643H42.6174C42.5774 12.7643 42.3694 12.2963 41.9934 11.9603C41.6174 11.6243 41.1534 11.4563 40.6014 11.4563C40.0654 11.4563 39.6014 11.6323 39.2094 11.9843C38.8254 12.3363 38.6094 12.7963 38.5614 13.3643ZM47.9385 17.1443C47.0265 17.1443 46.2785 16.8403 45.6945 16.2323C45.1185 15.6243 44.8305 14.8403 44.8305 13.8803C44.8305 12.9203 45.1145 12.1323 45.6825 11.5163C46.2585 10.9003 46.9865 10.5923 47.8665 10.5923C48.4345 10.5923 48.9025 10.7203 49.2705 10.9763C49.6465 11.2323 49.9105 11.4923 50.0625 11.7563H50.1345V10.7483H51.0825V16.9883H50.1705V16.0043H50.0985C49.5785 16.7643 48.8585 17.1443 47.9385 17.1443ZM46.4025 15.6323C46.8105 16.0723 47.3425 16.2923 47.9985 16.2923C48.6545 16.2923 49.1785 16.0603 49.5705 15.5963C49.9705 15.1323 50.1705 14.5603 50.1705 13.8803C50.1705 13.1283 49.9625 12.5363 49.5465 12.1043C49.1385 11.6723 48.6145 11.4563 47.9745 11.4563C47.3345 11.4563 46.8105 11.6843 46.4025 12.1403C46.0025 12.5883 45.8025 13.1683 45.8025 13.8803C45.8025 14.6083 46.0025 15.1923 46.4025 15.6323ZM53.1269 16.9883V10.7483H54.0629V11.9123H54.1349C54.2389 11.6083 54.4429 11.3403 54.7469 11.1083C55.0509 10.8683 55.4149 10.7483 55.8389 10.7483H56.3669V11.6963H55.8509C55.2989 11.6963 54.8629 11.8923 54.5429 12.2843C54.2309 12.6683 54.0749 13.1643 54.0749 13.7723V16.9883H53.1269ZM60.4212 17.1443C59.4852 17.1443 58.7172 16.8323 58.1172 16.2083C57.5172 15.5843 57.2172 14.8043 57.2172 13.8683C57.2172 12.9403 57.5212 12.1643 58.1292 11.5403C58.7372 10.9083 59.4972 10.5923 60.4092 10.5923C61.1052 10.5923 61.7292 10.7923 62.2812 11.1923C62.8412 11.5843 63.2012 12.1203 63.3612 12.8003H62.3772C62.2492 12.3923 62.0052 12.0683 61.6452 11.8283C61.2932 11.5803 60.8892 11.4563 60.4332 11.4563C59.7772 11.4563 59.2412 11.6883 58.8252 12.1523C58.4092 12.6083 58.2012 13.1803 58.2012 13.8683C58.2012 14.5723 58.4132 15.1523 58.8372 15.6083C59.2612 16.0563 59.8012 16.2803 60.4572 16.2803C60.9132 16.2803 61.3212 16.1563 61.6812 15.9083C62.0412 15.6603 62.2812 15.3363 62.4012 14.9363H63.3732C63.2132 15.6163 62.8572 16.1563 62.3052 16.5563C61.7532 16.9483 61.1252 17.1443 60.4212 17.1443ZM65.0566 16.9883V7.98828H66.0046V11.6603H66.0766C66.2206 11.3563 66.4606 11.1043 66.7966 10.9043C67.1406 10.6963 67.5446 10.5923 68.0086 10.5923C68.7206 10.5923 69.2886 10.8283 69.7126 11.3003C70.1446 11.7723 70.3606 12.3603 70.3606 13.0643V16.9883H69.4126V13.1243C69.4126 12.6363 69.2526 12.2403 68.9326 11.9363C68.6126 11.6323 68.2286 11.4803 67.7806 11.4803C67.2926 11.4803 66.8726 11.6443 66.5206 11.9723C66.1766 12.2923 66.0046 12.7003 66.0046 13.1963V16.9883H65.0566ZM78.2035 16.9883C77.6195 16.9883 77.1635 16.8283 76.8355 16.5083C76.5075 16.1883 76.3435 15.7203 76.3435 15.1043V11.5523H75.1675V10.7483H76.1035C76.3035 10.7483 76.4035 10.6443 76.4035 10.4363V8.93628H77.2915V10.7483H79.2115V11.5523H77.2915V15.0923C77.2915 15.8043 77.6155 16.1603 78.2635 16.1603H79.1275V16.9883H78.2035ZM80.7806 19.7483V18.8843H81.2486C81.8246 18.8843 82.2126 18.6163 82.4126 18.0803L82.7006 17.3243L80.1686 10.7483H81.2246L83.1566 16.0283H83.2286L85.1726 10.7483H86.2406L83.2646 18.4163C83.0966 18.8643 82.8686 19.1963 82.5806 19.4123C82.3006 19.6363 81.9166 19.7483 81.4286 19.7483H80.7806ZM87.6855 19.7483V10.7483H88.5975V11.7323H88.6695C89.1895 10.9723 89.9095 10.5923 90.8295 10.5923C91.7415 10.5923 92.4855 10.8963 93.0615 11.5043C93.6455 12.1123 93.9375 12.8963 93.9375 13.8563C93.9375 14.8163 93.6495 15.6043 93.0735 16.2203C92.5055 16.8363 91.7815 17.1443 90.9015 17.1443C90.3335 17.1443 89.8615 17.0163 89.4855 16.7603C89.1175 16.5043 88.8575 16.2443 88.7055 15.9803H88.6335V19.7483H87.6855ZM89.2095 15.6323C89.6255 16.0643 90.1535 16.2803 90.7935 16.2803C91.4335 16.2803 91.9535 16.0563 92.3535 15.6083C92.7615 15.1523 92.9655 14.5683 92.9655 13.8563C92.9655 13.1283 92.7615 12.5443 92.3535 12.1043C91.9535 11.6643 91.4255 11.4443 90.7695 11.4443C90.1135 11.4443 89.5855 11.6763 89.1855 12.1403C88.7935 12.6043 88.5975 13.1763 88.5975 13.8563C88.5975 14.6083 88.8015 15.2003 89.2095 15.6323ZM98.2591 17.1443C97.3231 17.1443 96.5671 16.8363 95.9911 16.2203C95.4231 15.6043 95.1391 14.8203 95.1391 13.8683C95.1391 12.8923 95.4311 12.1043 96.0151 11.5043C96.5991 10.8963 97.3271 10.5923 98.1991 10.5923C99.1271 10.5923 99.8631 10.8923 100.407 11.4923C100.951 12.0923 101.223 12.8563 101.223 13.7843V14.2043H96.1351C96.1591 14.8363 96.3591 15.3403 96.7351 15.7163C97.1191 16.0923 97.6311 16.2803 98.2711 16.2803C98.7031 16.2803 99.0951 16.1803 99.4471 15.9803C99.7991 15.7803 100.043 15.5043 100.179 15.1523H101.163C100.987 15.7443 100.639 16.2243 100.119 16.5923C99.5991 16.9603 98.9791 17.1443 98.2591 17.1443ZM96.1591 13.3643H100.215C100.175 12.7643 99.9671 12.2963 99.5911 11.9603C99.2151 11.6243 98.7511 11.4563 98.1991 11.4563C97.6631 11.4563 97.1991 11.6323 96.8071 11.9843C96.4231 12.3363 96.2071 12.7963 96.1591 13.3643Z"
                        fill="#4D4D4D" />
                </svg>

                <ul>
    `

    for (const drop of field.options) {
        html += `
            <li style="word-break: break-all">${drop}</li>
        `
    }

    html += `</div></ul></div></div></div>`
    return html

}

function get_phone_number_field_html(field, id) {

    let html = `
    <div class="form-preview-input-type-wrapper">
    <label>${field.label_name}`;

    if (!field.optional) {
        html += `
        <span style="color: red;">*</span>
        `
    }

    html += `<div class="form-widget-preview-content-area preview-container-h100">
        <div class="easychat-country-dropdown-preview-wrapper" id="telephone-preview-wrapper-` + id + `">
            <input style="border: none !important; pointer-events: none !important;" readonly type="tel" placeholder="` + field.placeholder + `" id="telephone-preview-` + id + `" class="phone-number-input">
        </div>


</div>`

html += `</div>`;          

return html

}

function get_built_form_info(is_toast_required) {
    let form = {};

    form.field_order = [];

    let fields = []

    let ordered_fileds = $("#create-form-fields").sortable("toArray").filter(function(elm) {
        return elm.match(/saved_data_div/)
    })

    if (ordered_fileds.length == 0) {
        ordered_fileds = $("#create-form-fields").sortable("toArray")

        fields = ordered_fileds.map(function(elm) {
            return document.getElementById(elm)
        });
    } else {
        fields = ordered_fileds.map(function(elm) {
            return document.getElementById("field-" + elm.split("saved_data_div_")[1])
        });
    }

    if (is_toast_required && fields.length == 0) {
        return;
    }

    let need_to_save = Array.from(fields).length != 0;
    Array.from(fields).forEach(field => {
        form[field.id] = {};
        field_id_num = (field.id).split('-')[1];

        let label_name = document.getElementById('input_name_' + field_id_num + '_1').value.trim();
        label_name = stripHTML(label_name);
        label_name = strip_unwanted_characters(label_name);

        if (is_toast_required && label_name == '') {
            showToast('Label name cannot be empty', 2000);
            need_to_save = false;
            return;
        }

        if (check_if_label_name_exists(field_id_num)) {
            need_to_save = false;
            return;
        }

        form[field.id].label_name = label_name;

        let input_type = document.getElementById('input_type_' + field_id_num).value;

        form[field.id].type = input_type;

        form[field.id].optional = document.getElementById('optional-toggle-field-' + field_id_num).checked;

        const field_info = get_field_info_based_input_type(input_type, field_id_num, form);

        if (!api_integrated_fields.includes(field_id_num) && input_type == "radio" && field_info.options.length == 0) {
            M.toast({
                "html": "Please enter at least one and valid radio option"
            }, 2000);
            return;
        }

        if (!api_integrated_fields.includes(field_id_num) && input_type == "checkbox" && field_info.options.length == 0) {
            M.toast({
                "html": "Please enter at least one and valid checkbox option"
            }, 2000);
            return;
        }

        if (is_toast_required && 'is_valid' in field_info && field_info.is_valid == false) {
            showToast(field_info.error, 2000);
            need_to_save = false;
            return;
        }

        form[field.id] = { ...form[field.id], ...field_info };
        form.field_order.push(field.id);
    })
    return {
        form: form,
        need_to_save: need_to_save,
    };
}

function get_field_info_based_input_type(input_type, id, form) {
    if (input_type == 'text_field') {
        return {
            placeholder: document.getElementById('input_selected_type_' + id + '_3').value
        };
    }
    else if (input_type == 'radio') {
        return {
            options: form_get_radio_button_list(id)
        }
    }
    else if (input_type == 'checkbox') {
        return {
            options: form_get_check_box_list(id)
        }
    }
    else if (input_type == 'dropdown_list') {
        return {
            options: form_get_dropdown_list(id)
        }
    }
    else if (input_type == 'range') {
        return {
            slider_type: document.getElementById('range_selector_' + id).value,
            min_value: document.getElementById('form-range-slider-min-range-' + id).value,
            max_value: document.getElementById('form-range-slider-max-range-' + id).value
        }
    }
    else if (input_type == 'file_attach') {
        return {
            is_valid: true,
            file_type: document.getElementById('file_attach_type_' + id).value
        }
    }
    else if (input_type == 'time_picker' || input_type == 'date_picker') {
        return {
            calendar_type: document.getElementById('calendar_selector_type_' + id).value
        }
    }
    else if (input_type == 'phone_number') {
        return {
            country_code: $("#phone_number_selector_type_" + id).intlTelInput("getSelectedCountryData").iso2,
            placeholder: document.getElementById('input_selected_type_' + id + '_3').value
        }
    }
}

function get_dependent_field_div(id, is_dependent_field_required) {
    let first_element = document.querySelector('.create-form-field')
    let div_style = ''

    if (!first_element) return ''
    if (!is_dependent_field_required) {
        div_style = "style='display: none'";
    }
    return `
        <div class="form-widget-dependent-value-wrapper" id="dependent_field_wrapper_${id}" ${div_style}>
            <div class="optional-btn dependent-field-toggle-btn" style="font-weight: 300; font-size: 12px; position: relative; left: -4px;"> <span>Dependent Field<span class="tooltipped" data-position="top" data-tooltip=" This is used to set dependencies based on values of mapped fields. Make sure to click on ‘Update API Status’ when API is configured."><svg width="17" height="17" viewBox="0 0 17 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M14.9001 8.2501C14.9001 9.94748 14.2258 11.5753 13.0256 12.7756C11.8253 13.9758 10.1975 14.6501 8.5001 14.6501C6.80271 14.6501 5.17485 13.9758 3.97461 12.7756C2.77438 11.5753 2.1001 9.94748 2.1001 8.2501C2.1001 6.55271 2.77438 4.92485 3.97461 3.72461C5.17485 2.52438 6.80271 1.8501 8.5001 1.8501C10.1975 1.8501 11.8253 2.52438 13.0256 3.72461C14.2258 4.92485 14.9001 6.55271 14.9001 8.2501ZM8.5001 5.8501C8.35954 5.84996 8.22142 5.88686 8.09966 5.95708C7.97789 6.0273 7.87678 6.12837 7.8065 6.2501C7.75575 6.3444 7.68659 6.42755 7.60311 6.49463C7.51963 6.5617 7.42353 6.61133 7.32051 6.64058C7.21749 6.66982 7.10965 6.67809 7.00338 6.66489C6.89711 6.65168 6.79457 6.61727 6.70185 6.56371C6.60912 6.51014 6.52809 6.4385 6.46356 6.35303C6.39904 6.26757 6.35233 6.17002 6.3262 6.06616C6.30007 5.96231 6.29506 5.85427 6.31147 5.74845C6.32787 5.64262 6.36536 5.54117 6.4217 5.4501C6.68587 4.99259 7.09362 4.63503 7.58172 4.43287C8.06981 4.23071 8.61097 4.19525 9.12127 4.33198C9.63157 4.46872 10.0825 4.77001 10.4041 5.18914C10.7257 5.60826 10.9001 6.12179 10.9001 6.6501C10.9002 7.14659 10.7465 7.63092 10.4599 8.03638C10.1734 8.44184 9.76816 8.74849 9.3001 8.9141V9.0501C9.3001 9.26227 9.21581 9.46575 9.06578 9.61578C8.91575 9.76581 8.71227 9.8501 8.5001 9.8501C8.28792 9.8501 8.08444 9.76581 7.93441 9.61578C7.78438 9.46575 7.7001 9.26227 7.7001 9.0501V8.2501C7.7001 8.03792 7.78438 7.83444 7.93441 7.68441C8.08444 7.53438 8.28792 7.4501 8.5001 7.4501C8.71227 7.4501 8.91575 7.36581 9.06578 7.21578C9.21581 7.06575 9.3001 6.86227 9.3001 6.6501C9.3001 6.43792 9.21581 6.23444 9.06578 6.08441C8.91575 5.93438 8.71227 5.8501 8.5001 5.8501ZM8.5001 12.2501C8.71227 12.2501 8.91575 12.1658 9.06578 12.0158C9.21581 11.8658 9.3001 11.6623 9.3001 11.4501C9.3001 11.2379 9.21581 11.0344 9.06578 10.8844C8.91575 10.7344 8.71227 10.6501 8.5001 10.6501C8.28792 10.6501 8.08444 10.7344 7.93441 10.8844C7.78438 11.0344 7.7001 11.2379 7.7001 11.4501C7.7001 11.6623 7.78438 11.8658 7.93441 12.0158C8.08444 12.1658 8.28792 12.2501 8.5001 12.2501Z" fill="#7B7A7B"/>
                </svg>
                </span></span>
                <input type="checkbox" id="dependent-field-${id}"><label style="margin-left: 5px; height: 13px;" for="dependent-field-${id}">Toggle</label>
            </div>
            <div class="col s12 easychat-dependent-dropdown" id="dependent_dropdown_div_${id}" style="display: none;padding: 0px !important; margin-top: 16px; ">
                    <select class="easychat-form-widget-dropdown-wrapper dependent-dropdown" id="dependent_field_dropdown_${id}" style="display: none;"> 
                        <option value="Select Dependency">Select Dependency</option>
                    </select>
            </div>
        </div>`
}

function check_if_label_name_exists(id) {
    $('#label_name_error_msg_' + id).hide()
    $('#label_name_' + id + '_1').css('color', '#9e9e9e');
    let label_name = $('#input_name_' + id + '_1').val();
    if (label_name == '') {
        return false;
    }
    let fields = document.querySelectorAll(".label-name");
    for (let i = 0; i < fields.length; i++) {
        if (fields[i].value == label_name && id != fields[i].id.split('_')[2]) {
            $('#label_name_' + id + '_1').css('color', 'red');
            $('#label_name_error_msg_' + id).html('Label name “' + label_name + '” already exists. Please try another.')
            $('#label_name_error_msg_' + id).show()
            return true;
        }
    }
    return false;
}

function add_input_type_field(id) {
    let input_type = document.getElementById('input_type_' + id).value;

    document.getElementById('validator_dropdown_' + id).style.display = 'none';
    document.getElementById('file_attach_' + id).style.display = 'none';
    document.getElementById('range_type_' + id).style.display = 'none';
    document.getElementById('calendar_type_' + id).style.display = 'none';
    document.getElementById('phone_number_type_' + id).style.display = 'none';
    document.getElementById('input_selected_type_' + id + '_3').style.display = 'none';
    document.getElementById('form-widget-range-slider-min-max-container' + id).style.display = 'none'
    document.getElementById("sortable-radio-widget-edit-div-" + id).style.display = 'none'
    document.getElementById("sortable-dropdown-widget-edit-div-" + id).style.display = 'none'
    document.getElementById("sortable-checkbox-widget-edit-div-" + id).style.display = 'none'
    document.getElementById("api_integration_link_" + id).style.display = 'block'
    document.getElementById('input_selected_type_' + id + '_3').style.visibility = "unset";
    if (document.getElementById('dependent_field_wrapper_' + id)) {
        document.getElementById('dependent_field_wrapper_' + id).style.display = 'flex'
    }

    if (input_type == 'text_field') {
        document.getElementById('validator_dropdown_' + id).style.display = 'block';
        document.getElementById('input_selected_type_' + id + '_3').style.display = 'inline-block';
        document.getElementById('input_selected_type_' + id + '_3').value = "";
        document.getElementById('input_selected_type_' + id + '_3').placeholder = "Placeholder text"
    } else if (input_type == 'range') {
        document.getElementById('range_type_' + id).style.display = 'block';
        document.getElementById('form-widget-range-slider-min-max-container' + id).style.display = 'block'
    } else if (input_type == 'file_attach') {
        document.getElementById('file_attach_' + id).style.display = 'block';
        document.getElementById("api_integration_link_" + id).style.display = 'none'
        document.getElementById('input_selected_type_' + id + '_3').style.display = "inline-block";
        document.getElementById('input_selected_type_' + id + '_3').style.visibility = "hidden";
        reset_api_integration(id)
        if (document.getElementById('dependent_field_wrapper_' + id)) {
            document.getElementById('dependent-field-' + id).checked = false;
            document.getElementById('dependent_field_wrapper_' + id).style.display = 'none'
            document.getElementById('dependent_dropdown_div_' + id).style.display = 'none'
        }
    } else if (input_type == 'dropdown_list') {
        document.getElementById("sortable-dropdown-widget-edit-div-" + id).style.display = "block"
        document.getElementById("sortable-dropdown-widget-edit-div-" + id).innerHTML = '';
        document.getElementById('input_selected_type_' + id + '_3').style.display = "inline-block"
        document.getElementById('input_selected_type_' + id + '_3').value = "";
        document.getElementById('input_selected_type_' + id + '_3').placeholder = "Enter any value or text and hit \"Enter\""
    } else if (input_type == 'checkbox') {
        document.getElementById("sortable-checkbox-widget-edit-div-" + id).style.display = "block"
        document.getElementById("sortable-checkbox-widget-edit-div-" + id).innerHTML = '';
        document.getElementById('input_selected_type_' + id + '_3').style.display = "inline-block"
        document.getElementById('input_selected_type_' + id + '_3').value = "";
        document.getElementById('input_selected_type_' + id + '_3').placeholder = "Enter any value or text and hit \"Enter\""
    } else if (input_type == 'radio') {
        document.getElementById("sortable-radio-widget-edit-div-" + id).style.display = "block"
        document.getElementById("sortable-radio-widget-edit-div-" + id).innerHTML = '';
        document.getElementById('input_selected_type_' + id + '_3').style.display = "inline-block"
        document.getElementById('input_selected_type_' + id + '_3').value = "";
        document.getElementById('input_selected_type_' + id + '_3').placeholder = "Enter any value or text and hit \"Enter\""
    } else if (input_type == 'date_picker' || input_type == 'time_picker') {
        document.getElementById('input_selected_type_' + id + '_3').style.display = "inline-block";
        document.getElementById('input_selected_type_' + id + '_3').style.visibility = "hidden";
        document.getElementById('calendar_type_' + id).style.display = "block"
        document.getElementById("api_integration_link_" + id).style.display = 'none'
        reset_api_integration(id)
        if (document.getElementById('dependent_field_wrapper_' + id)) {
            document.getElementById('dependent-field-' + id).checked = false;
            document.getElementById('dependent_field_wrapper_' + id).style.display = 'none'
            document.getElementById('dependent_dropdown_div_' + id).style.display = 'none'
        }
    } else if (input_type == "phone_number") {
        document.getElementById('phone_number_type_' + id).style.display = 'block';
        document.getElementById('input_selected_type_' + id + '_3').style.display = 'inline-block';
        document.getElementById('input_selected_type_' + id + '_3').value = "";
        document.getElementById('input_selected_type_' + id + '_3').placeholder = "Placeholder text"


    }
}

function update_form_widget_api_integration_status(sync_required = false) {
    return new Promise((resolve, reject) => {
        let fields = document.querySelectorAll(".create-form-field");
        const field_ids = []
        for (let i = 0; i < fields.length; i++) {
            let label_id = fields[i].id.split('-')[1]
            field_ids.push(label_id)
        }

        let json_string = JSON.stringify({
            field_ids: field_ids,
        })

        json_string = EncryptVariable(json_string);

        $.ajax({
            url: '/chat/form-widget-api-integration-status/',
            type: 'POST',
            data: {
                json_string: json_string
            },
            success: function (response) {
                response = custom_decrypt(response)
                response = JSON.parse(response);
                if (response['status'] == 200) {
                    api_integrated_fields = response['api_integrated_fields']
                    field_ids.forEach(field_id => {
                        if (api_integrated_fields.includes(field_id)) {
                            $('#api_integration_status_' + field_id).show();
                            $('#api_integration_link_' + field_id).html('Edit Integration');
                            let html = `API Integration - <span style="color:green">Active</span>`;
                            $('#saved_api_status_' + field_id).html(html)
                        } else {
                            $('#api_integration_status_' + field_id).hide();
                            $('#api_integration_link_' + field_id).html('Integrate API');
                            let html = `API Integration - <span style="color:red">Inactive</span>`;
                            $('#saved_api_status_' + field_id).html(html)
                        }
                    })
                    if (api_integrated_fields.length > 0) {
                        $('#api_integration_active_icon').show()
                    } else {
                        $('#api_integration_active_icon').hide()
                    }
                    resolve();
                } else {
                    M.toast({
                        'html': 'Unable to connect to server. Please try again later.'
                    }, 2000);
                }
            },
            error: function (error) {
                M.toast({
                    'html': 'Unable to connect to server. Please try again later.'
                }, 2000);
            }
        });
    });
}

function minimize_form_field_div(elem) {
    let id = elem.id.split('_')[2];
    $('#opened_form_div_' + id).hide()
    $('#saved_data_div_' + id).css('display', 'flex');
    $('#saved_full_name_' + id).html($('#input_name_' + id + '_1').val())
    $('#saved_input_type_' + id).html('Input Type - ' + reverse_input_name_mapping($('#input_type_' + id).val()))
    if ($('#input_type_' + id).val() == 'text_field') {
        $('#saved_validator_' + id).show()
        $('#saved_validator_' + id).html(reverse_validator_mapping($('#validator_' + id).val()))
    } else {
        $('#saved_validator_' + id).hide()
    }
    if ($('#api_integration_link_' + id).html() == 'Edit Integration') {
        let html = `API Integration - <span style="color:green">Active</span>`;
        $('#saved_api_status_' + id).html(html)
    } else {
        let html = `API Integration - <span style="color:red">Inactive</span>`;
        $('#saved_api_status_' + id).html(html)
    }
    if ($('#dependent-field-' + id).is(":checked") && $('#dependent_field_dropdown_' + id).val() != 'Select Dependency') {
        $('#saved_dependency_' + id).show();
        let dependency_id = $('#dependent_field_dropdown_' + id).val()
        $('#saved_dependency_name_' + id).html($('#input_name_' + dependency_id + '_1').val())
    } else {
        $('#saved_dependency_' + id).hide();
    }
}

function maximize_form_field_div(elem) {
    let id = elem.id.split('_')[2];
    $('#opened_form_div_' + id).show()
    $('#saved_data_div_' + id).hide();
}

function reset_api_integration(id, reset_all = false, reset_indivitual_field = false) {

    let field_id = id;

    if (reset_all) {
        let fields = document.querySelectorAll(".label-name");
        const field_ids = []
        for (let i = 0; i < fields.length; i++) {
            let label_id = fields[i].id.split('_')[2]
            field_ids.push(label_id)
        }
        field_id = field_ids.join('$$$')
    } else if (reset_indivitual_field) {
        $('#validator_' + field_id).val('choose_validator').trigger('change');
        $('#input_type_' + field_id).val('text_field').trigger('change');
        $('#dependent-field-' + field_id).prop('checked', false).trigger('change');
        $('#optional-toggle-field-' + field_id).prop('checked', false).trigger('change');
        $('#range_selector_' + field_id).val('Single Range Selector').trigger('change')
        $('#file_attach_type_' + field_id).val('image(ex. .jpeg, .png, .jpg)').trigger('change')
        $('#calendar_selector_type_' + field_id).val('Single Type').trigger('change')
        $('#phone_number_selector_type_' + field_id).intlTelInput("setCountry", "in").trigger('change')
        $('#input_name_' + field_id + '_1').val('');
        $('#input_type_' + field_id).trigger('select2:close');
        $('#form-range-slider-min-range-' + field_id).val('');
        $('#form-range-slider-max-range-' + field_id).val('');
        $('#input_selected_type_' + field_id + '_3').val('')
    }

    let json_string = JSON.stringify({
        field_id: field_id,
    })
    json_string = EncryptVariable(json_string);

    $.ajax({
        url: '/chat/reset-api-integration/',
        type: 'POST',
        data: {
            json_string: json_string
        },
        success: function (response) {
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {
                update_form_widget_api_integration_status();
            }
        }
    })
}

// Dynamic Form Widget JS End

function sanitize_html(unsafe) {
    return unsafe.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;').replaceAll('"', '&quot;').replaceAll("'", '&#039;');
}

function reverse_sanitize_html(safe) {
    return safe.replaceAll('&amp', '&;').replaceAll('&lt;', '<').replaceAll('&gt;', '>').replaceAll('&quot;', '"').replaceAll("&#039;", "'");
}

function generate_random_string(length) {
    let result = '';
    let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let characters_length = characters.length;
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * characters_length));
    }
    return result;
}

function html_tags_remover(text) {

    return text.replace(/<\/?[^>]+(>|$)/g, "").trim();
}

function search_from_category_table() {
    // Declare variables
    var input = document.getElementById("category-search-bar");
    var filter = input.value.toUpperCase();
    var table = document.getElementById("category-table");
    var trs = table.tBodies[0].getElementsByTagName("tr");

    var tds
    let tr_counter = trs.length;
    for (var i = 0; i < trs.length; i++) {
    tds = trs[i].getElementsByTagName("td");
        trs[i].style.display = "none";
        for (var i2 = 0; i2 < tds.length; i2++) {
            if (tds[i2].innerText.toUpperCase().indexOf(filter) > -1) {
                trs[i].style.display = "";
                tr_counter--;
                break;
            }
        }
    }

    if(tr_counter == trs.length) {
        document.getElementById("category-list-div-no-items").style.display = "flex";
        document.getElementById("form_assist_table_pagination_div").style.display = "none";
    }
    else {
        document.getElementById("category-list-div-no-items").style.display = "none";
        document.getElementById("form_assist_table_pagination_div").style.display = "flex";
    }
}

function toggle_enable_intent_icon(ele) {
    if (ele.checked) {
        document.getElementById("intent-icon-choices-wrapper").style.display = "block";
    } else {
        document.getElementById("intent-icon-choices-wrapper").style.display = "none";
    }
}
$(document).on('select2:open', function(e) {
    document.querySelector(`[aria-controls="select2-${e.target.id}-results"]`).focus();
  });