import { create_agent_socket, update_agent_websocket_token } from "./livechat_agent_socket";

import {
    open_local_db,
    get_chat_info_from_local,
    get_customer_details_from_local,
    get_messages_from_local,
    save_message_to_local,
    is_indexed_db_supported,
    get_message_history_store,
    get_chat_info_store,
    get_customer_details_store,
    delete_messages_from_local,
} from "./local_db";
import { set_sender_websocket_token } from "../common/livechat_internal_chat_socket";
import {
    EncryptVariable,
    custom_decrypt,
    is_docs,
    is_image,
    is_pdf,
    is_txt,
    is_video,
    is_excel,
    is_mobile,
    get_params,
    get_new_chat_indicator_html,
    get_guest_session_indicator_html,
    get_voip_indicator_html,
    get_self_assign_indicator_html,
    get_cobrowsing_indicator_html,
    validate_email,
    stripHTMLtags,
} from "../utils";

import { close_chat_socket, go_to_specific_element, send_message_to_socket } from "./livechat_chat_socket";

import {
    hide_prev_chat,
    show_console,
    remove_chat,
    send_notification_for_new_assigned_customer,
    send_notification_for_chat_transfer,
    update_canned_response_arr_and_blacklisted_keywords,
    set_is_message_diffrentiator_present,
    set_user_unseen_message,
    remove_other_chat,
    is_customer_facing_issues,
    append_system_text_response,
    return_time,
    save_system_message,
    update_unread_message_count,
    guest_agent_session_no_response,
    get_agent_pending_list,
    set_agent_pending_list,
    hide_edit_customer_details_btn,
    check_edit_customer_info_btn,
    get_chat_data,
    is_user_in_other_tab,
} from "./chatbox";

import { send_notification_to_customer } from "./livechat_agent_socket";

import axios from "axios";
import { cancel_meeting, set_voip_status } from "./voip/voip";

import { generate_video_meet_link } from "./vc/livechat_vc"

import { translate_messages, get_translated_text } from "./language_translation";
import { set_cobrowsing_status } from "./cobrowsing/manage_cobrowsing";
import { get_no_internet } from "../common";

const state = {
    customer_list: {
        count: window.ASSIGNED_CUSTOMER_COUNT,
    },
    agent: {
        name: window.AGENT_FULL_NAME,
        username: window.AGENT_USERNAME,
        current_status: window.CURRENT_STATUS,
        is_notification_enable: false,
        inactivity_timer: {
            customer: {},
            agent: {},
        },
        chat_dispose_started: {},
        session_expired: {},
        bot_id: null,
    },
    session_id: {
        current: "",
        previous: "",
    },
    ongoing_session_ids: [],
    theme_color: {
        one: window.LIVECHAT_THEME_COLOR,
        two: window.LIVECHAT_THEME_COLOR_LIGHT,
        three: window.LIVECHAT_THEME_COLOR_LIGHT_ONE,
    },
    timer_to_hide_typing_sidebar: {},
    icons: {
        image: `<svg id="Layer_1" enable-background="new 0 0 512 512" height="51" viewBox="0 0 512 512" width="36" xmlns="http://www.w3.org/2000/svg"><g><g><path clip-rule="evenodd" d="m178.093 259.898 82.91 73.926 62.274-55.53 105.444 94.023v-138.923c-13.152 5.187-27.466 8.05-42.461 8.05-60.177 0-109.639-45.949-115.195-104.681h-219.051v235.555zm-56.095-79.001c14.286 0 25.851 11.593 25.851 25.851 0 14.286-11.565 25.851-25.851 25.851s-25.851-11.565-25.851-25.851c.001-14.257 11.565-25.851 25.851-25.851z" fill="#66e0f7" fill-rule="evenodd"/></g><g><path clip-rule="evenodd" d="m121.998 232.6c14.286 0 25.851-11.565 25.851-25.851 0-14.258-11.565-25.851-25.851-25.851s-25.851 11.593-25.851 25.851c.001 14.286 11.565 25.851 25.851 25.851z" fill="#ffcd69" fill-rule="evenodd"/></g><g><path clip-rule="evenodd" d="m52.014 387.029h268.655l-59.666-53.205-82.91-73.926-126.079 112.419z" fill="#a0e5a5" fill-rule="evenodd"/></g><g><path clip-rule="evenodd" d="m320.669 387.029h108.052v-14.712l-105.444-94.023-62.274 55.53z" fill="#a0e5a5" fill-rule="evenodd"/></g><g><path clip-rule="evenodd" d="m102.298 500.328 122.593-71.318h221.886c13.124 0 23.923-10.8 23.923-23.924v-200.236c-11.593 12.387-25.907 22.223-41.979 28.544v138.923 14.712h-108.052-268.655v-14.712-235.554h219.051c-.34-3.628-.51-7.313-.51-11.055 0-10.715 1.446-21.089 4.167-30.954h-240.792c-13.152 0-23.923 10.771-23.923 23.924v286.407c0 13.153 10.771 23.924 23.923 23.924h65.534v71.318h2.834z" fill="#faf7f5" fill-rule="evenodd"/></g><g><path clip-rule="evenodd" d="m271.065 136.763c5.556 58.733 55.018 104.681 115.195 104.681 14.995 0 29.309-2.863 42.461-8.05 16.072-6.321 30.386-16.157 41.979-28.544 19.416-20.693 31.293-48.528 31.293-79.142 0-63.892-51.815-115.708-115.733-115.708-53.176 0-97.989 35.886-111.538 84.754-2.721 9.864-4.167 20.239-4.167 30.954 0 3.742.17 7.427.51 11.055z" fill="#ffcd69" fill-rule="evenodd"/></g><g><path d="m511.993 125.708c0-69.315-56.403-125.708-125.733-125.708-54.981 0-101.825 35.485-118.849 84.754h-233.481c-18.705 0-33.923 15.218-33.923 33.924v98.304c0 5.523 4.478 10 10 10s10-4.477 10-10v-98.304c0-7.678 6.246-13.924 13.923-13.924h228.382c-1.149 6.817-1.756 13.815-1.756 20.954 0 .353.01.703.013 1.055h-208.555c-5.522 0-10 4.477-10 10v250.266c0 5.523 4.478 10 10 10h376.707c5.522 0 10-4.477 10-10v-147.067c7.787-3.59 15.146-7.952 21.979-12.99v178.113c0 7.547-6.376 13.924-13.923 13.924h-221.885c-1.767 0-3.502.468-5.029 1.357l-110.398 64.245v-55.602c0-5.523-4.478-10-10-10h-65.535c-7.677 0-13.923-6.246-13.923-13.924v-98.304c0-5.523-4.478-10-10-10s-10 4.477-10 10v98.304c0 18.706 15.218 33.924 33.923 33.924h55.534v62.991c0 3.579 1.912 6.885 5.015 8.669 1.544.888 3.265 1.331 4.985 1.331 1.737 0 3.476-.453 5.029-1.357l123.097-71.634h219.188c18.705 0 33.923-15.218 33.923-33.924v-196.466c19.467-22.15 31.292-51.174 31.292-82.911zm-125.733-105.708c58.302 0 105.733 47.42 105.733 105.708 0 58.303-47.432 105.736-105.733 105.736-58.285 0-105.704-47.433-105.704-105.736 0-58.288 47.419-105.708 105.704-105.708zm-324.246 356.799 116.08-103.503 116.335 103.733h-232.415zm262.467.23-48.453-43.204 47.25-42.132 95.443 85.106v.23zm94.24-27.027-88.788-79.172c-3.793-3.382-9.518-3.382-13.311 0l-55.62 49.596-76.253-67.993c-3.793-3.381-9.518-3.381-13.311 0l-109.424 97.57v-203.24h200.314c10.045 59.342 61.791 104.682 123.932 104.682 11.222 0 22.101-1.486 32.461-4.257z"/><path d="m355.052 97.526c2.561 0 5.122-.978 7.074-2.932l14.134-14.147v58.952c0 5.523 4.478 10 10 10s10-4.477 10-10v-58.968l14.165 14.165c1.953 1.953 4.512 2.929 7.071 2.929s5.118-.977 7.071-2.929c3.905-3.905 3.905-10.237 0-14.142l-31.236-31.237c-1.168-1.168-2.639-2.049-4.225-2.517-3.255-.964-6.897-.226-9.557 2.19-.12.109-.245.21-.361.326-.002.002-.003.003-.005.005l-31.206 31.235c-3.903 3.907-3.9 10.239.007 14.142 1.953 1.953 4.51 2.928 7.068 2.928z"/><path d="m328.322 188.148h115.875c5.522 0 10-4.477 10-10v-27.07c0-5.523-4.478-10-10-10s-10 4.477-10 10v17.07h-95.875v-17.07c0-5.523-4.478-10-10-10s-10 4.477-10 10v27.07c0 5.523 4.478 10 10 10z"/><path d="m121.998 170.897c-19.769 0-35.851 16.083-35.851 35.852s16.082 35.852 35.851 35.852 35.851-16.083 35.851-35.852-16.082-35.852-35.851-35.852zm0 51.704c-8.74 0-15.851-7.111-15.851-15.852s7.11-15.852 15.851-15.852 15.851 7.111 15.851 15.852-7.111 15.852-15.851 15.852z"/><path d="m10.007 271.882c5.522 0 10-4.477 10-10v-.028c0-5.523-4.478-9.986-10-9.986s-10 4.491-10 10.014 4.477 10 10 10z"/></g></g></svg>`,

        image2: `<svg class="livechat-img-icon" width="19" height="19" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <g clip-path="url(#clip0)">
                    <path d="M4.94788 15.4374C3.68042 15.4374 2.55309 14.6259 2.14379 13.4178L2.11609 13.3268C2.0195 13.007 1.97913 12.7378 1.97913 12.4686V7.07104L0.0585446 13.482C-0.188455 14.4248 0.37442 15.4025 1.31888 15.663L13.5604 18.9413C13.7132 18.9809 13.866 18.9999 14.0164 18.9999C14.8049 18.9999 15.5253 18.4766 15.7272 17.7055L16.4405 15.4374H4.94788Z" fill="#909090"/>
                    <path d="M7.12497 7.12492C7.99818 7.12492 8.70831 6.41479 8.70831 5.54159C8.70831 4.66838 7.99818 3.95825 7.12497 3.95825C6.25177 3.95825 5.54164 4.66838 5.54164 5.54159C5.54164 6.41479 6.25177 7.12492 7.12497 7.12492Z" fill="#909090"/>
                    <path d="M17.0209 1.58325H5.14585C4.05494 1.58325 3.16669 2.4715 3.16669 3.56242V12.2708C3.16669 13.3617 4.05494 14.2499 5.14585 14.2499H17.0209C18.1118 14.2499 19 13.3617 19 12.2708V3.56242C19 2.4715 18.1118 1.58325 17.0209 1.58325ZM5.14585 3.16659H17.0209C17.2394 3.16659 17.4167 3.34392 17.4167 3.56242V9.18246L14.9158 6.26438C14.6506 5.95325 14.2666 5.787 13.8542 5.7775C13.4441 5.77988 13.0594 5.96196 12.7965 6.27704L9.85627 9.80629L8.89835 8.85075C8.35685 8.30925 7.47573 8.30925 6.93502 8.85075L4.75002 11.035V3.56242C4.75002 3.34392 4.92735 3.16659 5.14585 3.16659Z" fill="#909090"/>
                    </g>
                    <defs>
                    <clipPath id="clip0">
                    <rect width="19" height="19" fill="white"/>
                    </clipPath>
                    </defs>
                </svg>`,

        video: `<svg id="Capa_1" enable-background="new 0 0 512 512" height="51" viewBox="0 0 512 512" width="36" xmlns="http://www.w3.org/2000/svg"><g><g><g><path d="m474.5 504.5h-437c-16.569 0-30-13.431-30-30v-287l15-60c0-16.569 13.431-15 30-15h422c16.569 0 15-1.569 15 15l15 60v287c0 16.569-13.431 30-30 30z" fill="#eaf6ff"/><path d="m474.5 187.5v287c0 16.569-13.431 30-30 30h30c16.569 0 30-13.431 30-30v-287z" fill="#d8ecfe"/><path d="m474.5 97.5h-437c-16.569 0-30 13.431-30 30v60h497v-60c0-16.569-13.431-30-30-30z" fill="#3d6d93"/><path d="m474.5 97.5h-30c16.569 0 30 13.431 30 30v60h30v-60c0-16.569-13.431-30-30-30z" fill="#335e80"/></g><g><path d="m443.5 460v-31c0-3.866-3.134-7-7-7h-68l-15 45h83c3.866 0 7-3.134 7-7z" fill="#aee69c"/><path d="m436.5 422h-30c3.866 0 7 3.134 7 7v31c0 3.866-3.134 7-7 7h30c3.866 0 7-3.134 7-7v-31c0-3.866-3.134-7-7-7z" fill="#89daa4"/><path d="m353.5 467 15-45h-75l-15 45z" fill="#ffe179"/><path d="m278.5 467 15-45h-75l-15 45z" fill="#aee69c"/><path d="m203.5 467 15-45h-75l-15 45z" fill="#ffe179"/><path d="m128.5 467 15-45h-68c-3.866 0-7 3.134-7 7v31c0 3.866 3.134 7 7 7z" fill="#aee69c"/></g><g><g><path d="m330.728 365.59h-149.456c-12.513 0-22.658-10.144-22.658-22.658v-87.775c0-12.513 10.144-22.658 22.658-22.658h149.457c12.513 0 22.658 10.144 22.658 22.658v87.775c-.001 12.514-10.145 22.658-22.659 22.658z" fill="#f58a97"/><path d="m330.729 232.5h-30c12.513 0 22.657 10.144 22.657 22.657v87.775c0 12.513-10.144 22.657-22.657 22.657h30c12.513 0 22.657-10.144 22.657-22.657v-87.775c0-12.513-10.144-22.657-22.657-22.657z" fill="#f07281"/><path d="m278.455 302.868-39.776 26.756c-3.057 2.056-7.169-.136-7.169-3.823v-53.512c0-3.686 4.112-5.879 7.169-3.823l39.776 26.756c2.713 1.825 2.713 5.821 0 7.646z" fill="#fff"/></g></g><g><circle cx="256" cy="82" fill="#aee69c" r="74.5"/><path d="m256 7.5c-5.138 0-10.155.521-15 1.511 33.956 6.941 59.5 36.982 59.5 72.989s-25.544 66.048-59.5 72.989c4.845.99 9.862 1.511 15 1.511 41.145 0 74.5-33.355 74.5-74.5s-33.355-74.5-74.5-74.5z" fill="#89daa4"/></g></g><path d="m99.627 136.927c-4.142 0-7.5 3.358-7.5 7.5s3.358 7.5 7.5 7.5 7.5-3.358 7.5-7.5-3.358-7.5-7.5-7.5zm137.109-66.05 11.764-11.764v63.88c0 4.143 3.357 7.5 7.5 7.5s7.5-3.357 7.5-7.5v-63.88l11.764 11.764c2.929 2.929 7.677 2.929 10.606.001 2.93-2.929 2.93-7.678.001-10.606l-19.618-19.62c-5.624-5.639-14.908-5.583-20.507.002l-19.617 19.618c-2.929 2.929-2.929 7.678.001 10.606 2.928 2.928 7.677 2.929 10.606-.001zm237.764 19.123h-136.896c.256-2.633.396-5.301.396-8 0-45.215-36.785-82-82-82s-82 36.785-82 82c0 2.699.14 5.367.396 8h-136.896c-20.678 0-37.5 16.822-37.5 37.5v347c0 20.678 16.822 37.5 37.5 37.5h437c20.678 0 37.5-16.822 37.5-37.5v-347c0-20.678-16.822-37.5-37.5-37.5zm-218.5-75c36.944 0 67 30.056 67 67s-30.056 67-67 67-67-30.056-67-67 30.056-67 67-67zm241 165h-355.101c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h355.101v279.5c0 12.406-10.094 22.5-22.5 22.5h-437c-12.406 0-22.5-10.094-22.5-22.5v-279.5h91.899c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5h-91.899v-52.5c0-12.406 10.094-22.5 22.5-22.5h139.806c9.969 34.051 41.463 59 78.694 59s68.724-24.949 78.694-59h139.806c12.406 0 22.5 10.094 22.5 22.5zm-442.373-43.073c-4.142 0-7.5 3.358-7.5 7.5s3.358 7.5 7.5 7.5 7.5-3.358 7.5-7.5-3.358-7.5-7.5-7.5zm126.644 236.163h149.457c16.629 0 30.157-13.528 30.157-30.157v-87.775c0-16.629-13.528-30.157-30.157-30.157h-149.457c-16.629 0-30.157 13.528-30.157 30.157v87.775c0 16.629 13.529 30.157 30.157 30.157zm-15.157-117.933c0-8.357 6.8-15.157 15.157-15.157h149.457c8.357 0 15.157 6.8 15.157 15.157v87.775c0 8.357-6.8 15.157-15.157 15.157h-149.457c-8.357 0-15.157-6.8-15.157-15.157zm-105.114 173.843v31c0 7.995 6.505 14.5 14.5 14.5h361c7.995 0 14.5-6.505 14.5-14.5v-31c0-7.995-6.505-14.5-14.5-14.5h-87.68c-4.143 0-7.5 3.357-7.5 7.5s3.357 7.5 7.5 7.5h9.274l-10 30h-59.188l10-30h14.914c4.143 0 7.5-3.357 7.5-7.5s-3.357-7.5-7.5-7.5h-238.32c-7.995 0-14.5 6.505-14.5 14.5zm312.905.5h62.095v30h-72.095zm-150 0h59.189l-10 30h-59.189zm-74.999 0h59.188l-10 30h-59.188zm-72.906 0h57.095l-10 30h-47.095zm166.866-93.653 39.775-26.756c7.017-4.647 6.986-15.467 0-20.091l-39.777-26.758c-7.904-5.42-18.931.613-18.854 10.047v53.512c-.091 9.418 11.033 15.419 18.856 10.046zm-3.855-58.119 31.69 21.317-31.69 21.317zm-94.384-140.801c-4.142 0-7.5 3.358-7.5 7.5s3.358 7.5 7.5 7.5 7.5-3.358 7.5-7.5-3.358-7.5-7.5-7.5z"/></g></svg>`,

        video2: `<svg class="livechat-video-icon" width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M21.0834 5.481C20.5285 5.2512 19.8898 5.37813 19.465 5.80286L16.636 8.63215V6.90767C16.636 5.67961 15.6402 4.68372 14.4119 4.68372H2.22407C0.995841 4.68372 0 5.67961 0 6.90767V15.0925C0 16.3205 0.995841 17.3164 2.22407 17.3164H14.4119C15.6402 17.3164 16.636 16.3205 16.636 15.0925V13.3679L19.465 16.1972C19.7493 16.4814 20.1289 16.6324 20.5155 16.6324C20.7067 16.6324 20.8997 16.5952 21.0834 16.5191C21.6381 16.2893 22 15.7479 22 15.1472V6.85286C22 6.2522 21.6381 5.71081 21.0834 5.481ZM10.4527 11.5762L7.42132 13.9052C7.29203 14.0047 7.13571 14.0556 6.97863 14.0556C6.86927 14.0556 6.75948 14.031 6.65754 13.9807C6.40933 13.8585 6.25219 13.6059 6.25219 13.329V8.67103C6.25219 8.39416 6.40933 8.14161 6.65754 8.01941C6.90585 7.89703 7.2019 7.92625 7.42127 8.09493L10.4526 10.4238C10.6317 10.5614 10.7366 10.7743 10.7366 11C10.7366 11.2257 10.6317 11.4387 10.4527 11.5762Z" fill="#909090"/>
                </svg>`,

        pdf: `<svg class="livechat-pdf-icon" width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M31.6312 2.71948L38.934 10.332V39.2805H11.6537V39.375H39.0272V10.4278L31.6312 2.71948Z" fill="#909090"></path>
                <path d="M31.5406 2.625H11.5604V39.2805H38.9339V10.3333L31.5393 2.625" fill="#F4F4F4"></path>
                <path d="M11.3596 4.59375H2.97272V13.5542H29.354V4.59375H11.3596Z" fill="#7A7B7C"></path>
                <path d="M29.4943 13.4019H3.14328V4.43494H29.4943V13.4019Z" fill="#DD2025"></path>
                <path d="M11.8808 5.95087H10.1653V12.2509H11.5146V10.1259L11.8125 10.143C12.102 10.138 12.3888 10.0862 12.6617 9.98943C12.901 9.90713 13.1211 9.77721 13.3088 9.60749C13.4997 9.44582 13.6503 9.24177 13.7485 9.01162C13.8801 8.62902 13.9271 8.22241 13.8863 7.81987C13.8781 7.53231 13.8277 7.24752 13.7367 6.97462C13.6538 6.77762 13.5308 6.60003 13.3756 6.45315C13.2204 6.30627 13.0362 6.19332 12.835 6.12149C12.6609 6.05849 12.4811 6.01277 12.2982 5.98499C12.1596 5.96361 12.0197 5.95221 11.8795 5.95087H11.8808ZM11.6314 8.96174H11.5146V7.01924H11.7679C11.8797 7.01118 11.9919 7.02834 12.0962 7.06946C12.2004 7.11058 12.2941 7.17461 12.3703 7.2568C12.5283 7.46814 12.6126 7.72537 12.6105 7.98918C12.6105 8.31205 12.6105 8.60474 12.3192 8.8108C12.1092 8.92626 11.8703 8.97824 11.6314 8.96043" fill="#464648"></path>
                <path d="M16.4495 5.93381C16.3038 5.93381 16.162 5.94431 16.0623 5.94825L15.7499 5.95612H14.7262V12.2561H15.931C16.3915 12.2687 16.8499 12.1907 17.2803 12.0264C17.6267 11.889 17.9334 11.6676 18.1728 11.382C18.4056 11.0938 18.5727 10.7583 18.6624 10.3989C18.7655 9.99189 18.8158 9.57326 18.812 9.15337C18.8374 8.65745 18.7991 8.16032 18.6978 7.67419C18.6017 7.31635 18.4217 6.98656 18.1728 6.71212C17.9775 6.49052 17.7384 6.31177 17.4706 6.18712C17.2406 6.0807 16.9987 6.00227 16.75 5.9535C16.6512 5.93716 16.551 5.9297 16.4508 5.93119L16.4495 5.93381ZM16.2119 11.0985H16.0807V7.077H16.0977C16.3683 7.04587 16.6421 7.09469 16.8852 7.21744C17.0633 7.35961 17.2084 7.53874 17.3105 7.74244C17.4207 7.95681 17.4842 8.1921 17.4969 8.43281C17.5087 8.72156 17.4969 8.95781 17.4969 9.15337C17.5022 9.37865 17.4877 9.60395 17.4535 9.82669C17.4131 10.0554 17.3383 10.2766 17.2317 10.4829C17.1111 10.6748 16.9481 10.8364 16.7553 10.9554C16.5934 11.0602 16.4016 11.109 16.2093 11.0946" fill="#464648"></path>
                <path d="M22.8769 5.95612H19.6875V12.2561H21.0367V9.75712H22.743V8.58637H21.0367V7.12687H22.8742V5.95612" fill="#464648"></path>
                <path d="M28.5875 26.5847C28.5875 26.5847 32.7717 25.8261 32.7717 27.2554C32.7717 28.6847 30.1795 28.1033 28.5875 26.5847ZM25.4939 26.6936C24.8291 26.8405 24.1812 27.0556 23.5606 27.3355L24.0856 26.1542C24.6106 24.9729 25.1553 23.3625 25.1553 23.3625C25.7817 24.4169 26.5106 25.4069 27.3314 26.3183C26.7124 26.4106 26.099 26.5367 25.4939 26.6963V26.6936ZM23.8375 18.1624C23.8375 16.9168 24.2405 16.5769 24.5541 16.5769C24.8678 16.5769 25.2209 16.7278 25.2327 17.8093C25.1305 18.8968 24.9028 19.9688 24.5541 21.004C24.0766 20.1349 23.8294 19.158 23.8362 18.1663L23.8375 18.1624ZM17.7357 31.9646C16.4521 31.1968 20.4277 28.833 21.1482 28.7569C21.1443 28.7582 19.0797 32.7679 17.7357 31.9646ZM33.9936 27.4247C33.9805 27.2935 33.8624 25.8405 31.2768 25.9022C30.199 25.8848 29.1218 25.9608 28.0572 26.1293C27.0259 25.0903 26.1378 23.9184 25.4165 22.6446C25.8709 21.3313 26.146 19.9627 26.2342 18.5758C26.1961 17.0008 25.8194 16.0978 24.6119 16.111C23.4044 16.1241 23.2285 17.1806 23.3873 18.753C23.5429 19.8096 23.8363 20.8413 24.2601 21.8216C24.2601 21.8216 23.7023 23.5581 22.9647 25.2853C22.2271 27.0126 21.7231 27.9182 21.7231 27.9182C20.4404 28.3358 19.2329 28.9561 18.1465 29.7557C17.065 30.7624 16.6253 31.5354 17.195 32.3085C17.6858 32.9753 19.4039 33.1262 20.9395 31.1141C21.7555 30.0749 22.5009 28.9822 23.1708 27.8434C23.1708 27.8434 25.5123 27.2016 26.2407 27.0257C26.9691 26.8498 27.8498 26.7107 27.8498 26.7107C27.8498 26.7107 29.9879 28.8619 32.0498 28.7858C34.1118 28.7096 34.012 27.5533 33.9989 27.4273" fill="#DD2025"></path>
                <path d="M31.4397 2.72607V10.4344H38.833L31.4397 2.72607Z" fill="#909090"></path>
                <path d="M31.5408 2.625V10.3333H38.9341L31.5408 2.625Z" fill="#F4F4F4"></path>
                <path d="M11.7797 5.84982H10.0642V12.1498H11.4187V10.0262L11.718 10.0433C12.0075 10.0383 12.2943 9.98642 12.5672 9.8897C12.8064 9.80737 13.0265 9.67745 13.2142 9.50776C13.4038 9.34565 13.553 9.14164 13.65 8.91189C13.7816 8.52929 13.8286 8.12268 13.7878 7.72014C13.7796 7.43258 13.7292 7.14778 13.6382 6.87489C13.5553 6.67789 13.4324 6.5003 13.2771 6.35342C13.1219 6.20654 12.9378 6.09359 12.7365 6.02176C12.5617 5.95815 12.381 5.91198 12.1971 5.88395C12.0585 5.86257 11.9186 5.85116 11.7784 5.84982H11.7797ZM11.5303 8.8607H11.4135V6.9182H11.6681C11.7799 6.91014 11.8921 6.9273 11.9964 6.96842C12.1006 7.00954 12.1943 7.07356 12.2706 7.15576C12.4285 7.36709 12.5128 7.62433 12.5107 7.88814C12.5107 8.21101 12.5107 8.5037 12.2194 8.70976C12.0095 8.82521 11.7705 8.8772 11.5316 8.85939" fill="white"></path>
                <path d="M16.3486 5.83277C16.203 5.83277 16.0612 5.84327 15.9615 5.8472L15.653 5.85508H14.6293V12.1551H15.8341C16.2946 12.1677 16.7531 12.0897 17.1834 11.9254C17.5298 11.788 17.8365 11.5665 18.0759 11.281C18.3087 10.9928 18.4758 10.6573 18.5655 10.2979C18.6686 9.89085 18.7189 9.47222 18.7151 9.05233C18.7405 8.55641 18.7022 8.05928 18.6009 7.57314C18.5048 7.21531 18.3248 6.88551 18.0759 6.61108C17.8806 6.38948 17.6415 6.21073 17.3737 6.08608C17.1437 5.97966 16.9018 5.90122 16.6531 5.85245C16.5543 5.83612 16.4541 5.82865 16.3539 5.83014L16.3486 5.83277ZM16.115 10.9975H15.9838V6.97595H16.0008C16.2714 6.94482 16.5452 6.99364 16.7883 7.11639C16.9664 7.25857 17.1115 7.43769 17.2136 7.64139C17.3238 7.85577 17.3873 8.09106 17.4 8.33177C17.4118 8.62052 17.4 8.85677 17.4 9.05233C17.4053 9.2776 17.3908 9.50291 17.3566 9.72564C17.3162 9.95432 17.2414 10.1756 17.1348 10.3819C17.0142 10.5737 16.8512 10.7354 16.6584 10.8544C16.4965 10.9591 16.3047 11.008 16.1124 10.9935" fill="white"></path>
                <path d="M22.7758 5.85507H19.5864V12.1551H20.9356V9.65607H22.6419V8.48532H20.9356V7.02582H22.7731V5.85507" fill="white"></path>
                </svg>`,
        doc: `<svg class="livechat-doc-icon" width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M37.8079 3.9375H12.7378C12.5324 3.93733 12.3289 3.97763 12.139 4.05609C11.9491 4.13455 11.7766 4.24965 11.6312 4.39481C11.4858 4.53996 11.3704 4.71233 11.2916 4.90208C11.2128 5.09183 11.1722 5.29524 11.172 5.50069V12.4688L25.7001 16.7344L39.375 12.4688V5.50069C39.3748 5.29513 39.3341 5.09161 39.2553 4.90178C39.1764 4.71194 39.0609 4.53951 38.9154 4.39434C38.7698 4.24917 38.5971 4.1341 38.4071 4.05571C38.2171 3.97733 38.0134 3.93716 37.8079 3.9375Z" fill="#41A5EE"/>
                <path d="M39.375 12.4688H11.172V21L25.7001 23.5594L39.375 21V12.4688Z" fill="#2B7CD3"/>
                <path d="M11.172 21V29.5312L24.8456 31.2375L39.375 29.5312V21H11.172Z" fill="#185ABD"/>
                <path d="M12.7378 38.0625H37.8066C38.0122 38.063 38.216 38.023 38.4062 37.9447C38.5964 37.8664 38.7692 37.7513 38.9149 37.6061C39.0606 37.4609 39.1762 37.2884 39.2552 37.0985C39.3341 36.9086 39.3748 36.705 39.375 36.4993V29.5312H11.172V36.4993C11.1722 36.7048 11.2128 36.9082 11.2916 37.0979C11.3704 37.2877 11.4858 37.46 11.6312 37.6052C11.7766 37.7504 11.9491 37.8654 12.139 37.9439C12.3289 38.0224 12.5324 38.0627 12.7378 38.0625Z" fill="#103F91"/>
                <path opacity="0.1" d="M21.5696 10.7625H11.172V32.0906H21.5696C21.9839 32.0886 22.3808 31.9234 22.6741 31.6308C22.9674 31.3382 23.1336 30.9418 23.1368 30.5275V12.3257C23.1336 11.9114 22.9674 11.515 22.6741 11.2224C22.3808 10.9298 21.9839 10.7646 21.5696 10.7625Z" fill="black"/>
                <path opacity="0.2" d="M20.7152 11.6156H11.172V32.9438H20.7152C21.1295 32.9417 21.5263 32.7765 21.8196 32.4839C22.113 32.1913 22.2792 31.7949 22.2823 31.3806V13.1788C22.2792 12.7645 22.113 12.3681 21.8196 12.0755C21.5263 11.7829 21.1295 11.6177 20.7152 11.6156Z" fill="black"/>
                <path opacity="0.2" d="M20.7152 11.6156H11.172V31.2375H20.7152C21.1295 31.2354 21.5263 31.0702 21.8196 30.7776C22.113 30.485 22.2792 30.0886 22.2823 29.6743V13.1788C22.2792 12.7645 22.113 12.3681 21.8196 12.0755C21.5263 11.7829 21.1295 11.6177 20.7152 11.6156Z" fill="black"/>
                <path opacity="0.2" d="M19.8607 11.6156H11.172V31.2375H19.8607C20.2751 31.2354 20.6719 31.0702 20.9652 30.7776C21.2585 30.485 21.4248 30.0886 21.4279 29.6743V13.1788C21.4248 12.7645 21.2585 12.3681 20.9652 12.0755C20.6719 11.7829 20.2751 11.6177 19.8607 11.6156Z" fill="black"/>
                <path d="M4.19212 11.6156H19.8608C20.2758 11.6153 20.674 11.7797 20.9679 12.0729C21.2617 12.366 21.4272 12.7638 21.4279 13.1788V28.8212C21.4272 29.2362 21.2617 29.634 20.9679 29.9272C20.674 30.2203 20.2758 30.3847 19.8608 30.3844H4.19212C3.98656 30.3847 3.78295 30.3446 3.59291 30.2662C3.40288 30.1878 3.23016 30.0727 3.08462 29.9275C2.93909 29.7824 2.82358 29.6099 2.74472 29.4201C2.66585 29.2303 2.62517 29.0268 2.625 28.8212V13.1788C2.62517 12.9733 2.66585 12.7697 2.74472 12.5799C2.82358 12.3901 2.93909 12.2176 3.08462 12.0725C3.23016 11.9273 3.40288 11.8122 3.59291 11.7338C3.78295 11.6555 3.98656 11.6153 4.19212 11.6156Z" fill="url(#paint0_linear)"/>
                <path d="M9.05627 23.6093C9.08645 23.8508 9.10745 24.0608 9.11664 24.2406H9.15339C9.16651 24.0699 9.19539 23.8639 9.2387 23.6237C9.28201 23.3835 9.32008 23.1801 9.35551 23.0134L11.0027 15.9167H13.1342L14.8405 22.9071C14.9398 23.3395 15.0109 23.7779 15.0531 24.2196H15.082C15.1133 23.7896 15.1725 23.3622 15.2591 22.9399L16.6228 15.9075H18.5614L16.1674 26.0768H13.9007L12.2771 19.3489C12.2299 19.1546 12.1765 18.9018 12.117 18.5903C12.0575 18.2788 12.0208 18.0513 12.0068 17.9078H11.9792C11.9608 18.0731 11.9241 18.3186 11.869 18.6441C11.8138 18.9709 11.7705 19.2111 11.7377 19.3686L10.2113 26.0807H7.90652L5.49939 15.9167H7.46814L8.95258 23.0278C8.99688 23.2198 9.03149 23.4138 9.05627 23.6093Z" fill="white"/>
                <defs>
                <linearGradient id="paint0_linear" x1="5.89837" y1="10.3871" x2="18.1545" y2="31.6129" gradientUnits="userSpaceOnUse">
                <stop stop-color="#2368C4"/>
                <stop offset="0.5" stop-color="#1A5DBE"/>
                <stop offset="1" stop-color="#1146AC"/>
                </linearGradient>
                </defs>
                </svg>`,

        txt: `<svg class="livechat-txt-icon" width="32" height="42" viewBox="0 0 32 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M9.1875 18.375C8.8394 18.375 8.50556 18.5133 8.25942 18.7594C8.01328 19.0056 7.875 19.3394 7.875 19.6875C7.875 20.0356 8.01328 20.3694 8.25942 20.6156C8.50556 20.8617 8.8394 21 9.1875 21H22.3125C22.6606 21 22.9944 20.8617 23.2406 20.6156C23.4867 20.3694 23.625 20.0356 23.625 19.6875C23.625 19.3394 23.4867 19.0056 23.2406 18.7594C22.9944 18.5133 22.6606 18.375 22.3125 18.375H9.1875ZM7.875 24.9375C7.875 24.5894 8.01328 24.2556 8.25942 24.0094C8.50556 23.7633 8.8394 23.625 9.1875 23.625H22.3125C22.6606 23.625 22.9944 23.7633 23.2406 24.0094C23.4867 24.2556 23.625 24.5894 23.625 24.9375C23.625 25.2856 23.4867 25.6194 23.2406 25.8656C22.9944 26.1117 22.6606 26.25 22.3125 26.25H9.1875C8.8394 26.25 8.50556 26.1117 8.25942 25.8656C8.01328 25.6194 7.875 25.2856 7.875 24.9375ZM7.875 30.1875C7.875 29.8394 8.01328 29.5056 8.25942 29.2594C8.50556 29.0133 8.8394 28.875 9.1875 28.875H14.4375C14.7856 28.875 15.1194 29.0133 15.3656 29.2594C15.6117 29.5056 15.75 29.8394 15.75 30.1875C15.75 30.5356 15.6117 30.8694 15.3656 31.1156C15.1194 31.3617 14.7856 31.5 14.4375 31.5H9.1875C8.8394 31.5 8.50556 31.3617 8.25942 31.1156C8.01328 30.8694 7.875 30.5356 7.875 30.1875Z" fill="black"/>
                <path d="M19.6875 0H5.25C3.85761 0 2.52226 0.553124 1.53769 1.53769C0.553123 2.52226 0 3.85761 0 5.25V36.75C0 38.1424 0.553123 39.4777 1.53769 40.4623C2.52226 41.4469 3.85761 42 5.25 42H26.25C27.6424 42 28.9777 41.4469 29.9623 40.4623C30.9469 39.4777 31.5 38.1424 31.5 36.75V11.8125L19.6875 0ZM19.6875 2.625V7.875C19.6875 8.91929 20.1023 9.92081 20.8408 10.6592C21.5792 11.3977 22.5807 11.8125 23.625 11.8125H28.875V36.75C28.875 37.4462 28.5984 38.1139 28.1062 38.6062C27.6139 39.0984 26.9462 39.375 26.25 39.375H5.25C4.55381 39.375 3.88613 39.0984 3.39384 38.6062C2.90156 38.1139 2.625 37.4462 2.625 36.75V5.25C2.625 4.55381 2.90156 3.88613 3.39384 3.39384C3.88613 2.90156 4.55381 2.625 5.25 2.625H19.6875Z" fill="black"/>
                </svg>`,

        excel: `<svg width="42" height="42" viewBox="0 0 42 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M25.7001 20.1469L11.172 17.5875V36.4993C11.1722 36.7048 11.2128 36.9082 11.2916 37.0979C11.3704 37.2877 11.4858 37.46 11.6312 37.6052C11.7766 37.7503 11.9491 37.8654 12.139 37.9439C12.3289 38.0224 12.5324 38.0627 12.7378 38.0625H37.8066C38.0122 38.063 38.216 38.023 38.4062 37.9447C38.5964 37.8663 38.7692 37.7513 38.9149 37.6061C39.0606 37.4609 39.1762 37.2884 39.2552 37.0985C39.3341 36.9086 39.3748 36.705 39.375 36.4993V29.5312L25.7001 20.1469Z" fill="#185C37"/>
                    <path d="M25.7001 3.9375H12.7378C12.5324 3.93733 12.3289 3.97762 12.139 4.05609C11.9491 4.13455 11.7766 4.24965 11.6312 4.3948C11.4858 4.53996 11.3704 4.71233 11.2916 4.90208C11.2128 5.09183 11.1722 5.29524 11.172 5.50069V12.4688L25.7001 21L33.3926 23.5594L39.375 21V12.4688L25.7001 3.9375Z" fill="#21A366"/>
                    <path d="M11.172 12.4688H25.7001V21H11.172V12.4688Z" fill="#107C41"/>
                    <path opacity="0.1" d="M21.5696 10.7625H11.172V32.0906H21.5696C21.9839 32.0886 22.3807 31.9233 22.6741 31.6308C22.9674 31.3382 23.1336 30.9418 23.1367 30.5275V12.3257C23.1336 11.9114 22.9674 11.515 22.6741 11.2224C22.3807 10.9298 21.9839 10.7646 21.5696 10.7625Z" fill="black"/>
                    <path opacity="0.2" d="M20.7152 11.6156H11.172V32.9438H20.7152C21.1295 32.9417 21.5263 32.7765 21.8196 32.4839C22.113 32.1913 22.2792 31.7949 22.2823 31.3806V13.1788C22.2792 12.7645 22.113 12.3681 21.8196 12.0755C21.5263 11.7829 21.1295 11.6177 20.7152 11.6156Z" fill="black"/>
                    <path opacity="0.2" d="M20.7152 11.6156H11.172V31.2375H20.7152C21.1295 31.2354 21.5263 31.0702 21.8196 30.7776C22.113 30.485 22.2792 30.0886 22.2823 29.6743V13.1788C22.2792 12.7645 22.113 12.3681 21.8196 12.0755C21.5263 11.7829 21.1295 11.6177 20.7152 11.6156Z" fill="black"/>
                    <path opacity="0.2" d="M19.8607 11.6156H11.172V31.2375H19.8607C20.2751 31.2354 20.6719 31.0702 20.9652 30.7776C21.2585 30.485 21.4248 30.0886 21.4279 29.6743V13.1788C21.4248 12.7645 21.2585 12.3681 20.9652 12.0755C20.6719 11.7829 20.2751 11.6177 19.8607 11.6156Z" fill="black"/>
                    <path d="M4.19212 11.6156H19.8608C20.2758 11.6153 20.674 11.7797 20.9679 12.0729C21.2617 12.366 21.4272 12.7638 21.4279 13.1788V28.8212C21.4272 29.2362 21.2617 29.634 20.9679 29.9272C20.674 30.2203 20.2758 30.3847 19.8608 30.3844H4.19212C3.98656 30.3847 3.78295 30.3446 3.59291 30.2662C3.40288 30.1878 3.23016 30.0727 3.08462 29.9275C2.93909 29.7824 2.82358 29.6099 2.74472 29.4201C2.66585 29.2303 2.62517 29.0268 2.625 28.8212V13.1788C2.62517 12.9733 2.66585 12.7697 2.74472 12.5799C2.82358 12.3901 2.93909 12.2176 3.08462 12.0725C3.23016 11.9273 3.40288 11.8122 3.59291 11.7338C3.78295 11.6555 3.98656 11.6153 4.19212 11.6156Z" fill="url(#paint0_linear)"/>
                    <path d="M7.4812 26.0833L10.7769 20.9856L7.75814 15.9167H10.1823L11.8295 19.1625C11.9818 19.4696 12.092 19.698 12.1419 19.8502H12.1642C12.2718 19.6035 12.386 19.3659 12.5055 19.1336L14.2668 15.9219H16.4981L13.4019 20.9619L16.5768 26.0872H14.2025L12.2994 22.5291C12.211 22.3761 12.1359 22.2158 12.075 22.05H12.0435C11.988 22.2115 11.914 22.3661 11.823 22.5107L9.86339 26.0833H7.4812Z" fill="white"/>
                    <path d="M37.8079 3.9375H25.7001V12.4688H39.375V5.50069C39.3748 5.29513 39.3342 5.09161 39.2553 4.90178C39.1764 4.71194 39.0609 4.53951 38.9154 4.39434C38.7698 4.24917 38.5971 4.1341 38.4071 4.05571C38.2171 3.97733 38.0134 3.93716 37.8079 3.9375Z" fill="#33C481"/>
                    <path d="M25.7001 21H39.375V29.5312H25.7001V21Z" fill="#107C41"/>
                    <defs>
                    <linearGradient id="paint0_linear" x1="5.89837" y1="10.3871" x2="18.1545" y2="31.6129" gradientUnits="userSpaceOnUse">
                    <stop stop-color="#18884F"/>
                    <stop offset="0.5" stop-color="#117E43"/>
                    <stop offset="1" stop-color="#0B6631"/>
                    </linearGradient>
                    </defs>
                    </svg>`,

        cross: `<svg width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect width="18" height="18" fill="#E5E5E5"/>
                <g clip-path="url(#clip0)">
                <rect width="1440" height="760" transform="translate(-628 -477)" fill="white"/>
                <rect x="-551" y="-421" width="1363" height="704" fill="#FAFAFA"/>
                <rect x="-542" y="-253" width="1344" height="468" fill="white"/>
                <path d="M-542 8H803" stroke="#E6E6E6"/>
                <rect opacity="0.3" x="-628" y="-477" width="1440" height="760" fill="black"/>
                <rect x="-110" y="-390" width="405" height="503" rx="8" fill="white"/>
                <rect x="-95" y="-8" width="120" height="34" rx="5" fill="#005CEF" fill-opacity="0.05"/>
                <circle id="livechat_cross_btn" cx="9" cy="9" r="9" fill="red"/>
                <path d="M13.091 5.92025L12.0799 4.90918L9.00009 7.98901L5.92025 4.90918L4.90918 5.92025L7.98901 9.00009L4.90918 12.0799L5.92025 13.091L9.00009 10.0112L12.0799 13.091L13.091 12.0799L10.0112 9.00009L13.091 5.92025Z" fill="white"/>
                </g>
                <defs>
                <clipPath id="clip0">
                <rect width="1440" height="760" fill="white" transform="translate(-628 -477)"/>
                </clipPath>
                </defs>
                </svg>`,

        session_accept: `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M8.00001 1.59998C11.5346 1.59998 14.4 4.46535 14.4 7.99998C14.4 11.5346 11.5346 14.4 8.00001 14.4C4.46538 14.4 1.60001 11.5346 1.60001 7.99998C1.60001 4.46535 4.46538 1.59998 8.00001 1.59998ZM8.00001 2.39998C4.90721 2.39998 2.40001 4.90718 2.40001 7.99998C2.40001 11.0928 4.90721 13.6 8.00001 13.6C11.0928 13.6 13.6 11.0928 13.6 7.99998C13.6 4.90718 11.0928 2.39998 8.00001 2.39998ZM10.6867 6.11713C10.8256 6.25599 10.841 6.47153 10.733 6.62742L10.6867 6.68282L7.48285 9.88671C7.344 10.0256 7.12846 10.041 6.97256 9.933L6.91716 9.88671L5.31716 8.28671C5.16095 8.1305 5.16095 7.87724 5.31716 7.72103C5.45602 7.58217 5.67156 7.56675 5.82745 7.67474L5.88285 7.72103L7.20001 9.03838L10.1211 6.11713C10.2773 5.96092 10.5305 5.96092 10.6867 6.11713Z" fill="#10B981"/>
                        </svg>`,

        session_reject: `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M8.00001 1.59998C11.5346 1.59998 14.4 4.46535 14.4 7.99998C14.4 11.5346 11.5346 14.4 8.00001 14.4C4.46538 14.4 1.60001 11.5346 1.60001 7.99998C1.60001 4.46535 4.46538 1.59998 8.00001 1.59998ZM8.00001 2.39998C4.90721 2.39998 2.40001 4.90718 2.40001 7.99998C2.40001 11.0928 4.90721 13.6 8.00001 13.6C11.0928 13.6 13.6 11.0928 13.6 7.99998C13.6 4.90718 11.0928 2.39998 8.00001 2.39998ZM6.24755 5.69095L6.30295 5.73723L8.00001 7.43429L9.69706 5.73723C9.83592 5.59838 10.0515 5.58295 10.2073 5.69095L10.2627 5.73723C10.4016 5.87609 10.417 6.09163 10.309 6.24752L10.2627 6.30292L8.56569 7.99998L10.2627 9.69703C10.4016 9.83589 10.417 10.0514 10.309 10.2073L10.2627 10.2627C10.1239 10.4016 9.90835 10.417 9.75246 10.309L9.69706 10.2627L8.00001 8.56566L6.30295 10.2627C6.1641 10.4016 5.94856 10.417 5.79266 10.309L5.73726 10.2627C5.59841 10.1239 5.58298 9.90832 5.69098 9.75243L5.73726 9.69703L7.43432 7.99998L5.73726 6.30292C5.59841 6.16407 5.58298 5.94853 5.69098 5.79263L5.73726 5.73723C5.87612 5.59838 6.09166 5.58295 6.24755 5.69095Z" fill="#FF0000"/>
                        </svg>`,

        session_pending: `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M8.00001 1.59998C11.5346 1.59998 14.4 4.46535 14.4 7.99998C14.4 11.5346 11.5346 14.4 8.00001 14.4C4.46538 14.4 1.60001 11.5346 1.60001 7.99998C1.60001 4.46535 4.46538 1.59998 8.00001 1.59998ZM8.00001 2.39998C4.90721 2.39998 2.40001 4.90718 2.40001 7.99998C2.40001 11.0928 4.90721 13.6 8.00001 13.6C11.0928 13.6 13.6 11.0928 13.6 7.99998C13.6 4.90718 11.0928 2.39998 8.00001 2.39998ZM7.60001 3.99998C7.79637 3.99998 7.95969 4.14148 7.99356 4.32808L8.00001 4.39998V7.99998H10C10.2209 7.99998 10.4 8.17906 10.4 8.39998C10.4 8.59634 10.2585 8.75966 10.0719 8.79353L10 8.79998H7.60001C7.40364 8.79998 7.24032 8.65848 7.20645 8.47188L7.20001 8.39998V4.39998C7.20001 4.17906 7.37909 3.99998 7.60001 3.99998Z" fill="#F9600A"/>
                        </svg>`,

        session_exit: `<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M8.22236 10.8906C8.22236 10.645 8.42147 10.4459 8.66708 10.4459C8.91269 10.4459 9.1118 10.645 9.1118 10.8906V12.2248C9.1118 12.716 8.71358 13.1142 8.22236 13.1142H3.55277C3.06155 13.1142 2.66333 12.716 2.66333 12.2248V3.77506C2.66333 3.28384 3.06155 2.88562 3.55277 2.88562H8.22236C8.71358 2.88562 9.1118 3.28384 9.1118 3.77506V5.10923C9.1118 5.35484 8.91269 5.55395 8.66708 5.55395C8.42147 5.55395 8.22236 5.35484 8.22236 5.10923V3.99743C8.22236 3.87462 8.1228 3.77506 8 3.77506H3.77514C3.65233 3.77506 3.55277 3.87462 3.55277 3.99743V12.0024C3.55277 12.1252 3.65233 12.2248 3.77514 12.2248H8C8.1228 12.2248 8.22236 12.1252 8.22236 12.0024V10.8906ZM10.4704 6.07389L13.1388 7.85277V7.85233C13.2625 7.93481 13.3368 8.07366 13.3368 8.22234C13.3368 8.37102 13.2625 8.50986 13.1388 8.59235L10.4704 10.3712C10.3973 10.42 10.3114 10.446 10.2236 10.446C9.97939 10.4426 9.78223 10.2454 9.77888 10.0012V8.88942H5.77638C5.53805 8.88942 5.31783 8.76228 5.19867 8.55588C5.0795 8.34948 5.0795 8.09519 5.19867 7.8888C5.31783 7.6824 5.53805 7.55526 5.77638 7.55526H9.77888V6.44345C9.77902 6.27948 9.86937 6.12888 10.014 6.0516C10.1586 5.97432 10.334 5.98288 10.4704 6.07389Z" fill="#0254D7"/>
                        <mask id="mask0" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="2" y="2" width="12" height="12">
                        <path fill-rule="evenodd" clip-rule="evenodd" d="M8.22236 10.8906C8.22236 10.645 8.42147 10.4459 8.66708 10.4459C8.91269 10.4459 9.1118 10.645 9.1118 10.8906V12.2248C9.1118 12.716 8.71358 13.1142 8.22236 13.1142H3.55277C3.06155 13.1142 2.66333 12.716 2.66333 12.2248V3.77506C2.66333 3.28384 3.06155 2.88562 3.55277 2.88562H8.22236C8.71358 2.88562 9.1118 3.28384 9.1118 3.77506V5.10923C9.1118 5.35484 8.91269 5.55395 8.66708 5.55395C8.42147 5.55395 8.22236 5.35484 8.22236 5.10923V3.99743C8.22236 3.87462 8.1228 3.77506 8 3.77506H3.77514C3.65233 3.77506 3.55277 3.87462 3.55277 3.99743V12.0024C3.55277 12.1252 3.65233 12.2248 3.77514 12.2248H8C8.1228 12.2248 8.22236 12.1252 8.22236 12.0024V10.8906ZM10.4704 6.07389L13.1388 7.85277V7.85233C13.2625 7.93481 13.3368 8.07366 13.3368 8.22234C13.3368 8.37102 13.2625 8.50986 13.1388 8.59235L10.4704 10.3712C10.3973 10.42 10.3114 10.446 10.2236 10.446C9.97939 10.4426 9.78223 10.2454 9.77888 10.0012V8.88942H5.77638C5.53805 8.88942 5.31783 8.76228 5.19867 8.55588C5.0795 8.34948 5.0795 8.09519 5.19867 7.8888C5.31783 7.6824 5.53805 7.55526 5.77638 7.55526H9.77888V6.44345C9.77902 6.27948 9.86937 6.12888 10.014 6.0516C10.1586 5.97432 10.334 5.98288 10.4704 6.07389Z" fill="white"/>
                        </mask>
                        <g mask="url(#mask0)">
                        </g>
                        </svg>`,

        session_no_response: `<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <g clip-path="url(#clip0)">
                                <path d="M10.4001 17.6C5.98175 17.6 2.40015 14.0184 2.40015 9.59998C2.40015 5.18158 5.98175 1.59998 10.4001 1.59998C14.8185 1.59998 18.4001 5.18158 18.4001 9.59998C18.4001 14.0184 14.8185 17.6 10.4001 17.6ZM10.4001 16C12.0975 16 13.7254 15.3257 14.9256 14.1255C16.1259 12.9252 16.8001 11.2974 16.8001 9.59998C16.8001 7.90259 16.1259 6.27472 14.9256 5.07449C13.7254 3.87426 12.0975 3.19998 10.4001 3.19998C8.70276 3.19998 7.0749 3.87426 5.87466 5.07449C4.67443 6.27472 4.00015 7.90259 4.00015 9.59998C4.00015 11.2974 4.67443 12.9252 5.87466 14.1255C7.0749 15.3257 8.70276 16 10.4001 16ZM9.60015 12H11.2001V13.6H9.60015V12ZM11.2001 10.684V11.2H9.60015V9.99998C9.60015 9.7878 9.68443 9.58432 9.83446 9.43429C9.98449 9.28426 10.188 9.19998 10.4001 9.19998C10.6274 9.19996 10.85 9.13541 11.042 9.01384C11.234 8.89227 11.3876 8.71867 11.4848 8.51324C11.582 8.30782 11.6188 8.07901 11.5911 7.85345C11.5633 7.62789 11.4721 7.41484 11.328 7.2391C11.1839 7.06337 10.9929 6.93216 10.7771 6.86075C10.5614 6.78934 10.3298 6.78067 10.1093 6.83574C9.8888 6.89081 9.68848 7.00736 9.53164 7.17183C9.3748 7.3363 9.26789 7.54192 9.22335 7.76478L7.65375 7.45038C7.75105 6.96404 7.97575 6.51227 8.30488 6.14124C8.63401 5.77022 9.05576 5.49324 9.52702 5.33863C9.99827 5.18402 10.5021 5.15732 10.9871 5.26127C11.472 5.36521 11.9207 5.59607 12.2872 5.93024C12.6537 6.2644 12.9249 6.6899 13.073 7.16323C13.2212 7.63655 13.241 8.14073 13.1304 8.62422C13.0199 9.10771 12.7829 9.55317 12.4438 9.91507C12.1046 10.277 11.6755 10.5423 11.2001 10.684Z" fill="#334155"/>
                                </g>
                                <defs>
                                <clipPath id="clip0">
                                <rect width="19.2" height="19.2" fill="white" transform="translate(0.800049)"/>
                                </clipPath>
                                </defs>
                                </svg>`,
    },
    location: window.location.pathname,
    auto_chat_disposal: {
        enabled: true,
        user_terminates_chat: {
            enabled: true,
            dispose_time: 2,
        },
        session_inactivity: {
            enabled: true,
            dispose_time: 5,
            inactivity_time: 5,
        },
    },
    guest_agent_timer: 60,
    max_guest_agent: 1,
    current_guest_sessions: [],
    voip: {
        is_enabled: false,
        voip_type: 'none',
        from_customer_end: false,
        request_from_customer: false,
        call_initiated: false,
        meeting_id: null,
        session_id: null,
        request_status: null,
        from_customer: {},
        customer_requests: [],
        guest_agent: {
            requests: [],
            requests_map: {},
        },
    },
    unread_reply_message_count: 0,
    unread_reply_message_ids: [],
    is_unread_message_count_synced: false,
    customer_details: {},
    rtl_languages: ['ar', 'he', 'ku', 'ur', 'fa'],
    cobrowsing: {
        is_enabled: false,
        is_eligible: false,
        status: 'none',
        meeting_id: null,
        session_id: null,
        cobrowse_session_id: null,
        guest_requests: []
    },
    chat_escalation_status: {},
    current_customer_tab: "common",
    ongoing_email_sessions: [],
    current_assigned_customer_count: -1,
};

function initialize_console(
    agent_websocket_token,
    assigned_customer_count,
    agent_full_name,
    agent_username,
    current_status,
    livechat_theme_color,
    livechat_theme_color_light,
    livechat_theme_color_light_one,
    canned_arr,
    is_notification_enable,
    blacklisted_keywords,
    sender_websocket_token,
    customer_blacklisted_keywords,
) {
    if (is_livechat_page()) {
        update_console_state_variables(
            assigned_customer_count,
            agent_full_name,
            agent_username,
            livechat_theme_color,
            livechat_theme_color_light,
            livechat_theme_color_light_one,
            current_status
        );
        update_canned_response_arr_and_blacklisted_keywords(canned_arr, blacklisted_keywords, customer_blacklisted_keywords);
        update_is_notification_enabled(is_notification_enable);
        update_agent_websocket_token(agent_websocket_token);
        set_sender_websocket_token(sender_websocket_token);
        create_agent_socket();
        open_local_db();
        update_customer_list();
        setInterval(update_customer_list, 5000);
        setInterval(update_message_count_to_server, 5000);
        update_guest_session_timer();
        setInterval(update_guest_session_timer, 1000);
        update_guest_agent_status();
        setInterval(update_guest_agent_status, 5000);
        continuous_guest_agent_timer();
        setInterval(continuous_guest_agent_timer, 1000);
        state.cobrowsing.is_enabled = IS_COBROWSING_ENABLED;
        set_cobrowsing_info({
            status: COBROWSING_INFO.status,
            meeting_id: COBROWSING_INFO.meeting_id,
            session_id: COBROWSING_INFO.session_id,
        })

        if (['accepted', 'ongoing'].includes(COBROWSING_INFO.status)) {
            set_cobrowse_session_id(COBROWSING_INFO.cobrowse_session_id);
        }        
    } else {
        update_is_notification_enabled(is_notification_enable);
        update_agent_websocket_token(agent_websocket_token);
        update_agent_current_status(current_status);
        set_sender_websocket_token(sender_websocket_token);
        create_agent_socket();
        open_local_db();
        update_guest_session_timer();
        setInterval(update_guest_session_timer, 1000);
        continuous_guest_agent_timer();
        setInterval(continuous_guest_agent_timer, 1000);

        if (!window.location.href.includes('internal-chat')) {
            update_document_title(localStorage.getItem(`unread_threads-${state.agent.username}`));
        }
    }

    setTimeout(() => {
        if ((state.voip.is_enabled && window.IS_MEETING_END_REQUIRED) || (window.VC_ENABLED && window.IS_MEETING_END_REQUIRED)) {
            cancel_meeting();
        }
    }, 1000);

    check_newchat_for_agent();
    setInterval(check_newchat_for_agent, 5000);

}

function update_console_state_variables(
    customer_count,
    agent_full_name,
    agent_username,
    livechat_theme_color,
    livechat_theme_color_light,
    livechat_theme_color_light_one,
    current_status
) {
    state.customer_list.count = customer_count;
    state.agent.name = agent_full_name;
    state.agent.username = agent_username;
    state.agent.current_status = current_status;
    state.theme_color.one = livechat_theme_color;
    state.theme_color.two = livechat_theme_color_light;
    state.theme_color.three = livechat_theme_color_light_one;
    state.auto_chat_disposal.enabled = window.AUTO_CHAT_DISPOSAL_ENABLED;
    state.auto_chat_disposal.user_terminates_chat.enabled = window.USER_TERMINATES_CHAT_ENABLED;
    state.auto_chat_disposal.user_terminates_chat.dispose_time = parseInt(
        window.USER_TERMINATES_CHAT_DISPOSAL_TIME
    );
    state.auto_chat_disposal.session_inactivity.enabled = window.SESSION_INACTIVITY_ENABLED;
    state.auto_chat_disposal.session_inactivity.inactivity_time = parseInt(
        window.SESSION_INACTIVITY_CHAT_DISPOSAL_TIME
    );
    state.guest_agent_timer = parseInt(window.GUEST_AGENT_TIMER);
    state.max_guest_agent = parseInt(window.MAX_GUEST_AGENT);

    if(window.CURRENT_GUEST_SESSIONS == '[]') {
        set_current_guest_sessions([]);
    } else {
        var current_guest_sessions = (window.CURRENT_GUEST_SESSIONS).split(',');
        for(let i =0;i<current_guest_sessions.length;i++){
            current_guest_sessions[i] = current_guest_sessions[i].replace('[','');
            current_guest_sessions[i] = current_guest_sessions[i].replace(']','');
            current_guest_sessions[i] = current_guest_sessions[i].replaceAll('&#x27;','');
            current_guest_sessions[i] = current_guest_sessions[i].trim();
        } 
            set_current_guest_sessions(current_guest_sessions);
    }

    state.voip.is_enabled = window.IS_VOIP_ENABLED;
    state.voip.voip_type = window.VOIP_TYPE;
    state.voip.from_customer_end = window.window.IS_VOIP_FROM_CUSTOMER_END_ENABLED;
    state.voip.call_initiated = window.IS_MEETING_STARTED;

    if (state.voip.call_initiated) {
        state.voip.meeting_id = window.MEETING_ID;
        state.voip.session_id = window.MEETING_SESSION_ID;
        state.voip.request_status = 'ongoing';
    }

    state.agent.bot_id = window.BOT_ID;
}

function update_is_notification_enabled(is_notification_enable) {
    if (is_notification_enable != undefined && is_notification_enable != null) {
        state.agent.is_notification_enable = is_notification_enable;
        localStorage.setItem("is_notification_enable", is_notification_enable);
    } else {
        state.agent.is_notification_enable = localStorage.getItem("is_notification_enable");
    }
}

function update_agent_current_status(current_status) {
    state.agent.current_status = current_status;
}

function update_customer_list() {
    let json_string = JSON.stringify({
        assigned_customer_count: state.customer_list.count,
    });
    json_string = EncryptVariable(json_string);
    json_string = encodeURIComponent(json_string);

    var csrf_token = getCsrfToken();
    var xhttp = new XMLHttpRequest();
    var params = "json_string=" + json_string;
    xhttp.open("POST", "/livechat/update-customer-list/", true);
    xhttp.setRequestHeader("X-CSRFToken", csrf_token); 
    xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhttp.onreadystatechange = async function () {
        if (this.readyState == 4 && this.status == 200) {
            let response = JSON.parse(this.responseText);
            response = custom_decrypt(response);
            response = JSON.parse(response);

            if (response.status_code == "200") {
                state.cobrowsing.guest_requests = response.cobrowsing_guest_info;
                state.customer_list.count = response.assigned_customer_count;
                localStorage.setItem("assigned_customer_count", state.customer_list.count);

                const unread_threads = get_unread_threads(response.unread_threads);
                update_document_title(unread_threads);

                if (state.customer_list.count == 0) return;
                await add_translated_previous_messages(response);
                add_customer_list(response, state.agent.name);

                if(window.IS_LIVECHAT_ENABLED_FOR_EMAIL) {
                    add_email_customer_list(response, state.agent.name);
                }
                // removes session from guest agent if primary agent logs out
                if(get_session_id() && !state.ongoing_session_ids.includes(get_session_id())) {
                    $('#livechat-request-status-modal').modal('hide');
                    go_to_chat(get_session_id(), true);
                }

                focus_on_current_chat();

                add_click_event();

                show_all_customer_status(response);
                set_inactivity_timer_all(response);
                set_voip_status();
                set_cobrowsing_status();
                check_edit_customer_info_btn();
            } else if (response.status_code == "300") {
                state.cobrowsing.guest_requests = []
                state.customer_list.count = response.assigned_customer_count;
                localStorage.setItem("assigned_customer_count", state.customer_list.count);
                state.ongoing_session_ids = [];
                state.ongoing_email_sessions = [];
                localStorage.setItem("ongoing_session_ids", JSON.stringify(state.ongoing_session_ids));
                // removes session from guest agent if primary agent logs out
                if(!response.assigned_customer_count) {
                    if(get_session_id()) {
                        $('#livechat-request-status-modal').modal('hide');
                        go_to_chat(get_session_id(), true);
                    }
                }
                update_no_active_customer_div();
                if(window.IS_LIVECHAT_ENABLED_FOR_EMAIL) {
                    update_no_active_email_customer_div();
                }
                localStorage.setItem(`unread_threads-${state.agent.username}`, 0);
                update_document_title(0);
            } else {
                showToast(
                    "Unable to assign due to some internal server error. Kindly report the same",
                    2000
                );
                console.log("Please report this. ", response["status_message"]);
            }
        }
    };
    xhttp.send(params);
}

function check_user_has_assigned_chats() {
    let params = "";
    let xhttp = new XMLHttpRequest();
    let csrf_token = getCsrfToken();

    xhttp.open("POST", "/livechat/check-customers-are-assigned/", true);
    xhttp.setRequestHeader("X-CSRFToken", csrf_token);
    xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            let response = JSON.parse(this.responseText);
            response = custom_decrypt(response);
            response = JSON.parse(response);
            if (response["status_code"] == "200") {
                if(response["is_customer_assigned"]) {
                    alert("Please resolve all the assigned chats before logging out.");
                } else {
                    showToast("Logging you out.", 3000);
                    perform_user_logout();
                }
            } 
        }
    };
    xhttp.send(params);
}

function perform_user_logout() {
    let params = "";
    let xhttp = new XMLHttpRequest();
    let csrf_token = getCsrfToken();

    xhttp.open("POST", "/chat/logout/", true);
    xhttp.setRequestHeader("X-CSRFToken", csrf_token);
    xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            
        }
    };
    xhttp.send(params);
}

function update_document_title(unread_threads) {
    if (window.location.href.includes('internal-chat')) return;
    
    const notification_pattern = /^\(\d+\)/;

    if (notification_pattern.test(document.title)) {
        document.title = document.title.replace(notification_pattern, "");
    }

    if (unread_threads && unread_threads != 0) {
        document.title = `(${unread_threads}) ${document.title}`;
    }
}

function focus_on_current_chat() {
    if (is_mobile()) return;

    let element = document.getElementsByClassName("livechat-common-customers-tab")[0];
    if(state.current_customer_tab == "email") {
        element = document.getElementsByClassName("livechat-email-customers-tab")[0];
    }

    if (element) {
        const need_to_focus = element.id.split("_")[4];

        if (need_to_focus) {
            const chat_elem = document.getElementById(need_to_focus);
            if (chat_elem) {
                chat_elem.classList.add("live-chat-active-customer-current");
            }
        }
    }
}

function get_unread_threads(unread_threads) {
    let final_unread_threads = unread_threads;

    if (!state.is_unread_message_count_synced) {

        state.is_unread_message_count_synced = true;
    } else {

        const saved_unread_threads = localStorage.getItem(`unread_threads-${state.agent.username}`);
        
        if (saved_unread_threads) final_unread_threads = saved_unread_threads;
    }

    localStorage.setItem(`unread_threads-${state.agent.username}`, unread_threads);

    return final_unread_threads;
}

async function add_translated_previous_messages(response) {
    // check and get translated messages
    for(var i = 0; i < response["customer_list"].length; i++) {
        var session_id = response["customer_list"][i]["session_id"];
        if (localStorage.getItem(`is_translated-${session_id}`) == "true" && response["customer_list"][i]["previous_message"]["sender"] != "Agent") {
            let text_message = await get_translated_text(response["customer_list"][i]["previous_message"]["message_id"], response["customer_list"][i]["previous_message"]["text_message"], session_id, response["customer_list"][i]["username"]);
            response["customer_list"][i]["previous_message"]["text_message"] = text_message;
        } 
    }
}

function add_customer_list(response, current_agent_name) {
    // Chat transfered Notifification not implemented as of now 
    // if (
    //     response["chat_transferred"] &&
    //     state.agent.is_notification_enable == "True" &&
    //     user_in_other_tab
    // ) {
    //     send_notification_for_chat_transfer(
    //         current_agent_name,
    //         response["chat_transferred_by"],
    //         response["chat_transferred_of"]
    //     );
    //     response["new_assigned_customer_count"] -= 1;
    // }
    var html = "";

    let current_unread_threads = response["unread_threads"];
    let customer_list_count = 0;
    state.ongoing_session_ids = [];
    for (var i = 0; i < response["customer_list"].length; i++) {

        // If email conversation response then skip
        if(response["customer_list"][i]["customer_channel"] == "Email") continue;

        var session_id = response["customer_list"][i]["session_id"];
        var last_appearance_time = response["customer_list"][i]["last_appearance_time"];
        var username = response["customer_list"][i]["username"];
        var bot_id = response["customer_list"][i]["bot_id"];
        var agent_username = response["customer_list"][i]["agent_username"];
        var guest_session = response["customer_list"][i]["guest_session"];
        var guest_session_status = response["customer_list"][i]["guest_session_status"];
        var primary_agent_username = response["customer_list"][i]["primary_agent_username"];
        var pending_guest_agents = response["customer_list"][i]["pending_guest_agents"];
        var is_self_assigned_chat = response["customer_list"][i]["is_self_assigned_chat"];
        var customer_language = response["customer_list"][i]["customer_language"];
        var customer_language_display = response["customer_list"][i]["customer_language_display"];
        var to_show_language_translate_prompt = response["customer_list"][i]["to_show_language_translate_prompt"];
        let customer_channel_name = response["customer_list"][i]["customer_channel"]
        state.ongoing_session_ids.push(session_id);
        // Keeping a track of chat escalation status of each session
        state.chat_escalation_status[session_id] = response["customer_list"][i]["chat_escalation_status"]
        
        if (!state.customer_details[session_id]) {
            state.customer_details[session_id] = {
                is_external: response["customer_list"][i]['is_external'],
            }
        }
        
        localStorage.setItem(`guest_session-${session_id}`, guest_session);
        localStorage.setItem(`guest_session_status-${session_id}`, guest_session_status);
        localStorage.setItem(`primary_agent_username-${session_id}`, primary_agent_username);
        localStorage.setItem(`customer_language-${session_id}`, customer_language);
        localStorage.setItem(`customer_language_display-${session_id}`, customer_language_display);
        localStorage.setItem(`to_show_language_translate_prompt-${session_id}`, to_show_language_translate_prompt);
        localStorage.setItem(`customer_channel_name-${session_id}`, customer_channel_name);

        if (username.length >= 8) {
            username = username.slice(0, 6) + "..";
        }

        html +=
            '<div class="live-chat-active-customer" id="' +
            session_id +
            '">\
                    <div class="live-chat-client-image">' +
            username[0].toUpperCase() +
            '<div id ="livechat-customer-status-' +
            session_id +
            '"class="livechat-online-indigator"></div></div>\
                <div class="live-chat-active-customer-name">\
                    <div class="live-chat-active-customer-name-area">\
                    ' +
            username +
            "\
                    </div>";

        const is_ongoing_chat = localStorage.getItem(`ongoing_chat-${session_id}`);
        if(guest_session == "true"){
            html += get_guest_session_indicator_html(session_id);

            if(!localStorage.getItem(`guest_agent_timer-${session_id}`)) {
                localStorage.setItem(`guest_agent_timer-${session_id}`, response["customer_list"][i]["guest_agent_timer"]);
            }

            for(let j = 0; j < pending_guest_agents.length; j++){
                if(!localStorage.getItem(`guest_agent_timer-${pending_guest_agents[j]}-${session_id}`) && agent_username != pending_guest_agents[j]) {
                    localStorage.setItem(`guest_agent_timer-${pending_guest_agents[j]}-${session_id}`, response["customer_list"][i]["guest_agent_timer"]);
                    localStorage.setItem(`guest_session_id-${pending_guest_agents[j]}`, session_id);
                }
            }
        }
        else if (is_ongoing_chat !== "true") {
            html += get_new_chat_indicator_html(session_id);
        }

        if (is_self_assigned_chat) {
            html += get_self_assign_indicator_html(session_id);
        }

        html += get_voip_indicator_html(session_id);
        html += get_cobrowsing_indicator_html(session_id);

        html += "</div>";
        
        const last_message = get_previous_message(
            response["customer_list"][i]["previous_message"],
            session_id
        );
        html += `<p class="live-chat-active-customer-text" id="livechat-last-message-${session_id}">
                    ${last_message}
                </p>`;

        html += `<div class="livechat-customer-typing-sidebar" id="customer-typing-${session_id}">Typing...</div>`;

        html += '<div class="live-chat-time">' + last_appearance_time + "</div>";

        let unread_message_count = localStorage.getItem(`unread_message_count-${session_id}`);
        if (!unread_message_count) {
            unread_message_count = response["customer_list"][i]["unread_message_count"];
            localStorage.setItem(`unread_message_count-${session_id}`, unread_message_count);
        }
        unread_message_count = parseInt(unread_message_count);
        if (unread_message_count) {
            html +=
                '<div class="live-chat-unread-message-count" id="livechat-unread-message-count-' +
                session_id +
                '">' +
                unread_message_count +
                "</div>";
            reset_inactivity_timer(session_id, bot_id, "customer");
        } else {
            html +=
                '<div class="live-chat-unread-message-count" id="livechat-unread-message-count-' +
                session_id +
                '" style="display:none;"></div>';
        }

        // html += `<div class="livechat-customer-status" id="livechat-customer-status-${session_id}"></div>`;

        html += "</div>";
        customer_list_count += 1;
    }

    localStorage.setItem("ongoing_session_ids", JSON.stringify(state.ongoing_session_ids));

    if(!customer_list_count) {
        update_no_active_customer_div();
    } else {
        document.getElementById("livechat-customers-tab-header").innerHTML =
            "Active Customers (" + customer_list_count + ")";  
        $(".livechat-common-customers-tab").html(html);   
    }
}

function add_email_customer_list(response, current_agent_name) {

    var html = "";

    state.ongoing_email_sessions = [];
    let customer_list_count = 0;
    for (var i = 0; i < response["customer_list"].length; i++) {

        // If not a email conversation response then skip
        if(response["customer_list"][i]["customer_channel"] != "Email") continue;

        if(response["customer_list"][i]["is_email_chat_to_be_resolved"]) dispose_email_chat(response["customer_list"][i]["session_id"]); 

        var session_id = response["customer_list"][i]["session_id"];
        var last_appearance_time = response["customer_list"][i]["last_appearance_time"];
        var username = response["customer_list"][i]["username"];
        var agent_username = response["customer_list"][i]["agent_username"];
        var guest_session = response["customer_list"][i]["guest_session"];
        var guest_session_status = response["customer_list"][i]["guest_session_status"];
        var primary_agent_username = response["customer_list"][i]["primary_agent_username"];
        var pending_guest_agents = response["customer_list"][i]["pending_guest_agents"];
        var customer_language = response["customer_list"][i]["customer_language"];
        var customer_language_display = response["customer_list"][i]["customer_language_display"];
        var to_show_language_translate_prompt = response["customer_list"][i]["to_show_language_translate_prompt"];
        state.ongoing_session_ids.push(session_id);
        state.ongoing_email_sessions.push(session_id);
        
        if (!state.customer_details[session_id]) {
            state.customer_details[session_id] = {
                is_external: response["customer_list"][i]['is_external'],
            }
        }
        
        localStorage.setItem(`guest_session-${session_id}`, guest_session);
        localStorage.setItem(`guest_session_status-${session_id}`, guest_session_status);
        localStorage.setItem(`primary_agent_username-${session_id}`, primary_agent_username);
        localStorage.setItem(`customer_language-${session_id}`, customer_language);
        localStorage.setItem(`customer_language_display-${session_id}`, customer_language_display);
        localStorage.setItem(`to_show_language_translate_prompt-${session_id}`, to_show_language_translate_prompt);

        if (username.length >= 8) {
            username = username.slice(0, 6) + "..";
        }

        html +=
            '<div class="live-chat-active-customer" id="' +
            session_id +
            '">\
                    <div class="live-chat-client-image">' +
            username[0].toUpperCase() +
            '<div id ="livechat-customer-status-' +
            session_id +
            '"class="livechat-online-indigator"></div></div>\
                <div class="live-chat-active-customer-name">\
                    <div class="live-chat-active-customer-name-area">\
                    ' +
            username +
            "\
                    </div>";

        const is_ongoing_chat = localStorage.getItem(`ongoing_chat-${session_id}`);
        if(guest_session == "true"){
            html += get_guest_session_indicator_html(session_id);

            if(!localStorage.getItem(`guest_agent_timer-${session_id}`)) {
                localStorage.setItem(`guest_agent_timer-${session_id}`, response["customer_list"][i]["guest_agent_timer"]);
            }

            for(let j = 0; j < pending_guest_agents.length; j++){
                if(!localStorage.getItem(`guest_agent_timer-${pending_guest_agents[j]}-${session_id}`) && agent_username != pending_guest_agents[j]) {
                    localStorage.setItem(`guest_agent_timer-${pending_guest_agents[j]}-${session_id}`, response["customer_list"][i]["guest_agent_timer"]);
                    localStorage.setItem(`guest_session_id-${pending_guest_agents[j]}`, session_id);
                }
            }
        }
        else if (is_ongoing_chat !== "true") {
            html += get_new_chat_indicator_html(session_id);
        }

        html += "</div>";
        
        const last_message = get_previous_message(
            response["customer_list"][i]["previous_message"],
            session_id
        );
        html += `<p class="live-chat-active-customer-text" id="livechat-last-message-${session_id}">
                    ${last_message}
                </p>`;

        html += '<div class="live-chat-time">' + last_appearance_time + "</div>";

        let unread_message_count = localStorage.getItem(`unread_message_count-${session_id}`);
        if (!unread_message_count) {
            unread_message_count = response["customer_list"][i]["unread_message_count"];
            localStorage.setItem(`unread_message_count-${session_id}`, unread_message_count);
        }
        unread_message_count = parseInt(unread_message_count);
        if (unread_message_count) {
            html +=
                '<div class="live-chat-unread-message-count" id="livechat-unread-message-count-' +
                session_id +
                '">' +
                unread_message_count +
                "</div>";
        } else {
            html +=
                '<div class="live-chat-unread-message-count" id="livechat-unread-message-count-' +
                session_id +
                '" style="display:none;"></div>';
        }

        // html += `<div class="livechat-customer-status" id="livechat-customer-status-${session_id}"></div>`;

        html += "</div>";
        customer_list_count += 1;
    }
    localStorage.setItem("ongoing_session_ids", JSON.stringify(state.ongoing_session_ids));

    if(!customer_list_count) {
        update_no_active_email_customer_div();
    } else {
        document.getElementById("livechat-email-customers-tab-header").innerHTML =
            "Email Conversations (" + customer_list_count + ")";  
        $(".livechat-email-customers-tab").html(html);   
    }
}

function update_no_active_customer_div() {
    document.getElementById("livechat-customers-tab-header").innerHTML = "Active Customers";
    let html =
        '<div id = "no_cust_till_now" style="display: block;padding:35px;"><p>Active customers appear here</p></div>';
    $(".livechat-common-customers-tab").html(html);
}

function update_no_active_email_customer_div() {
    document.getElementById("livechat-email-customers-tab-header").innerHTML = "Email Conversations";
    let html =
        '<div id = "no_cust_till_now" style="display: block;padding:35px;"><p>Email conversations appear here</p></div>';
    $(".livechat-email-customers-tab").html(html);
}


function check_message_belongs_to_agent(session_id){

    var ongoing_session_ids = state.ongoing_session_ids;

    if(ongoing_session_ids.length == 0) {
       ongoing_session_ids = JSON.parse(localStorage.getItem("ongoing_session_ids"));
    }

    if(ongoing_session_ids) {
        return ongoing_session_ids.includes(session_id);
    } else {
        return false;
    }
}

export function is_primary_agent(session_id) {
    const is_guest_agent = localStorage.getItem(`guest_session-${session_id}`) == 'true';

    return !is_guest_agent;
}

/* Online/Offline Customer Status Starts */

function show_all_customer_status(response) {
    for (let i = 0; i < response["customer_list"].length; ++i) {
        const session_id = response["customer_list"][i]["session_id"];
        const unread_message_count = localStorage.getItem(`unread_message_count-${session_id}`);

        show_customer_status(unread_message_count, session_id);
    }
}

function show_customer_status(unread_message_count, session_id) {
    const status_elem = document.getElementById(`livechat-customer-status-${session_id}`);
    try {
        const status =
            localStorage.getItem(`customer_offline-${session_id}`) == "true" ? "offline" : "online";
        if (status == "online") {
            status_elem.className = "livechat-online-indigator";
        } else {
            status_elem.className = "livechat-offline-indigator";
        }
    } catch (err) {
        console.log(err);
    }
}

/* Online/Offline Customer Status Ends */

function get_previous_message(prev_message, session_id) {
    let is_attachment = false;
    let attachment_name = "";
    let is_guest_agent_message = prev_message["is_guest_agent_message"];
    const guest_session = localStorage.getItem(`guest_session-${session_id}`);
    const guest_session_status = localStorage.getItem(`guest_session_status-${session_id}`);
    
    if (prev_message.is_attachment == "True") {
        is_attachment = true;
        attachment_name = prev_message.attachment_name;
    }

    let stripped_text_message = stripHTMLtags(prev_message.text_message);
    let response = `${stripped_text_message}`;

    let icon;
    if (is_attachment) {
        icon = get_attachment_icon(attachment_name);
        response = `${icon}${stripHTMLtags(attachment_name)}`;
    }

    if (prev_message.sender == "Agent") {
        if((is_guest_agent_message == true && guest_session == "true") || (is_guest_agent_message == false && guest_session == "false"))
        {
            if (is_attachment && stripped_text_message != "") {
                response = `${icon}${stripped_text_message}`;
            }

            let blue_ticks = `<svg style="margin-right:2px;" width="14" height="10" viewBox="0 0 14 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path class="doubletick_livechat_agent-${session_id}" d="M3.45714 6.51434L1.07304 4.18025C0.827565 3.93994 0.429579 3.93994 0.184102 4.18025C-0.0613675 4.42056 -0.0613675 4.81022 0.184102 5.05053L3.01268 7.81976C3.25815 8.06007 3.65614 8.06007 3.90161 7.81976L10.8159 1.05053C11.0614 0.810204 11.0614 0.420567 10.8159 0.18024C10.5704 -0.0600801 10.1724 -0.0600801 9.92697 0.18024L3.45714 6.51434Z" fill="#4d4d4d"/>
                                <path class="doubletick_livechat_agent-${session_id}" d="M5.6412 8.51434L5.07684 7.99999C4.83137 7.75969 4.42956 8.27404 4.18409 8.51434C3.93862 8.75465 3.93864 8.62614 4.18411 8.86645L5.19673 9.81976C5.44221 10.0601 5.8402 10.0601 6.08567 9.81976L13 3.05053C13.2454 2.8102 13.2454 2.42057 13 2.18024C12.7545 1.93992 12.3565 1.93992 12.111 2.18024L5.6412 8.51434Z" fill="#4d4d4d"/>
                                </svg>`;

            const cust_last_app_time = localStorage.getItem(`cust_last_app_time_${session_id}`);

            if (cust_last_app_time != undefined && cust_last_app_time > prev_message.message_time) {
                blue_ticks = `<svg style="margin-right:2px;" width="14" height="10" viewBox="0 0 14 10" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M3.45714 6.51434L1.07304 4.18025C0.827565 3.93994 0.429579 3.93994 0.184102 4.18025C-0.0613675 4.42056 -0.0613675 4.81022 0.184102 5.05053L3.01268 7.81976C3.25815 8.06007 3.65614 8.06007 3.90161 7.81976L10.8159 1.05053C11.0614 0.810204 11.0614 0.420567 10.8159 0.18024C10.5704 -0.0600801 10.1724 -0.0600801 9.92697 0.18024L3.45714 6.51434Z" fill="#0254D7"/>
                                <path d="M5.6412 8.51434L5.07684 7.99999C4.83137 7.75969 4.42956 8.27404 4.18409 8.51434C3.93862 8.75465 3.93864 8.62614 4.18411 8.86645L5.19673 9.81976C5.44221 10.0601 5.8402 10.0601 6.08567 9.81976L13 3.05053C13.2454 2.8102 13.2454 2.42057 13 2.18024C12.7545 1.93992 12.3565 1.93992 12.111 2.18024L5.6412 8.51434Z" fill="#0254D7"/>
                            </svg>`;
            }

            response = `${blue_ticks}${response}`;
        }
    }

    return response;
}

function get_attachment_icon(name) {
    if (is_image(name)) return state.icons.image2;

    if (is_pdf(name)) return state.icons.pdf;

    if (is_txt(name)) return state.icons.txt;

    if (is_docs(name)) return state.icons.doc;

    if (is_excel(name)) return state.icons.excel;

    if (is_video(name)) return state.icons.video2;
}

function show_custom_notification(notification_message, notification_duration) {
    if(document.getElementById("custom-notification-text")) {
        document.getElementById("custom-notification-text").innerText = notification_message;
        document.querySelector(".custom-notification-alert-div").style.display = "flex";
        // setTimeout(() => {
        //     $(".custom-notification-alert-div").fadeOut();
        // }, notification_duration);
    }
}

function disable_input_fields_and_icons(is_disable, placeholder_message) {
    
    let agent_input_field;
    if(is_mobile()) {
        agent_input_field = document.getElementById("query-mobile");
    } else {
        agent_input_field = document.getElementById("query");
    }

    let icons_element_container = document.querySelector(".live-chat-text-format-icons");
    let icon_elements = document.querySelectorAll(".live-chat-text-format-icon");

    if(is_disable) {
        if(agent_input_field) {
            agent_input_field.disabled = true;
            agent_input_field.style.pointerEvents = "none";
            agent_input_field.placeholder = placeholder_message;
        }

        if(icons_element_container) {
            icons_element_container.style.pointerEvents = "none";
        }
        
        for (let i = 0; i < icon_elements.length; i++) {
            icon_elements[i].classList.add("disabled-icons");
        }

    } else {
        if(agent_input_field) {
            agent_input_field.disabled = false;
            agent_input_field.style.pointerEvents = "auto";
            agent_input_field.placeholder = placeholder_message;
            agent_input_field.focus();
        }

        if(icons_element_container) {
            icons_element_container.style.pointerEvents = "auto";
        }

        for (let i = 0; i < icon_elements.length; i++) {
            icon_elements[i].classList.remove("disabled-icons");
        }
    }
}

function is_iOS() {
    return [
        'iPad Simulator',
        'iPhone Simulator',
        'iPod Simulator',
        'iPad',
        'iPhone',
        'iPod'
    ].includes(navigator.platform)
}

function hide_mics(){
    const mic_agent_to_customer = document.getElementById('mic_agent_to_customer');
    const mic_group = document.getElementById('mic_group');

    if(mic_agent_to_customer){
        mic_agent_to_customer.style.display = 'none';
    }
    if(mic_group){
        mic_group.style.display = 'none'
    }
}

export function hide_mics_for_iOS(){
    
    if(is_iOS()){
        hide_mics();
    }
   
}

function check_whatsapp_webhook_status(session_id){
  
    let json_string = JSON.stringify({
        "session_id" : session_id
    });
    json_string = EncryptVariable(json_string);
    json_string = encodeURIComponent(json_string);
    
    let csrf_token = getCsrfToken();
    let xhttp = new XMLHttpRequest();
    let params = "json_string=" + json_string;
    xhttp.open("POST","/livechat/get-whatsapp-webhook-status/", false);
    xhttp.setRequestHeader("X-CSRFToken", csrf_token); 
    xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                let response = JSON.parse(this.responseText);
                response = custom_decrypt(response);
                response = JSON.parse(response);

                if(response["status"] == 200){
                    if (response["need_to_set"]) {
                        show_custom_notification("Whatsapp webhook are not established. Please ask your admin to establish it from Settings->Developer Settings-> Select the bot-> Webhook-> BSP." , 5000)
                    }
                }
               
            }
    };
    xhttp.send(params);

}

function go_to_chat(session_id, is_deleted = false) {
    if (get_no_internet()) return;
    
    let prev_session_id = state.session_id.current;
    if (is_mobile() && prev_session_id == "") {
        prev_session_id = state.session_id.previous;
    }

    state.session_id.current = session_id;
    close_chat_socket();
    
    disable_input_fields_and_icons(true, "Conversation loading, please wait...");
    
    if (is_deleted) {
        hide_console();
        remove_chat(prev_session_id);
        return;
    }

    hide_prev_chat(prev_session_id);
    highlight_chat(prev_session_id, state.session_id.current);
    show_console();
    get_chat_info_from_local();
    check_and_update_agent_header();
    update_guest_agent_status();
    if(!check_is_email_session(session_id)) {
        get_messages_from_local();
        get_customer_details_from_local();
    }
    hide_message_reply_notification_function();
    reset_search_ticket_modal();
    set_input_pointer_as_per_lang(session_id);

    if(state.current_customer_tab == "common") {
        document.getElementsByClassName("livechat-common-customers-tab")[0].id =
            "live_chat_active_customers_" + session_id;
    } else {
        document.getElementsByClassName("livechat-email-customers-tab")[0].id =
            "live_chat_active_customers_" + session_id;
    }

    const unread_message_count = parseInt(
        localStorage.getItem(`unread_message_count-${state.session_id.current}`)
    );
    if (unread_message_count == 0) {
        remove_message_diffrentiator(session_id);
    }

    set_is_message_diffrentiator_present(prev_session_id, false);
    set_user_unseen_message(prev_session_id, 0);

    setTimeout(function () {

        localStorage.setItem(`unread_message_count-${state.session_id.current}`, 0);
    }, 300);

    append_unread_msg_count_in_chat_icon(state.session_id.current, 0);
    show_customer_status(0, state.session_id.current);

    if (unread_message_count) {
        let unread_threads = localStorage.getItem(`unread_threads-${state.agent.username}`);
        unread_threads = parseInt(unread_threads) > 0 ? parseInt(unread_threads) - 1 : 0;
        localStorage.setItem(`unread_threads-${state.agent.username}`, unread_threads);

        update_document_title(unread_threads);
    }
    document.getElementsByClassName("live-chat-message-wrapper")[0].addEventListener("scroll", show_scroll_image);
    document.getElementById("live-chat-new-message-reply-comment-notification-"+session_id).addEventListener("click", go_to_specific_element);
    
    let channel = localStorage.getItem(`customer_channel_name-${session_id}`)
    if(channel == "WhatsApp"){
       check_whatsapp_webhook_status(session_id);
    }
}

function hide_transcript_btn() {
    let transcript_option = localStorage.getItem(`transcript_option-${get_session_id()}`);
    if (!transcript_option || transcript_option == 'false') {
        $("#transcript-button").addClass("disable-transcript-btn");
    }
}

function reset_search_ticket_modal() {
    $("#livechat-ticket-id").val('');
    $("#ticket-details-container").html('');
    $('#ticket-details-container').css('display','none');
}

function set_input_pointer_as_per_lang(session_id) {

    let agent_language = localStorage.getItem(`agent_language-${session_id}`);

    if(state.rtl_languages.includes(agent_language)) {
        $("#query").css("direction", "rtl");
        $("#query-file").css("direction", "rtl");
        $("#query-mobile").css("direction", "rtl")
    } else {
        $("#query").css("direction", "ltr");
        $("#query-file").css("direction", "ltr");
        $("#query-mobile").css("direction", "ltr")        
    }
}

function show_scroll_image() {
    var scrollHeight = document.getElementsByClassName("live-chat-message-wrapper")[0].scrollHeight;
    var scrollTop = document.getElementsByClassName("live-chat-message-wrapper")[0].scrollTop;
    var clientHeight = document.getElementsByClassName("live-chat-message-wrapper")[0].clientHeight;

    if (scrollHeight - (scrollTop + clientHeight) > 100) {
        document.getElementById("img-scroll-to-bottom").style.display = "block";
    } else {
        document.getElementById("img-scroll-to-bottom").style.display = "none";
    }
}

function check_and_update_agent_header(){

    const guest_session = localStorage.getItem(`guest_session-${state.session_id.current}`);
    const guest_session_status = localStorage.getItem(`guest_session_status-${state.session_id.current}`);
    const primary_agent_username = localStorage.getItem(`primary_agent_username-${state.session_id.current}`);
    const is_translated = localStorage.getItem(`is_translated-${state.session_id.current}`);
    const is_virtual_interpretation_enabled = localStorage.getItem('is_virtual_interpretation_enabled');
    let agent_preferred_language = localStorage.getItem(`agent_language-${state.session_id.current}`);
    const customer_language_display = localStorage.getItem(`customer_language_display-${state.session_id.current}`);
    const to_show_language_translate_prompt = localStorage.getItem(`to_show_language_translate_prompt-${state.session_id.current}`);
    const customer_language = localStorage.getItem(`customer_language-${state.session_id.current}`);

    if(!is_mobile()){

        if(is_virtual_interpretation_enabled == "true") {

            if(to_show_language_translate_prompt == "false") {

                    $('.detected_language').css("display", "none");
                    $('.original_language').css("display", "none");
                    $('.language_translate_div').css("display", "none");          

            } else {

                if(is_translated == "true") {

                    $('.livechat-detected-language-text').text(customer_language_display);
                    $('.detected_language').css("display", "none");
                    $('.original_language').css("display", "inline-flex"); 

                    setTimeout(() => {
                        $('.agent_language_dropdown').val(agent_preferred_language);
                        $('.agent_language_dropdown').selectpicker('refresh');
                    }, 100);

                } else {

                    $('.agent_language_dropdown').val('');
                    $('.agent_language_dropdown').selectpicker('refresh');
                    $('.livechat-detected-language-text').text(customer_language_display);
                    $('.detected_language').css("display", "inline-flex");
                    $('.original_language').css("display", "none");           
                }
            }
        }

        document.getElementById("livechat-add-agent-btn").style.pointerEvents="auto";
        document.getElementById("livechat-add-agent-btn").style.cursor="pointer";
        document.getElementById("livechat-add-agent-btn").style.opacity="1";
        document.getElementById("livechat-transfer-chat-btn").style.pointerEvents="auto";
        document.getElementById("livechat-transfer-chat-btn").style.cursor="pointer";
        document.getElementById("livechat-transfer-chat-btn").style.opacity="1";
        document.getElementById("livechat-primary-agent-header").style.display = "flex";
        document.getElementById("livechat-secondary-agent-accept-reject-header").style.display = "none";
        document.getElementById("livechat-secondary-agent-header").style.display = "none";
        document.getElementById("livechat-text-box-div").style.display = "inline-flex";   
        document.getElementById("livechat-text-box-div").style.visibility = "visible";

        if(guest_session == "true"){
            if(guest_session_status == "onhold"){
                document.getElementById("livechat-primary-agent-header").style.display = "none";
                document.getElementById("livechat-secondary-agent-accept-reject-header").style.display = "block";
                document.getElementById("livechat-secondary-agent-header").style.display = "none";
                // document.getElementById("livechat-text-box-div").style.display = "none";
                document.getElementById("livechat-text-box-div").style.visibility = "hidden";
                document.getElementById("primary-agent-invited-text").innerHTML = primary_agent_username+" has invited you"
            }
            else if(guest_session_status == "accept"){
                document.getElementById("livechat-primary-agent-header").style.display = "none";
                document.getElementById("livechat-secondary-agent-accept-reject-header").style.display = "none";
                document.getElementById("livechat-secondary-agent-header").style.display = "flex";
                document.getElementById("livechat-text-box-div").style.display = "inline-flex";  
                document.getElementById("livechat-text-box-div").style.visibility = "visible";          
            }
            else if(guest_session_status == "reject"){
                document.getElementById("livechat-primary-agent-header").style.display = "none";
                document.getElementById("livechat-secondary-agent-accept-reject-header").style.display = "none";
                document.getElementById("livechat-secondary-agent-header").style.display = "none";
                document.getElementById("livechat-text-box-div").style.display = "inline-flex"; 
                document.getElementById("livechat-text-box-div").style.visibility = "visible";            
            }
        }
        else{
            if(guest_session_status == "accept" || guest_session_status == "onhold"){
                document.getElementById("livechat-transfer-chat-btn").style.pointerEvents="none";
                document.getElementById("livechat-transfer-chat-btn").style.cursor="default";
                document.getElementById("livechat-transfer-chat-btn").style.opacity="0.3";
            }
            document.getElementById("livechat-primary-agent-header").style.display = "flex";
            document.getElementById("livechat-text-box-div").style.display = "inline-flex";
            document.getElementById("livechat-text-box-div").style.visibility = "visible";
        }
    }
    else {


        if(is_virtual_interpretation_enabled == "true") {

            if(to_show_language_translate_prompt == "false") {

                $('#livechat_mobile_language_container').css("display", "none");
                $('#livechat_langauge_container_show').css("display", "none");      

            } else {

                if(is_translated == "true") {

                    $('#detected_language_mobile .livechat-detected-language-subheading').text("Translated Language : ");
                    $('#detected_language_mobile .livechat-detected-language-text').css("display", "none");

                    setTimeout(() => {
                        $('#agent_language_dropdown_mobile').val(agent_preferred_language);
                        $('#agent_language_dropdown_mobile').selectpicker('refresh');
                    }, 100);

                    $("#agent_language_dropdown_mobile option").each(function()
                    {
                        if($(this).val() == customer_language) {
                            $(this).attr('data-subtext', 'Original');
                        }
                    });

                } else {

                    $('#agent_language_dropdown_mobile').val('');
                    $('.livechat_language_options_mobile').removeAttr('data-subtext');
                    $('#agent_language_dropdown_mobile').selectpicker('refresh');
                    $('#detected_language_mobile .livechat-detected-language-text').text(customer_language_display);
                    $('#detected_language_mobile .livechat-detected-language-subheading').text("Detected language - ");
                    $('#detected_language_mobile .livechat-detected-language-text').css("display", "inline-flex");
                    $('#livechat_mobile_language_container').css("display", "inline-flex");  
                }
            }
        }

        document.getElementById("livechat-mobile-add-agent-btn").style.pointerEvents="auto";
        document.getElementById("livechat-mobile-add-agent-btn").style.cursor="pointer";
        document.getElementById("livechat-mobile-add-agent-btn").style.opacity="1";
        document.getElementById("livechat-mobile-transfer-btn").style.pointerEvents="auto";
        document.getElementById("livechat-mobile-transfer-btn").style.cursor="pointer";
        document.getElementById("livechat-mobile-transfer-btn").style.opacity="1";
        document.getElementById("livechat-primary-agent-header").style.display = "none";
        document.getElementById("livechat-secondary-agent-accept-reject-header").style.display = "none";
        document.getElementById("livechat-secondary-agent-header").style.display = "none";
        document.getElementById("livechat-text-box-div").style.display = "inline-flex";
        document.getElementById("livechat-text-box-div").style.visibility = "visible";
        document.getElementById("livechat-mobile-transfer-btn").style.display = "block";
        document.getElementById("livechat-mobile-transfer-div").style.display = "block";
        document.getElementById("livechat-mobile-add-agent-btn").style.display = "block";
        document.getElementById("livechat-mobile-add-agent-div").style.display = "block";
        document.getElementById("livechat-mobile-resolve-btn").style.display = "block";
        document.getElementById("livechat-mobile-resolve-div").style.display = "block";
        document.getElementById("livechat-mobile-exit-btn").style.display = "none";
        document.getElementById("livechat-mobile-exit-div").style.display = "none";
        document.getElementById("livechat-mobile-request-status-btn").style.display = "none";
        document.getElementById("livechat-mobile-request-status-div").style.display = "none";

        if(guest_session == "true"){
            if(guest_session_status == "onhold"){
                document.getElementById("livechat-mobile-transfer-btn").style.display = "none";
                document.getElementById("livechat-mobile-transfer-div").style.display = "none";
                document.getElementById("livechat-mobile-add-agent-btn").style.display = "none";
                document.getElementById("livechat-mobile-add-agent-div").style.display = "none";
                document.getElementById("livechat-mobile-resolve-btn").style.display = "none";
                document.getElementById("livechat-mobile-resolve-div").style.display = "none";
                document.getElementById("livechat-mobile-exit-btn").style.display = "none";
                document.getElementById("livechat-mobile-exit-div").style.display = "none";
                document.getElementById("livechat-secondary-agent-accept-reject-header").style.display = "block";
                // document.getElementById("livechat-text-box-div").style.display = "none";
                document.getElementById("livechat-text-box-div").style.visibility = "hidden";
                document.getElementById("primary-agent-invited-text").innerHTML = primary_agent_username+" has invited you"
                document.getElementById("livechat-mobile-request-status-btn").style.display = "none";
                document.getElementById("livechat-mobile-request-status-div").style.display = "none";
            }
            else if(guest_session_status == "accept"){
                document.getElementById("livechat-mobile-transfer-btn").style.display = "none";
                document.getElementById("livechat-mobile-transfer-div").style.display = "none";
                document.getElementById("livechat-mobile-add-agent-btn").style.display = "none";
                document.getElementById("livechat-mobile-add-agent-div").style.display = "none";
                document.getElementById("livechat-mobile-resolve-btn").style.display = "none";
                document.getElementById("livechat-mobile-resolve-div").style.display = "none";
                document.getElementById("livechat-mobile-exit-btn").style.display = "block";
                document.getElementById("livechat-mobile-exit-div").style.display = "block";
                document.getElementById("livechat-text-box-div").style.display = "inline-flex";  
                document.getElementById("livechat-text-box-div").style.visibility = "visible";
                document.getElementById("livechat-mobile-request-status-btn").style.display = "block";
                document.getElementById("livechat-mobile-request-status-div").style.display = "block";          
            }
            else if(guest_session_status == "reject"){
                document.getElementById("livechat-mobile-transfer-btn").style.display = "none";
                document.getElementById("livechat-mobile-transfer-div").style.display = "none";
                document.getElementById("livechat-mobile-add-agent-btn").style.display = "none";
                document.getElementById("livechat-mobile-add-agent-div").style.display = "none";
                document.getElementById("livechat-mobile-resolve-btn").style.display = "none";
                document.getElementById("livechat-mobile-resolve-div").style.display = "none";
                document.getElementById("livechat-mobile-exit-btn").style.display = "none";
                document.getElementById("livechat-mobile-exit-div").style.display = "none";
                document.getElementById("livechat-text-box-div").style.display = "inline-flex";   
                document.getElementById("livechat-text-box-div").style.visibility = "visible";
                document.getElementById("livechat-mobile-request-status-btn").style.display = "none";
                document.getElementById("livechat-mobile-request-status-div").style.display = "none";          
            }
        }
        else{
            if(guest_session_status == "accept" || guest_session_status == "onhold"){
                document.getElementById("livechat-mobile-transfer-btn").style.pointerEvents="none";
                document.getElementById("livechat-mobile-transfer-btn").style.cursor="default";
                document.getElementById("livechat-mobile-transfer-btn").style.opacity="0.3";
            }
            document.getElementById("livechat-mobile-transfer-btn").style.display = "block";
            document.getElementById("livechat-mobile-transfer-div").style.display = "block";
            document.getElementById("livechat-mobile-add-agent-btn").style.display = "block";
            document.getElementById("livechat-mobile-add-agent-div").style.display = "block";
            document.getElementById("livechat-mobile-resolve-btn").style.display = "block";
            document.getElementById("livechat-mobile-resolve-div").style.display = "block";
            document.getElementById("livechat-mobile-exit-btn").style.display = "none";
            document.getElementById("livechat-mobile-exit-div").style.display = "none";
            document.getElementById("livechat-mobile-request-status-btn").style.display = "block";
            document.getElementById("livechat-mobile-request-status-div").style.display = "block";
        }           
    }

}

export function check_chat_escalation_status() {

    let session_id = get_session_id();
    const guest_session = localStorage.getItem(`guest_session-${session_id}`);

    if(!session_id) return;

    if(!IS_CHAT_ESCALATION_ENABLED || guest_session == "true") {

        $("#report-warn-user-div").css("display", "none");
        $("#warn-user-toast").css("display", "none");
        $("#report-user-toast").css("display", "none");
        return;        
    }

    let chat_escalation_status_data = get_chat_escalation_status();

    if(chat_escalation_status_data[session_id]) {
        let chat_escalation_status = chat_escalation_status_data[session_id];
        let customer_email = $("#customer-email-input").val();
        if(!customer_email || customer_email.toLowerCase() == "null" || customer_email.toLowerCase() == "none") {
            customer_email = "this user";
        }
        $(".chat-escalation-customer-email").text(customer_email);

        if(chat_escalation_status == "to_be_warned") {

            $("#report-warn-user-div").css("display", "block");
            $("#warn-user-toast").css("display", "block");
            $("#report-user-toast").css("display", "none");
            $("#report-user-btn").addClass('disable-report-user-btn');

        } else if(chat_escalation_status == "warned") {

            $("#report-warn-user-div").css("display", "none");
            $("#warn-user-toast").css("display", "none");
            $("#report-user-toast").css("display", "none");
            $("#report-user-btn").removeClass('disable-report-user-btn');

        } else if(chat_escalation_status == "to_be_reported") {

            $("#report-warn-user-div").css("display", "block");
            $("#warn-user-toast").css("display", "none");
            $("#report-user-toast").css("display", "block");
            $("#report-user-btn").removeClass('disable-report-user-btn');

        } else {

            $("#report-warn-user-div").css("display", "none");
            $("#warn-user-toast").css("display", "none");
            $("#report-user-toast").css("display", "none");
            $("#report-user-btn").addClass('disable-report-user-btn');

        }

        if(IS_AGENT_REPORT_ENABLED && chat_escalation_status != "reported" && chat_escalation_status != "completed") {
           $("#report-user-btn").removeClass('disable-report-user-btn'); 
        }

    } else {

        $("#report-warn-user-div").css("display", "none");
        $("#warn-user-toast").css("display", "none");
        $("#report-user-toast").css("display", "none");
        $("#report-user-btn").addClass('disable-report-user-btn');
    }

}

function update_guest_session_timer() {

    if(!state.current_guest_sessions.length) {
        var current_guest_sessions = JSON.parse(localStorage.getItem('current_guest_sessions'));
        if(current_guest_sessions) {
            state.current_guest_sessions = current_guest_sessions;
        }
    }

    for(let i = 0; i < state.current_guest_sessions.length; i++) {

        var guest_session_timer = localStorage.getItem(`guest_agent_timer-${state.current_guest_sessions[i]}`);

        const guest_session = localStorage.getItem(`guest_session-${state.current_guest_sessions[i]}`);
        const guest_session_status = localStorage.getItem(`guest_session_status-${state.current_guest_sessions[i]}`);

        if((guest_session_timer <= 0 && guest_session == "true" && guest_session_status == "onhold" && is_livechat_page()) || (guest_session_timer <= 0 && !is_livechat_page())) {

            guest_agent_session_no_response(state.current_guest_sessions[i]);
            continue;
        }

        if((guest_session_timer && guest_session == "true" && guest_session_status == "onhold" && is_livechat_page()) || (guest_session_timer && !is_livechat_page())) {

            localStorage.setItem(`guest_agent_timer-${state.current_guest_sessions[i]}`, --guest_session_timer);
        }
    }
    if(document.getElementById("livechat-secondary-agent-accept-reject-header")) {
        if(document.getElementById("livechat-secondary-agent-accept-reject-header").style.display == "block") {

            document.getElementById("guest-session-remaining-time").innerHTML = localStorage.getItem(`guest_agent_timer-${state.session_id.current}`);
        }
    } 
}

function remove_current_guest_session(session_id) {
    const session_index = state.current_guest_sessions.indexOf(session_id);

    if (session_index > -1) {
        state.current_guest_sessions.splice(session_index, 1);
    }    
}

function remove_guest_agent_from_pending_list(agent_username) {
    var agent_pending_list = get_agent_pending_list();

    const username_index = agent_pending_list.indexOf(agent_username);

    if (username_index > -1) {
        agent_pending_list.splice(username_index, 1);
    }  
    set_agent_pending_list(agent_pending_list);     
}

function update_guest_agent_status() {

    var session_id = get_session_id();
    var is_guest_session = localStorage.getItem("is_guest_session-"+session_id);

    if(session_id && is_guest_session == "true") {

        document.getElementById("primary-guest-agent-status").style.display = "block";
        var json_string = JSON.stringify({

            session_id: get_session_id(),
        });
        json_string = EncryptVariable(json_string);
        json_string = encodeURIComponent(json_string);

        var csrf_token = getCsrfToken();
        var xhttp = new XMLHttpRequest();
        var params = "json_string=" + json_string;
        xhttp.open("POST", "/livechat/update-guest-agent-status/", true);
        xhttp.setRequestHeader("X-CSRFToken", csrf_token);
        xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {

                let response = JSON.parse(this.responseText);
                response = custom_decrypt(response);
                response = JSON.parse(response);
                if (response["status_code"] == "200") {

                    var guest_session_status = JSON.parse(response["guest_session_status"]);
                    var agent_names = JSON.parse(response["agent_names"]);
                    render_guest_session_data(guest_session_status, session_id, agent_names);
                }
            }
        };
        xhttp.send(params);
    }
    else{
        document.getElementById("primary-guest-agent-status").style.display = "none";
    }
}


function render_guest_session_data(guest_session_status, session_id, agent_names) {

    var none_html_container = document.createElement('div');
    none_html_container.className = 'modal-content-text-wrapper';
    none_html_container.style.display = "block";
    var none_html = document.createElement('div');
    none_html.className = 'modal-content-text';
    none_html.innerHTML = 'None';
    none_html_container.appendChild(none_html);

    var accept_flag = false;
    var reject_flag = false;
    var pending_flag = false;
    var exit_flag = false;
    var no_response_flag = false;

    var agent_count = 0; 

    document.querySelectorAll(".modal-content-text-wrapper").forEach(e => e.remove());
    for (const [agent, status] of Object.entries(guest_session_status)) {
        if(status == "onhold"){
            pending_flag = true
            var pending_time = parseInt(localStorage.getItem(`guest_agent_timer-${agent}-${session_id}`))+1
            var pending_container = document.createElement('div');
            pending_container.className = 'modal-content-text-wrapper pending-agents';
            pending_container.innerHTML = '<div class="modal-content-text">'
                                            + agent_names[agent] + ' (' + agent +  
                                          ')</div>\
                                           <div class="modal-content-icon">\
                                            <span><span id="' + agent + session_id + '">' + pending_time + '</span> sec</span>'
                                            + state.icons.session_pending +
                                          '</div>';
            var reference_node = document.getElementById("guest-agent-pending");
            insert_after(reference_node, pending_container);                                          
        }
        if(status == "accept") {
            accept_flag = true
            var accept_container = document.createElement('div');
            accept_container.className = 'modal-content-text-wrapper';
            accept_container.innerHTML = '<div class="modal-content-text">'
                                            + agent_names[agent] + ' (' + agent +  
                                          ')</div>\
                                           <div class="modal-content-icon">'
                                            + state.icons.session_accept +
                                          '</div>';
            var reference_node = document.getElementById("guest-agent-accept");
            insert_after(reference_node, accept_container);  
        }
        if(status == "no_response") {
            no_response_flag = true
            var no_response_container = document.createElement('div');
            no_response_container.className = 'modal-content-text-wrapper';
            no_response_container.innerHTML = '<div class="modal-content-text">'
                                            + agent_names[agent] + ' (' + agent +  
                                            ')</div>\
                                            <div class="modal-content-icon">'
                                            + state.icons.session_no_response +
                                            '</div>';           
            var reference_node = document.getElementById("guest-agent-no-response");
            insert_after(reference_node, no_response_container);
            remove_guest_agent_from_pending_list(agent);  
        }
        if(status == "reject") {
            reject_flag = true;
            var reject_container = document.createElement('div');
            reject_container.className = 'modal-content-text-wrapper';
            reject_container.innerHTML = '<div class="modal-content-text">'
                                            + agent_names[agent] + ' (' + agent +  
                                          ')</div>\
                                           <div class="modal-content-icon">'
                                            + state.icons.session_reject +
                                          '</div>';
            var reference_node = document.getElementById("guest-agent-reject");
            insert_after(reference_node, reject_container);                                                       
        }
        if(status == "exit") {
            exit_flag = true;
            var exit_container = document.createElement('div');
            exit_container.className = 'modal-content-text-wrapper';
            exit_container.innerHTML = '<div class="modal-content-text">'
                                            + agent_names[agent] + ' (' + agent +  
                                          ')</div>\
                                          <div class="modal-content-icon">'
                                            + state.icons.session_exit +
                                          '</div>'
            var reference_node = document.getElementById("guest-agent-exit");
            insert_after(reference_node, exit_container);                  
        }
        agent_count++;
    }

    if(!accept_flag) {
        var accept_none = none_html_container.cloneNode(true); 
        insert_after(document.getElementById("guest-agent-accept"), accept_none);
    }       
    if(!reject_flag) {
        var reject_none = none_html_container.cloneNode(true); 
        insert_after(document.getElementById("guest-agent-reject"), reject_none);
    }
    if(!exit_flag) {
        var exit_none = none_html_container.cloneNode(true);  
        insert_after(document.getElementById("guest-agent-exit"), exit_none);
    }
    if(!pending_flag) {
        var pending_none = none_html_container.cloneNode(true);  
        insert_after(document.getElementById("guest-agent-pending"), pending_none);
    }
    if(!no_response_flag) {
        var no_response_none = none_html_container.cloneNode(true); 
        insert_after(document.getElementById("guest-agent-no-response"), no_response_none);
    }
    document.getElementById("guest-agents-count-status").innerHTML = agent_count;
    document.getElementById("guest-agents-count-status-secondary").innerHTML = agent_count;
    check_and_update_agent_header();
}

function insert_after(reference_node, new_node) {
    reference_node.parentNode.insertBefore(new_node, reference_node.nextSibling);
}

function continuous_guest_agent_timer() {
    var session_id = get_session_id();
    var pending_list = get_agent_pending_list();

    if(!pending_list.length) {
        var local_storage_pending_list = JSON.parse(localStorage.getItem('agent_pending_list'));
        if(local_storage_pending_list) {
            pending_list = local_storage_pending_list;
        }
    }

    for(let i = 0; i < pending_list.length; i++) {

        if(!session_id) {
            session_id = localStorage.getItem(`guest_session_id-${pending_list[i]}`);
        }

        var pending_time = localStorage.getItem(`guest_agent_timer-${pending_list[i]}-${session_id}`);

        var pending_timer = document.getElementById(pending_list[i]+session_id);
        if(pending_time > 0) {
            if(pending_timer) {
                pending_timer.innerHTML = pending_time;
            }
            localStorage.setItem(`guest_agent_timer-${pending_list[i]}-${session_id}`, --pending_time);
        } 
    }
}

function remove_message_diffrentiator(session_id){
    try{
         let el = document.getElementById('customer-unread-message-diffrentiator-'+session_id)
         if(el!= null && el!= undefined ){
             el.remove()
         }
         set_is_message_diffrentiator_present(session_id,false)
    }catch(err){
        console.log(err)
    }
}
function hide_console() {
    document.getElementById("style-2").innerHTML = "";
    document.getElementById("live-chat-customer-details-sidebar").innerHTML = "";
    document.getElementById("live-chat-customer-details-sidebar").style.display = "none";
    document.getElementById("livechat-main-console").style.display = "none";
    document.getElementById("live-chat-no-chat-opened").style.display = "block";

    if (is_mobile()) {
        document.getElementById("live-chat-active-customers-sidebar").style.display = "block";
    }
}

function add_click_event() {
    const elems = document.getElementsByClassName("live-chat-active-customer");

    if (is_mobile()) {
        Array.from(elems).forEach((elem) => {
            $(elem).on("touchend", () => {
                go_to_chat(elem.id, false);
            });
        });
    } else {
        Array.from(elems).forEach((elem) => {
            $(elem).on("click", () => {
                go_to_chat(elem.id, false);
            });
        });
    }
}

function highlight_chat(prev_session_id, curr_session_id) {
    try {
        document.getElementsByClassName('live-chat-active-customer-current')[0].classList.remove('live-chat-active-customer-current');
    } catch (err) {}

    try {
        document
            .getElementById(prev_session_id)
            .classList.remove("live-chat-active-customer-current");
    } catch (err) {}

    try {
        document.getElementById(curr_session_id).classList.add("live-chat-active-customer-current");
    } catch (err) {}
}

function get_session_id() {
    return state.session_id.current;
}

function set_session_id(session_id) {
    state.session_id.current = session_id;
}

function set_prev_session_id(session_id) {
    state.session_id.previous = session_id;
}

function get_theme_color() {
    return state.theme_color;
}

function getCsrfToken() {
    var CSRF_TOKEN = $('input[name="csrfmiddlewaretoken"]').val();
    return CSRF_TOKEN;
}

function append_unread_msg_count_in_chat_icon(session_id, count) {

    const elem = document.getElementById(`livechat-unread-message-count-${session_id}`);
    try {
        if (count == 0) {
            elem.style.display = "none";
        } else {
            elem.innerHTML = count;
            elem.style.display = "flex";
        }
    } catch (err) {
        // console.log(err);
    }
    
}

function append_message_in_chat_icon(session_id, message, is_group) {
    const elem = document.getElementById(`livechat-last-message-${session_id}`);
    try {
        if (is_group) {
            elem.innerHTML = `${message.sender}: ${get_previous_message(message, session_id)}`;
        } else {
            elem.innerHTML = `${get_previous_message(message, session_id)}`;
        }
        hide_customer_typing_in_chat_icon(session_id);
    } catch (err) {
        // console.log(err);
    }
}

export function append_message_in_chat_icon_new(session_id, message, is_group) {
    const elem = document.getElementById(`livechat-last-message-${session_id}`);
    try {
        if (is_group) {
            elem.innerHTML = `${get_previous_message(message, session_id)}`;
        } else {
            elem.innerHTML = `${get_previous_message(message, session_id)}`;
        }

        const name_elem = document.getElementById(`livechat-message-sender-name-${session_id}`);
        if (name_elem) {
            name_elem.innerHTML = `${message.sender}`;
        }

        hide_customer_typing_in_chat_icon(session_id);
    } catch (err) {
        console.log(err);
    }
}

function show_customer_typing_in_chat_icon(session_id, sender) {
    if (state.timer_to_hide_typing_sidebar[session_id]) {
        clearTimeout(state.timer_to_hide_typing_sidebar[session_id]);
    }

    state.timer_to_hide_typing_sidebar[session_id] = setTimeout(function () {
        hide_customer_typing_in_chat_icon(session_id);
    }, 2000);

    const typing_elem = document.getElementById(`customer-typing-${session_id}`);
    const last_message_elem = document.getElementById(`livechat-last-message-${session_id}`);

    if (last_message_elem)
        last_message_elem.style.display = "none";

    if (typing_elem) {
        if (sender) {
            typing_elem.innerHTML = `${sender} is typing...`
        } else {
            typing_elem.innerHTML = 'typing...'
        }
        typing_elem.style.display = "block";
    }
}

function hide_customer_typing_in_chat_icon(session_id) {
    const typing_elem = document.getElementById(`customer-typing-${session_id}`);
    const last_message_elem = document.getElementById(`livechat-last-message-${session_id}`);

    if (typing_elem)
        typing_elem.style.display = "none";
    
    if (last_message_elem)
        last_message_elem.style.display = "block";
}

/* Auto Chat Disposal Starts */

function dispose_chat(session_id, bot_id, condition) {
    if (!state.auto_chat_disposal.enabled) return;

    if (!state.auto_chat_disposal[condition].enabled) return;

    if (state.agent.chat_dispose_started[session_id]) return;

    state.agent.chat_dispose_started[session_id] = true;

    let remaining_time = state.auto_chat_disposal[condition].dispose_time * 60 * 1000;

    const elapsed_time = localStorage.getItem(`${condition}_dispose_${session_id}`);
    if (elapsed_time) {
        remaining_time = remaining_time - (Date.parse(new Date()) - elapsed_time);

        if (remaining_time < 0) remaining_time = 0;
    }

    localStorage.setItem(`${condition}_dispose_${session_id}`, Date.parse(new Date()));

    let is_auto_disposal = localStorage.getItem(`auto_disposal-${session_id}`)
    if (is_auto_disposal != 'false') {
    setTimeout(() => {
        const json_string = JSON.stringify({
            session_id: session_id,
            closing_category_pk: -1,
            bot_id: bot_id,
            is_auto_disposed: true,
        });

        const params = get_params(json_string);
        let config = {
            headers: {
              'X-CSRFToken': getCsrfToken(),
            }
        }

        axios
            .post("/livechat/end-chat-session/", params, config)
            .then((response) => {
                response = custom_decrypt(response.data);
                response = JSON.parse(response);
                if (response.status_code == "200" || response.status_code == 200) {
                    update_customer_list();

                    const curr_session_id = get_session_id();
                    if (curr_session_id == session_id) {
                        go_to_chat(curr_session_id, true);
                    } else {
                        remove_other_chat(session_id);
                    }
                    remove_inactivity_timer(session_id);
                    console.log("calling remove_inactivity_timer in dispose_chat ", session_id)
                } else if (response.status_code == "300" || response.status_code == 300) {

                    console.log(response.status_message)
                }
            })
            .catch((err) => {
                console.log(err);
                console.log("Unable to dispose chat. Please try disposing manually.");
            });
    }, remaining_time)
    };
}

async function end_session_on_inactivity(bot_id, session_id) {
    if (state.agent.session_expired[session_id] || state.agent.chat_dispose_started[session_id])
        return;

    state.agent.session_expired[session_id] = true;

    // for debugging
    console.trace();
    
    const text_message = "Due to inactivity chat has ended";

    if (is_customer_facing_issues(session_id)) {
        localStorage.setItem(`customer_faced_issue_${session_id}`, true);

        const is_user_in_other_chat = get_session_id() != session_id;
        if (is_user_in_other_chat) {
            const unread_message_count = update_unread_message_count(session_id, false);
            append_unread_msg_count_in_chat_icon(session_id, unread_message_count);
            show_customer_status(unread_message_count, session_id);
        }

        let msg = {
            text_message: text_message,
            sender: "Customer",
            is_attachment: "False",
        };
        append_message_in_chat_icon(session_id, msg);

        append_system_text_response(text_message, return_time(), session_id);

        const is_ongoing_chat = localStorage.getItem(`ongoing_chat-${session_id}`);
        let message_id = save_system_message(text_message, 'INACTIVITY_CHAT', session_id);
        if (is_ongoing_chat == "true") {
            save_message_to_local({
                message: text_message,
                sender: "System",
                sender_name: "system",
                session_id: session_id,
                language: "en",
                message_id: message_id,
            });
        }

        dispose_chat(session_id, bot_id, "session_inactivity");

        return;
    }

    let customer_language = localStorage.getItem(`customer_language-${session_id}`);
    let translated_text = await get_translated_text("", text_message, session_id, "", customer_language);

    let sender = "inactivity_end_session";
    let sentence = JSON.stringify({
        message: JSON.stringify({
            text_message: text_message,
            type: "text",
            channel: "",
            path: "",
            bot_id: bot_id,
            translated_text: translated_text,
        }),
        sender: sender,
    });

    send_notification_to_customer(sentence);

    const customer_detail = state.customer_details[session_id];
    if (customer_detail && customer_detail.is_external) {
        send_inactivity_event(session_id);
    }
}

function send_inactivity_event(session_id) {
    const json_string = JSON.stringify({
        session_id: session_id,
        event: 'inactivity',
    });

    const params = get_params(json_string);

    axios
        .post('/livechat/send-livechat-event/', params)
        .then (response => {
            response = custom_decrypt(response.data);
            response = JSON.parse(response);

            if (response.status == 200) {
                console.log('inactivity event sent successfully');
            }
        })
        .catch (err => {
            console.log('failed to send inactivity event!');
            console.log(err);
        })
}

function set_inactivity_timer_all(response) {
    if (!state.auto_chat_disposal.enabled) return;

    if (!state.auto_chat_disposal.session_inactivity.enabled) return;

    response.customer_list.forEach((customer) => {

        if(customer.customer_channel == "Email") return;

        let timer = state.agent.inactivity_timer;

        if (customer.chat_ended_by == "Customer") {
            dispose_chat(customer.session_id, customer.bot_id, "user_terminates_chat");
        } else if (
            customer.chat_ended_by == "System" ||
            localStorage.getItem(`customer_faced_issue_${customer.session_id}`) == "true"
        ) {
            dispose_chat(customer.session_id, customer.bot_id, "session_inactivity");
        } else {
            const users = ["agent", "customer"];

            users.forEach((user) => {
                if (!timer[user][customer.session_id]) {
                    const last_updated_time = localStorage.getItem(
                        `session_inactivity_${user}_${customer.session_id}`
                    );

                    let elapsed_time = null;
                    if (last_updated_time) {
                        elapsed_time = Date.parse(new Date()) - last_updated_time;
                    }

                    set_inactivity_timer(customer.session_id, customer.bot_id, user, elapsed_time);
                }
            });
        }
    });
}

function reset_inactivity_timer(session_id, bot_id, user) {
    if (!state.auto_chat_disposal.enabled) return;

    if (!state.auto_chat_disposal.session_inactivity.enabled) return;

    let timer = state.agent.inactivity_timer;

    if (timer[user][session_id]) {
        clearTimeout(state.agent.inactivity_timer[user][session_id]);
    }
    set_inactivity_timer(session_id, bot_id, user);
}

function set_inactivity_timer(session_id, bot_id, user, elapsed_time) {
    
    if(session_id.trim() == "") return;
    
    if (!state.auto_chat_disposal.enabled) return;

    if (!state.auto_chat_disposal.session_inactivity.enabled) return;

    if(check_is_email_session(session_id)) return;

    let dispose_time = state.auto_chat_disposal.session_inactivity.inactivity_time * 60 * 1000;

    if (elapsed_time) {
        dispose_time = dispose_time - elapsed_time;

        if (dispose_time < 0) dispose_time = 0;
    }

    localStorage.setItem(`session_inactivity_${user}_${session_id}`, Date.parse(new Date()));

    state.agent.inactivity_timer[user][session_id] = setTimeout(() => {
        end_session_on_inactivity(bot_id, session_id);
    }, dispose_time);
}

function remove_inactivity_timer(session_id) {
    let timer = state.agent.inactivity_timer;
    if (timer["agent"][session_id]) {
        clearTimeout(state.agent.inactivity_timer["agent"][session_id]);
    }
    if (timer.customer[session_id]) {
        clearTimeout(state.agent.inactivity_timer["customer"][session_id]);
    }
}

function dispose_email_chat(session_id) {

    const json_string = JSON.stringify({
        session_id: session_id,
        closing_category_pk: -1,
        bot_id: state.agent.bot_id,
        is_email_chat_disposal: true,
    });

    const params = get_params(json_string);
    let config = {
        headers: {
          'X-CSRFToken': getCsrfToken(),
        }
    }

    axios
        .post("/livechat/end-chat-session/", params, config)
        .then((response) => {
            response = custom_decrypt(response.data);
            response = JSON.parse(response);
            if (response.status_code == "200" || response.status_code == 200) {

                let message_id = save_system_message("System auto resolved the chat", "", session_id);
                update_customer_list();
                const curr_session_id = get_session_id();
                if (curr_session_id == session_id) {
                    go_to_chat(curr_session_id, true);
                } else {
                    remove_other_chat(session_id);
                }
            } else if (response.status_code == "300" || response.status_code == 300) {
                console.log(response.status_message);
            }
        })
        .catch((err) => {
            console.log(err);
            console.log("Unable to dispose chat. Please try disposing manually.");
        }); 

    if (is_indexed_db_supported()) {
        let message_history = get_message_history_store();
        let chat_info = get_chat_info_store();
        let customer_details = get_customer_details_store();

        delete_messages_from_local(message_history.name);
        delete_messages_from_local(chat_info.name);
        delete_messages_from_local(customer_details.name);
    }  
}

/* Auto Chat Disposal Ends */

function update_message_count_to_server() {
    const counts = [];
    for(const session_id of state.ongoing_session_ids) {
        const unread_message_count = localStorage.getItem(`unread_message_count-${session_id}`)

        if (!unread_message_count) unread_message_count = 0;

        counts.push(unread_message_count);
    }

    if (counts.length) {
        const json_string = JSON.stringify({
            session_ids: state.ongoing_session_ids,
            counts: counts,
        });

        const params = get_params(json_string);

        let config = {
              headers: {
                'X-CSRFToken': getCsrfToken(),
              }
            }

        axios
            .post('/livechat/update-unread-message-count/', params, config)
            .then (response => {
                response = custom_decrypt(response.data);
                response = JSON.parse(response);

                if (response.status == 200) {
                    console.log('unread message count updated!');
                } else {
                    console.log('failed to update unread message count!');
                }
            })
            .catch (err => {
                console.log('failed to update unread message count!');
                console.log(err);
            })
    }
}

export function check_newchat_for_agent() {
    let json_string = JSON.stringify({
    	current_assigned_customer_count : get_current_assined_customer_count()
    });
    const params = get_params(json_string);

    let config = {
          headers: {
            'X-CSRFToken': getCsrfToken(),
          }
        }
        axios
        .post("/livechat/check-newchat-for-agent/", params, config)
        .then((response) => {
            response = custom_decrypt(response.data);
            response = JSON.parse(response);

            if(response.status == 200) {
                if (response["new_assigned_customer_count"] > 0 && is_mobile()) {
                    if ((!is_livechat_page() || is_user_in_other_tab())) {
                        send_notification_for_new_assigned_customer(
                            response["agent_name"],
                            response["new_assigned_customer_count"]
                        );
                    } else {
                        showToast("New Customer assigned to you!", 2000);
                    }
                }
              	else if (response["new_assigned_customer_count"] > 0 && (!is_livechat_page() || is_user_in_other_tab())) {
                    send_notification_for_new_assigned_customer(
                        response["agent_name"],
                        response["new_assigned_customer_count"]
                    );
                }
                set_current_assigned_customer_count(response["total_assigned_customer"])
            }
        })       
        .catch((err) => {
            console.log(err);
        });    
}

export function show_customers_tab() {
    if(window.IS_LIVECHAT_ENABLED_FOR_EMAIL) {
        $(".livechat-common-customers-tab").show();
        $(".livechat-email-customers-tab").hide();
        $("#livechat-customers-tab-header").addClass("active");
        $("#livechat-email-customers-tab-header").removeClass("active");
        hide_console();
        state.current_customer_tab = "common";
        $('.livechat-email-customers-tab').removeAttr('id');
    }
}

export function show_email_customers_tab() {
    if(window.IS_LIVECHAT_ENABLED_FOR_EMAIL) {
        $(".livechat-email-customers-tab").show();
        $(".livechat-common-customers-tab").hide();  
        $("#livechat-email-customers-tab-header").addClass("active");
        $("#livechat-customers-tab-header").removeClass("active");
        hide_console();
        state.current_customer_tab = "email";
        $('.livechat-common-customers-tab').removeAttr('id');
    }
}

export function check_is_email_session(session_id) {
    if(state.ongoing_email_sessions.includes(session_id)) {
        return true;
    }
    return false;
}

export function check_for_transcript() {

    let email_id = document.getElementById("transcript-email-id").value;
    if(!email_id || !validate_email("transcript-email-id"))
    {
        showToast("Please enter valid email Id", 2000);
        return ;
    }
    
    let session_id = get_session_id();
    let json_string = {
        email_id: email_id,
        session_id: session_id,
        is_agent_request : true,
    };

    json_string = JSON.stringify(json_string);
    const params = get_params(json_string);

    let config = {
          headers: {
            'X-CSRFToken': getCsrfToken(),
          }
        }

    axios
        .post("/livechat/enable-livechat-transcript/", params, config)
        .then((response) => {
            response = custom_decrypt(response.data);
            response = JSON.parse(response);
            if(response.status == 200) {
                
                localStorage.setItem(`transcript_option-${session_id}`, false);
                $("#livechat-send-transcript-modal").modal("hide");
                $("#transcript-button").addClass("disable-transcript-btn");
                let transcript_message = "The transcript will be sent over mail";
                showToast(transcript_message, 2000);
                append_system_text_response(transcript_message, return_time(), session_id);
                let message_id = save_system_message(transcript_message, 'IS_AGENT_TRANSCRIPT_REQUEST', session_id);
                    save_message_to_local({
                        message: transcript_message,
                        sender: "System",
                        sender_name: "system",
                        session_id: session_id,
                        language: "en",
                        message_id: message_id,
                    });
            } else {
                console.log("Failed to update");
            }

        })        
        .catch((err) => {
            
            console.log(err);
        });
}	

export function send_transcript() {
    
    let session_id = get_session_id();
    let json_string = {
        session_id: session_id,
        is_agent_request : true,
        is_feedback_transcript_request: false,
    };

    json_string = JSON.stringify(json_string);
    const params = get_params(json_string);

    let config = {
          headers: {
            'X-CSRFToken': getCsrfToken(),
          }
        }

    axios
        .post("/livechat/livechat-transcript/", params, config)
        .then((response) => {
            response = custom_decrypt(response.data);
            response = JSON.parse(response);
            if(response.status == 200) {
                console.log("Success");
            } else {
                console.log("Failed to send");
            }

        })        
        .catch((err) => {
            
            console.log(err);
        });
}	

function showToast(message, duration) {
    document.getElementById("toast_message").innerHTML = message;
    document.getElementsByClassName("toast-container")[0].style.display = "block";

    $(".toast").toast({
        delay: duration,
    });
    $(".toast").toast("show");

    setTimeout(function () {
        document.getElementsByClassName("toast-container")[0].style.display = "none";
    }, duration);
}

function is_rtl_language(agent_language) {
    if(state.rtl_languages.includes(agent_language)) {
        return true;
    } else {
        return false;
    }
}

function get_agent_name() {
    return state.agent.name;
}

function get_agent_username() {
    return state.agent.username;
}

function get_icons() {
    return state.icons;
}

function get_assigned_customer_count() {
    return state.customer_list.count;
}

function get_current_status() {
    return state.agent.current_status;
}
function is_notification_enabled() {
    return state.agent.is_notification_enable == "True";
}

function is_livechat_page() {
    return state.location === "/livechat/";
}

function set_theme_color(color_one, color_two, color_three) {
    state.theme_color.one = color_one;
    state.theme_color.two = color_two;
    state.theme_color.three = color_three;
}

function get_guest_agent_timer(){
    return state.guest_agent_timer;
}

function get_max_guest_agent(){
    return state.max_guest_agent;
}

function get_current_guest_sessions(){
    return state.current_guest_sessions;
}

function set_current_guest_sessions(current_guest_sessions){
    current_guest_sessions = current_guest_sessions.filter(only_unique_elems);
    state.current_guest_sessions = current_guest_sessions;
    localStorage.setItem('current_guest_sessions', JSON.stringify(current_guest_sessions));
}

function only_unique_elems(value, index, self) {
  return self.indexOf(value) === index;
}

export function get_voip_info() {
    return state.voip;
}

export function set_voip_call_initiated(value, request_from_customer) {
    state.voip.call_initiated = value;
    state.voip.request_from_customer = request_from_customer;
}

export function set_meeting_id(meeting_id) {
    state.voip.meeting_id = meeting_id;
}

export function set_request_session_id(session_id) {
    if (!session_id) {
        session_id = state.session_id.current;
    }

    state.voip.session_id = session_id;
}

export function set_voip_request_status(status) {
    state.voip.request_status = status;
}

export function add_customer_request(session_id) {
    state.voip.customer_requests.push(session_id);
}

export function remove_customer_request(session_id) {
    const index = state.voip.customer_requests.indexOf(session_id);

    if (index > -1) {
        state.voip.customer_requests.splice(index, 1);
    }

    state.voip.from_customer[session_id] = null;
}

export function set_customer_requested_voip(meeting_id, session_id, customer_name) {
    state.voip.from_customer[session_id] = {
        has_requested: true,
        meeting_id: meeting_id,
        session_id: session_id,
        customer_name: customer_name,
    } 
}

export function get_customer_request(session_id) {
    return state.voip.from_customer[session_id];
}

export function get_bot_id () {
    return state.agent.bot_id;
}

function get_unread_reply_message_count() {
    return state.unread_reply_message_count;
}

function set_unread_reply_message_count(count) {
    state.unread_reply_message_count = count;
}

function get_unread_reply_message_ids() {
    return state.unread_reply_message_ids;
}

function set_unread_reply_message_ids(message_ids) {
    state.unread_reply_message_ids = message_ids;
}

export function add_meeting_to_guest_agent(session_id, meeting_id, primary_agent_name) {
    state.voip.guest_agent.requests.push(session_id);
    state.voip.guest_agent.requests_map[session_id] = {
        meeting_id: meeting_id,
        primary_agent_name: primary_agent_name,
    };
}

export function get_cobrowsing_info() {
    return state.cobrowsing;
}

export function set_cobrowsing_info({meeting_id, session_id, status}) {
    state.cobrowsing.meeting_id = meeting_id;
    state.cobrowsing.session_id = session_id;
    state.cobrowsing.status = status;
}

export function set_cobrowse_session_id (session_id) {
    state.cobrowsing.cobrowse_session_id = session_id;
}

export function is_guest_session_onhold () {
    const guest_session = localStorage.getItem(`guest_session-${state.session_id.current}`);
    const guest_session_status = localStorage.getItem(`guest_session_status-${state.session_id.current}`);

    return guest_session == 'true' && guest_session_status == 'onhold';
}

export function set_is_eligible_for_cobrowsing(is_eligible) {
    state.cobrowsing.is_eligible = is_eligible;
}

export function get_chat_escalation_status() {
    return state.chat_escalation_status;
}

export function set_chat_escalation_status(chat_escalation_status) {
    state.chat_escalation_status = chat_escalation_status;
}

export function get_current_customer_tab() {
    return state.current_customer_tab;
}

export function set_current_assigned_customer_count(assigned_customers) {
    state.current_assigned_customer_count = assigned_customers;
}

export function get_current_assined_customer_count() {
    return state.current_assigned_customer_count;
}

export {
    initialize_console,
    go_to_chat,
    get_session_id,
    set_session_id,
    set_prev_session_id,
    get_theme_color,
    getCsrfToken,
    append_message_in_chat_icon,
    show_customer_status,
    showToast,
    get_agent_name,
    get_icons,
    update_customer_list,
    show_customer_typing_in_chat_icon,
    append_unread_msg_count_in_chat_icon,
    get_assigned_customer_count,
    get_current_status,
    is_notification_enabled,
    is_livechat_page,
    update_document_title,
    check_user_has_assigned_chats,
    dispose_chat,
    reset_inactivity_timer,
    remove_inactivity_timer,
    remove_message_diffrentiator,
    highlight_chat,
    check_message_belongs_to_agent,
    set_theme_color,
    get_agent_username,
    get_max_guest_agent,
    get_guest_agent_timer,
    update_guest_agent_status,
    get_current_guest_sessions,
    set_current_guest_sessions,
    remove_current_guest_session,
    remove_guest_agent_from_pending_list,
    get_unread_reply_message_count,
    set_unread_reply_message_count,
    get_unread_reply_message_ids,
    set_unread_reply_message_ids,
    set_input_pointer_as_per_lang,
    is_rtl_language,
    disable_input_fields_and_icons,
    show_custom_notification
};
